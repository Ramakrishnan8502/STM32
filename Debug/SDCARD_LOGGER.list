
SDCARD_LOGGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08009d98  08009d98  0000ad98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a364  0800a364  0000c074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a364  0800a364  0000b364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a36c  0800a36c  0000c074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a36c  0800a36c  0000b36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a370  0800a370  0000b370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800a374  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002698  20000074  0800a3e8  0000c074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000270c  0800a3e8  0000c70c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017264  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca1  00000000  00000000  00023308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00026fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f71  00000000  00000000  000283a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac80  00000000  00000000  00029319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec63  00000000  00000000  00043f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f5b  00000000  00000000  00062bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5b57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  000f5b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000fb1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d80 	.word	0x08009d80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08009d80 	.word	0x08009d80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_UART_RxCpltCallback>:

uint8_t sdCardsts = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000588:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800058c:	481a      	ldr	r0, [pc, #104]	@ (80005f8 <HAL_UART_RxCpltCallback+0x78>)
 800058e:	f002 fb38 	bl	8002c02 <HAL_GPIO_TogglePin>

  if (huart->Instance == USART1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a19      	ldr	r2, [pc, #100]	@ (80005fc <HAL_UART_RxCpltCallback+0x7c>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d128      	bne.n	80005ee <HAL_UART_RxCpltCallback+0x6e>
  {

    if (rx_index < RX_BUFFER_SIZE - 1)
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <HAL_UART_RxCpltCallback+0x80>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	2bc6      	cmp	r3, #198	@ 0xc6
 80005a2:	d817      	bhi.n	80005d4 <HAL_UART_RxCpltCallback+0x54>
    {

      rxBuffer[rx_index++] = rx_data;
 80005a4:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <HAL_UART_RxCpltCallback+0x80>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	b291      	uxth	r1, r2
 80005ac:	4a14      	ldr	r2, [pc, #80]	@ (8000600 <HAL_UART_RxCpltCallback+0x80>)
 80005ae:	8011      	strh	r1, [r2, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <HAL_UART_RxCpltCallback+0x84>)
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <HAL_UART_RxCpltCallback+0x88>)
 80005b8:	5499      	strb	r1, [r3, r2]


      if (rx_data == '\n')
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <HAL_UART_RxCpltCallback+0x84>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b0a      	cmp	r3, #10
 80005c0:	d102      	bne.n	80005c8 <HAL_UART_RxCpltCallback+0x48>
      {

        messageReceived = 1;
 80005c2:	4b12      	ldr	r3, [pc, #72]	@ (800060c <HAL_UART_RxCpltCallback+0x8c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
      }


      HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	490e      	ldr	r1, [pc, #56]	@ (8000604 <HAL_UART_RxCpltCallback+0x84>)
 80005cc:	4810      	ldr	r0, [pc, #64]	@ (8000610 <HAL_UART_RxCpltCallback+0x90>)
 80005ce:	f004 fd85 	bl	80050dc <HAL_UART_Receive_IT>
	 rx_index = 0;
      memset(rxBuffer, 0, RX_BUFFER_SIZE);
      HAL_UART_Receive_IT(&huart1, &rx_data, 1);
    }
  }
}
 80005d2:	e00c      	b.n	80005ee <HAL_UART_RxCpltCallback+0x6e>
	 rx_index = 0;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <HAL_UART_RxCpltCallback+0x80>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
      memset(rxBuffer, 0, RX_BUFFER_SIZE);
 80005da:	22c8      	movs	r2, #200	@ 0xc8
 80005dc:	2100      	movs	r1, #0
 80005de:	480a      	ldr	r0, [pc, #40]	@ (8000608 <HAL_UART_RxCpltCallback+0x88>)
 80005e0:	f008 ff4e 	bl	8009480 <memset>
      HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	4907      	ldr	r1, [pc, #28]	@ (8000604 <HAL_UART_RxCpltCallback+0x84>)
 80005e8:	4809      	ldr	r0, [pc, #36]	@ (8000610 <HAL_UART_RxCpltCallback+0x90>)
 80005ea:	f004 fd77 	bl	80050dc <HAL_UART_Receive_IT>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40020000 	.word	0x40020000
 80005fc:	40011000 	.word	0x40011000
 8000600:	20000196 	.word	0x20000196
 8000604:	20000198 	.word	0x20000198
 8000608:	20000090 	.word	0x20000090
 800060c:	20000199 	.word	0x20000199
 8000610:	2000232c 	.word	0x2000232c

08000614 <processReceivedData>:

uint8_t processReceivedData(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	if(messageReceived == 0) return 0;
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <processReceivedData+0x1c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d101      	bne.n	8000624 <processReceivedData+0x10>
 8000620:	2300      	movs	r3, #0
 8000622:	e002      	b.n	800062a <processReceivedData+0x16>
	log_to_sdcard(rxBuffer);
 8000624:	4803      	ldr	r0, [pc, #12]	@ (8000634 <processReceivedData+0x20>)
 8000626:	f001 fb39 	bl	8001c9c <log_to_sdcard>

}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000199 	.word	0x20000199
 8000634:	20000090 	.word	0x20000090

08000638 <MainInit>:

void MainInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
   lcd_init();
 800063c:	f000 fde2 	bl	8001204 <lcd_init>

   HAL_PWR_EnableBkUpAccess(); // Enable backup domain access
 8000640:	f002 ffa8 	bl	8003594 <HAL_PWR_EnableBkUpAccess>

   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <MainInit+0x40>)
 800064c:	f002 fac0 	bl	8002bd0 <HAL_GPIO_WritePin>

	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x1234)
 8000650:	2101      	movs	r1, #1
 8000652:	480a      	ldr	r0, [pc, #40]	@ (800067c <MainInit+0x44>)
 8000654:	f004 f888 	bl	8004768 <HAL_RTCEx_BKUPRead>
 8000658:	4603      	mov	r3, r0
 800065a:	f241 2234 	movw	r2, #4660	@ 0x1234
 800065e:	4293      	cmp	r3, r2
 8000660:	d006      	beq.n	8000670 <MainInit+0x38>
	{
		RTC_setTime();
 8000662:	f001 faa3 	bl	8001bac <RTC_setTime>
		RTC_setDate();
 8000666:	f001 fac1 	bl	8001bec <RTC_setDate>
		RTC_Backup_Write();
 800066a:	f001 fa49 	bl	8001b00 <RTC_Backup_Write>
	} else
	{
		RTC_Backup_Read();
	}
}
 800066e:	e001      	b.n	8000674 <MainInit+0x3c>
		RTC_Backup_Read();
 8000670:	f001 fa52 	bl	8001b18 <RTC_Backup_Read>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40020400 	.word	0x40020400
 800067c:	2000222c 	.word	0x2000222c

08000680 <MainApp>:

void MainApp(void)
	{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
		  getDateTime();
 8000684:	f001 fa52 	bl	8001b2c <getDateTime>
		  DisplayDateTime();
 8000688:	f001 face 	bl	8001c28 <DisplayDateTime>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800068c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000690:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <MainApp+0x34>)
 8000692:	f002 fab6 	bl	8002c02 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000696:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800069a:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <MainApp+0x38>)
 800069c:	f002 fab1 	bl	8002c02 <HAL_GPIO_TogglePin>
//		  sdCardsts = check_sdcard_status();
		  sdCardsts = 1;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MainApp+0x3c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
		  processReceivedData();
 80006a6:	f7ff ffb5 	bl	8000614 <processReceivedData>
		  HAL_Delay(200);
 80006aa:	20c8      	movs	r0, #200	@ 0xc8
 80006ac:	f001 ff2c 	bl	8002508 <HAL_Delay>
	}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020800 	.word	0x40020800
 80006b8:	40020400 	.word	0x40020400
 80006bc:	2000019a 	.word	0x2000019a

080006c0 <HandleButtonPress>:


#define DEBOUNCE_DELAY 50  // 50ms debounce delay

void HandleButtonPress()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    static uint32_t lastPressTime = 0;
    uint32_t currentTime = HAL_GetTick();
 80006c6:	f001 ff13 	bl	80024f0 <HAL_GetTick>
 80006ca:	6078      	str	r0, [r7, #4]

    // Ensure enough time has passed since the last press
    if ((currentTime - lastPressTime) < DEBOUNCE_DELAY)
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <HandleButtonPress+0x70>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	2b31      	cmp	r3, #49	@ 0x31
 80006d6:	d927      	bls.n	8000728 <HandleButtonPress+0x68>
        return;  // Ignore button press if within debounce time

    // Check for button combinations
    if (ReadButton(GPIOA, BTN_3_Pin) && ReadButton(GPIOA, BTN_5_Pin))
 80006d8:	2104      	movs	r1, #4
 80006da:	4816      	ldr	r0, [pc, #88]	@ (8000734 <HandleButtonPress+0x74>)
 80006dc:	f001 f802 	bl	80016e4 <ReadButton>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d009      	beq.n	80006fa <HandleButtonPress+0x3a>
 80006e6:	2101      	movs	r1, #1
 80006e8:	4812      	ldr	r0, [pc, #72]	@ (8000734 <HandleButtonPress+0x74>)
 80006ea:	f000 fffb 	bl	80016e4 <ReadButton>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <HandleButtonPress+0x3a>
    {
        EditDate();
 80006f4:	f000 fdd8 	bl	80012a8 <EditDate>
 80006f8:	e012      	b.n	8000720 <HandleButtonPress+0x60>
    }
    else if (ReadButton(GPIOA, BTN_1_Pin) && ReadButton(GPIOA, BTN_3_Pin))
 80006fa:	2110      	movs	r1, #16
 80006fc:	480d      	ldr	r0, [pc, #52]	@ (8000734 <HandleButtonPress+0x74>)
 80006fe:	f000 fff1 	bl	80016e4 <ReadButton>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d009      	beq.n	800071c <HandleButtonPress+0x5c>
 8000708:	2104      	movs	r1, #4
 800070a:	480a      	ldr	r0, [pc, #40]	@ (8000734 <HandleButtonPress+0x74>)
 800070c:	f000 ffea 	bl	80016e4 <ReadButton>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <HandleButtonPress+0x5c>
    {
        ReadsdCardStorage();
 8000716:	f001 fb81 	bl	8001e1c <ReadsdCardStorage>
 800071a:	e001      	b.n	8000720 <HandleButtonPress+0x60>
    }
    else
    {
        MainApp();
 800071c:	f7ff ffb0 	bl	8000680 <MainApp>
    }

    lastPressTime = currentTime;  // Update last press time
 8000720:	4a03      	ldr	r2, [pc, #12]	@ (8000730 <HandleButtonPress+0x70>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	e000      	b.n	800072a <HandleButtonPress+0x6a>
        return;  // Ignore button press if within debounce time
 8000728:	bf00      	nop
}
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000019c 	.word	0x2000019c
 8000734:	40020000 	.word	0x40020000

08000738 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2101      	movs	r1, #1
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <SELECT+0x18>)
 8000742:	f002 fa45 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f001 fede 	bl	8002508 <HAL_Delay>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020400 	.word	0x40020400

08000754 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2101      	movs	r1, #1
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <DESELECT+0x18>)
 800075e:	f002 fa37 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f001 fed0 	bl	8002508 <HAL_Delay>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40020400 	.word	0x40020400

08000770 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800077a:	bf00      	nop
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <SPI_TxByte+0x30>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	2b02      	cmp	r3, #2
 8000788:	d1f8      	bne.n	800077c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800078a:	1df9      	adds	r1, r7, #7
 800078c:	2364      	movs	r3, #100	@ 0x64
 800078e:	2201      	movs	r2, #1
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <SPI_TxByte+0x30>)
 8000792:	f004 f88a 	bl	80048aa <HAL_SPI_Transmit>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200022d4 	.word	0x200022d4

080007a4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007b0:	bf00      	nop
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <SPI_TxBuffer+0x30>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d1f8      	bne.n	80007b2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80007c0:	887a      	ldrh	r2, [r7, #2]
 80007c2:	2364      	movs	r3, #100	@ 0x64
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <SPI_TxBuffer+0x30>)
 80007c8:	f004 f86f 	bl	80048aa <HAL_SPI_Transmit>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200022d4 	.word	0x200022d4

080007d8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80007de:	23ff      	movs	r3, #255	@ 0xff
 80007e0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007e2:	bf00      	nop
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <SPI_RxByte+0x34>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d1f8      	bne.n	80007e4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80007f2:	1dba      	adds	r2, r7, #6
 80007f4:	1df9      	adds	r1, r7, #7
 80007f6:	2364      	movs	r3, #100	@ 0x64
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	4803      	ldr	r0, [pc, #12]	@ (800080c <SPI_RxByte+0x34>)
 80007fe:	f004 f998 	bl	8004b32 <HAL_SPI_TransmitReceive>

	return data;
 8000802:	79bb      	ldrb	r3, [r7, #6]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200022d4 	.word	0x200022d4

08000810 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000818:	f7ff ffde 	bl	80007d8 <SPI_RxByte>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	701a      	strb	r2, [r3, #0]
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <SD_ReadyWait+0x30>)
 8000834:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000838:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800083a:	f7ff ffcd 	bl	80007d8 <SPI_RxByte>
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2bff      	cmp	r3, #255	@ 0xff
 8000846:	d004      	beq.n	8000852 <SD_ReadyWait+0x26>
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <SD_ReadyWait+0x30>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1f3      	bne.n	800083a <SD_ReadyWait+0xe>

	return res;
 8000852:	79fb      	ldrb	r3, [r7, #7]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000237e 	.word	0x2000237e

08000860 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000866:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800086a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800086c:	f7ff ff72 	bl	8000754 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	e005      	b.n	8000882 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000876:	20ff      	movs	r0, #255	@ 0xff
 8000878:	f7ff ff7a 	bl	8000770 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	3301      	adds	r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	2b09      	cmp	r3, #9
 8000886:	ddf6      	ble.n	8000876 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000888:	f7ff ff56 	bl	8000738 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800088c:	2340      	movs	r3, #64	@ 0x40
 800088e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80008a0:	2395      	movs	r3, #149	@ 0x95
 80008a2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80008a4:	463b      	mov	r3, r7
 80008a6:	2106      	movs	r1, #6
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff7b 	bl	80007a4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80008ae:	e002      	b.n	80008b6 <SD_PowerOn+0x56>
	{
		cnt--;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80008b6:	f7ff ff8f 	bl	80007d8 <SPI_RxByte>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d002      	beq.n	80008c6 <SD_PowerOn+0x66>
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f4      	bne.n	80008b0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80008c6:	f7ff ff45 	bl	8000754 <DESELECT>
	SPI_TxByte(0XFF);
 80008ca:	20ff      	movs	r0, #255	@ 0xff
 80008cc:	f7ff ff50 	bl	8000770 <SPI_TxByte>

	PowerFlag = 1;
 80008d0:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <SD_PowerOn+0x80>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001a1 	.word	0x200001a1

080008e4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <SD_PowerOff+0x14>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	200001a1 	.word	0x200001a1

080008fc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <SD_CheckPower+0x14>)
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200001a1 	.word	0x200001a1

08000914 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <SD_RxDataBlock+0x5c>)
 8000920:	22c8      	movs	r2, #200	@ 0xc8
 8000922:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000924:	f7ff ff58 	bl	80007d8 <SPI_RxByte>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	2bff      	cmp	r3, #255	@ 0xff
 8000930:	d104      	bne.n	800093c <SD_RxDataBlock+0x28>
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <SD_RxDataBlock+0x5c>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	b29b      	uxth	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1f3      	bne.n	8000924 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000940:	d001      	beq.n	8000946 <SD_RxDataBlock+0x32>
 8000942:	2300      	movs	r3, #0
 8000944:	e00f      	b.n	8000966 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5f 	bl	8000810 <SPI_RxBytePtr>
	} while(len--);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	603a      	str	r2, [r7, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1f4      	bne.n	8000946 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800095c:	f7ff ff3c 	bl	80007d8 <SPI_RxByte>
	SPI_RxByte();
 8000960:	f7ff ff3a 	bl	80007d8 <SPI_RxByte>

	return TRUE;
 8000964:	2301      	movs	r3, #1
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000237d 	.word	0x2000237d

08000974 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000984:	f7ff ff52 	bl	800082c <SD_ReadyWait>
 8000988:	4603      	mov	r3, r0
 800098a:	2bff      	cmp	r3, #255	@ 0xff
 800098c:	d001      	beq.n	8000992 <SD_TxDataBlock+0x1e>
 800098e:	2300      	movs	r3, #0
 8000990:	e02f      	b.n	80009f2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff feeb 	bl	8000770 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	2bfd      	cmp	r3, #253	@ 0xfd
 800099e:	d020      	beq.n	80009e2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80009a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fefd 	bl	80007a4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80009aa:	f7ff ff15 	bl	80007d8 <SPI_RxByte>
		SPI_RxByte();
 80009ae:	f7ff ff13 	bl	80007d8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80009b2:	e00b      	b.n	80009cc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80009b4:	f7ff ff10 	bl	80007d8 <SPI_RxByte>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	f003 031f 	and.w	r3, r3, #31
 80009c2:	2b05      	cmp	r3, #5
 80009c4:	d006      	beq.n	80009d4 <SD_TxDataBlock+0x60>
			i++;
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	3301      	adds	r3, #1
 80009ca:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	2b40      	cmp	r3, #64	@ 0x40
 80009d0:	d9f0      	bls.n	80009b4 <SD_TxDataBlock+0x40>
 80009d2:	e000      	b.n	80009d6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80009d4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80009d6:	bf00      	nop
 80009d8:	f7ff fefe 	bl	80007d8 <SPI_RxByte>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0fa      	beq.n	80009d8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	f003 031f 	and.w	r3, r3, #31
 80009e8:	2b05      	cmp	r3, #5
 80009ea:	d101      	bne.n	80009f0 <SD_TxDataBlock+0x7c>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b084      	sub	sp, #16
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	6039      	str	r1, [r7, #0]
 8000a04:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000a06:	f7ff ff11 	bl	800082c <SD_ReadyWait>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2bff      	cmp	r3, #255	@ 0xff
 8000a0e:	d001      	beq.n	8000a14 <SD_SendCmd+0x1a>
 8000a10:	23ff      	movs	r3, #255	@ 0xff
 8000a12:	e042      	b.n	8000a9a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff feaa 	bl	8000770 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	0e1b      	lsrs	r3, r3, #24
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fea4 	bl	8000770 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	0c1b      	lsrs	r3, r3, #16
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe9e 	bl	8000770 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fe98 	bl	8000770 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fe93 	bl	8000770 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b40      	cmp	r3, #64	@ 0x40
 8000a4e:	d102      	bne.n	8000a56 <SD_SendCmd+0x5c>
 8000a50:	2395      	movs	r3, #149	@ 0x95
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e007      	b.n	8000a66 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b48      	cmp	r3, #72	@ 0x48
 8000a5a:	d102      	bne.n	8000a62 <SD_SendCmd+0x68>
 8000a5c:	2387      	movs	r3, #135	@ 0x87
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	e001      	b.n	8000a66 <SD_SendCmd+0x6c>
	else crc = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe81 	bl	8000770 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b4c      	cmp	r3, #76	@ 0x4c
 8000a72:	d101      	bne.n	8000a78 <SD_SendCmd+0x7e>
 8000a74:	f7ff feb0 	bl	80007d8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000a78:	230a      	movs	r3, #10
 8000a7a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000a7c:	f7ff feac 	bl	80007d8 <SPI_RxByte>
 8000a80:	4603      	mov	r3, r0
 8000a82:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000a84:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	da05      	bge.n	8000a98 <SD_SendCmd+0x9e>
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	73bb      	strb	r3, [r7, #14]
 8000a92:	7bbb      	ldrb	r3, [r7, #14]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f1      	bne.n	8000a7c <SD_SendCmd+0x82>

	return res;
 8000a98:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SD_disk_initialize+0x14>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e0d6      	b.n	8000c66 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000ab8:	4b6d      	ldr	r3, [pc, #436]	@ (8000c70 <SD_disk_initialize+0x1cc>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <SD_disk_initialize+0x2a>
 8000ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8000c70 <SD_disk_initialize+0x1cc>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	e0cb      	b.n	8000c66 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000ace:	f7ff fec7 	bl	8000860 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000ad2:	f7ff fe31 	bl	8000738 <SELECT>

	/* check disk type */
	type = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000ada:	2100      	movs	r1, #0
 8000adc:	2040      	movs	r0, #64	@ 0x40
 8000ade:	f7ff ff8c 	bl	80009fa <SD_SendCmd>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	f040 80a6 	bne.w	8000c36 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000aea:	4b62      	ldr	r3, [pc, #392]	@ (8000c74 <SD_disk_initialize+0x1d0>)
 8000aec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000af0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000af2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000af6:	2048      	movs	r0, #72	@ 0x48
 8000af8:	f7ff ff7f 	bl	80009fa <SD_SendCmd>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d158      	bne.n	8000bb4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e00c      	b.n	8000b22 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000b08:	7bfc      	ldrb	r4, [r7, #15]
 8000b0a:	f7ff fe65 	bl	80007d8 <SPI_RxByte>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	f104 0310 	add.w	r3, r4, #16
 8000b16:	443b      	add	r3, r7
 8000b18:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	73fb      	strb	r3, [r7, #15]
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d9ef      	bls.n	8000b08 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b28:	7abb      	ldrb	r3, [r7, #10]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	f040 8083 	bne.w	8000c36 <SD_disk_initialize+0x192>
 8000b30:	7afb      	ldrb	r3, [r7, #11]
 8000b32:	2baa      	cmp	r3, #170	@ 0xaa
 8000b34:	d17f      	bne.n	8000c36 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b36:	2100      	movs	r1, #0
 8000b38:	2077      	movs	r0, #119	@ 0x77
 8000b3a:	f7ff ff5e 	bl	80009fa <SD_SendCmd>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d807      	bhi.n	8000b54 <SD_disk_initialize+0xb0>
 8000b44:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000b48:	2069      	movs	r0, #105	@ 0x69
 8000b4a:	f7ff ff56 	bl	80009fa <SD_SendCmd>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000b54:	4b47      	ldr	r3, [pc, #284]	@ (8000c74 <SD_disk_initialize+0x1d0>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1eb      	bne.n	8000b36 <SD_disk_initialize+0x92>
 8000b5e:	e000      	b.n	8000b62 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b60:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000b62:	4b44      	ldr	r3, [pc, #272]	@ (8000c74 <SD_disk_initialize+0x1d0>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d064      	beq.n	8000c36 <SD_disk_initialize+0x192>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	207a      	movs	r0, #122	@ 0x7a
 8000b70:	f7ff ff43 	bl	80009fa <SD_SendCmd>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d15d      	bne.n	8000c36 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]
 8000b7e:	e00c      	b.n	8000b9a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000b80:	7bfc      	ldrb	r4, [r7, #15]
 8000b82:	f7ff fe29 	bl	80007d8 <SPI_RxByte>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f104 0310 	add.w	r3, r4, #16
 8000b8e:	443b      	add	r3, r7
 8000b90:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	3301      	adds	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d9ef      	bls.n	8000b80 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ba0:	7a3b      	ldrb	r3, [r7, #8]
 8000ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SD_disk_initialize+0x10a>
 8000baa:	230c      	movs	r3, #12
 8000bac:	e000      	b.n	8000bb0 <SD_disk_initialize+0x10c>
 8000bae:	2304      	movs	r3, #4
 8000bb0:	73bb      	strb	r3, [r7, #14]
 8000bb2:	e040      	b.n	8000c36 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2077      	movs	r0, #119	@ 0x77
 8000bb8:	f7ff ff1f 	bl	80009fa <SD_SendCmd>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d808      	bhi.n	8000bd4 <SD_disk_initialize+0x130>
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2069      	movs	r0, #105	@ 0x69
 8000bc6:	f7ff ff18 	bl	80009fa <SD_SendCmd>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d801      	bhi.n	8000bd4 <SD_disk_initialize+0x130>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e000      	b.n	8000bd6 <SD_disk_initialize+0x132>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d10e      	bne.n	8000bfc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000bde:	2100      	movs	r1, #0
 8000be0:	2077      	movs	r0, #119	@ 0x77
 8000be2:	f7ff ff0a 	bl	80009fa <SD_SendCmd>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d80e      	bhi.n	8000c0a <SD_disk_initialize+0x166>
 8000bec:	2100      	movs	r1, #0
 8000bee:	2069      	movs	r0, #105	@ 0x69
 8000bf0:	f7ff ff03 	bl	80009fa <SD_SendCmd>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d107      	bne.n	8000c0a <SD_disk_initialize+0x166>
 8000bfa:	e00d      	b.n	8000c18 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2041      	movs	r0, #65	@ 0x41
 8000c00:	f7ff fefb 	bl	80009fa <SD_SendCmd>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <SD_disk_initialize+0x1d0>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1e1      	bne.n	8000bd8 <SD_disk_initialize+0x134>
 8000c14:	e000      	b.n	8000c18 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c16:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <SD_disk_initialize+0x1d0>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <SD_disk_initialize+0x18e>
 8000c22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c26:	2050      	movs	r0, #80	@ 0x50
 8000c28:	f7ff fee7 	bl	80009fa <SD_SendCmd>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SD_disk_initialize+0x192>
 8000c32:	2300      	movs	r3, #0
 8000c34:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000c36:	4a10      	ldr	r2, [pc, #64]	@ (8000c78 <SD_disk_initialize+0x1d4>)
 8000c38:	7bbb      	ldrb	r3, [r7, #14]
 8000c3a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000c3c:	f7ff fd8a 	bl	8000754 <DESELECT>
	SPI_RxByte();
 8000c40:	f7ff fdca 	bl	80007d8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d008      	beq.n	8000c5c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <SD_disk_initialize+0x1cc>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f023 0301 	bic.w	r3, r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <SD_disk_initialize+0x1cc>)
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e001      	b.n	8000c60 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000c5c:	f7ff fe42 	bl	80008e4 <SD_PowerOff>
	}

	return Stat;
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <SD_disk_initialize+0x1cc>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000
 8000c74:	2000237d 	.word	0x2000237d
 8000c78:	200001a0 	.word	0x200001a0

08000c7c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SD_disk_status+0x14>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e002      	b.n	8000c96 <SD_disk_status+0x1a>
	return Stat;
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <SD_disk_status+0x28>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2db      	uxtb	r3, r3
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d102      	bne.n	8000cc4 <SD_disk_read+0x1c>
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <SD_disk_read+0x20>
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	e051      	b.n	8000d6c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <SD_disk_read+0xcc>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SD_disk_read+0x32>
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e048      	b.n	8000d6c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000cda:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <SD_disk_read+0xd0>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <SD_disk_read+0x44>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	025b      	lsls	r3, r3, #9
 8000cea:	607b      	str	r3, [r7, #4]

	SELECT();
 8000cec:	f7ff fd24 	bl	8000738 <SELECT>

	if (count == 1)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d111      	bne.n	8000d1a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	2051      	movs	r0, #81	@ 0x51
 8000cfa:	f7ff fe7e 	bl	80009fa <SD_SendCmd>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d129      	bne.n	8000d58 <SD_disk_read+0xb0>
 8000d04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d08:	68b8      	ldr	r0, [r7, #8]
 8000d0a:	f7ff fe03 	bl	8000914 <SD_RxDataBlock>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d021      	beq.n	8000d58 <SD_disk_read+0xb0>
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	e01e      	b.n	8000d58 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	2052      	movs	r0, #82	@ 0x52
 8000d1e:	f7ff fe6c 	bl	80009fa <SD_SendCmd>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d117      	bne.n	8000d58 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d2c:	68b8      	ldr	r0, [r7, #8]
 8000d2e:	f7ff fdf1 	bl	8000914 <SD_RxDataBlock>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00a      	beq.n	8000d4e <SD_disk_read+0xa6>
				buff += 512;
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d3e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1ed      	bne.n	8000d28 <SD_disk_read+0x80>
 8000d4c:	e000      	b.n	8000d50 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d4e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000d50:	2100      	movs	r1, #0
 8000d52:	204c      	movs	r0, #76	@ 0x4c
 8000d54:	f7ff fe51 	bl	80009fa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000d58:	f7ff fcfc 	bl	8000754 <DESELECT>
	SPI_RxByte();
 8000d5c:	f7ff fd3c 	bl	80007d8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	200001a0 	.word	0x200001a0

08000d7c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <SD_disk_write+0x1c>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <SD_disk_write+0x20>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e06b      	b.n	8000e74 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d9c:	4b37      	ldr	r3, [pc, #220]	@ (8000e7c <SD_disk_write+0x100>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SD_disk_write+0x32>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e062      	b.n	8000e74 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000dae:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <SD_disk_write+0x100>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SD_disk_write+0x44>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e059      	b.n	8000e74 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <SD_disk_write+0x104>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <SD_disk_write+0x56>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	025b      	lsls	r3, r3, #9
 8000dd0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000dd2:	f7ff fcb1 	bl	8000738 <SELECT>

	if (count == 1)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d110      	bne.n	8000dfe <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	2058      	movs	r0, #88	@ 0x58
 8000de0:	f7ff fe0b 	bl	80009fa <SD_SendCmd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d13a      	bne.n	8000e60 <SD_disk_write+0xe4>
 8000dea:	21fe      	movs	r1, #254	@ 0xfe
 8000dec:	68b8      	ldr	r0, [r7, #8]
 8000dee:	f7ff fdc1 	bl	8000974 <SD_TxDataBlock>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d033      	beq.n	8000e60 <SD_disk_write+0xe4>
			count = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	e030      	b.n	8000e60 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000dfe:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <SD_disk_write+0x104>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d007      	beq.n	8000e1a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2077      	movs	r0, #119	@ 0x77
 8000e0e:	f7ff fdf4 	bl	80009fa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000e12:	6839      	ldr	r1, [r7, #0]
 8000e14:	2057      	movs	r0, #87	@ 0x57
 8000e16:	f7ff fdf0 	bl	80009fa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	2059      	movs	r0, #89	@ 0x59
 8000e1e:	f7ff fdec 	bl	80009fa <SD_SendCmd>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d11b      	bne.n	8000e60 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e28:	21fc      	movs	r1, #252	@ 0xfc
 8000e2a:	68b8      	ldr	r0, [r7, #8]
 8000e2c:	f7ff fda2 	bl	8000974 <SD_TxDataBlock>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00a      	beq.n	8000e4c <SD_disk_write+0xd0>
				buff += 512;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000e3c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1ee      	bne.n	8000e28 <SD_disk_write+0xac>
 8000e4a:	e000      	b.n	8000e4e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e4c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000e4e:	21fd      	movs	r1, #253	@ 0xfd
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fd8f 	bl	8000974 <SD_TxDataBlock>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <SD_disk_write+0xe4>
			{
				count = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000e60:	f7ff fc78 	bl	8000754 <DESELECT>
	SPI_RxByte();
 8000e64:	f7ff fcb8 	bl	80007d8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	2300      	moveq	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	200001a0 	.word	0x200001a0

08000e84 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b08b      	sub	sp, #44	@ 0x2c
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	603a      	str	r2, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	460b      	mov	r3, r1
 8000e92:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SD_disk_ioctl+0x1e>
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	e113      	b.n	80010ca <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	2b05      	cmp	r3, #5
 8000eac:	d124      	bne.n	8000ef8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000eae:	6a3b      	ldr	r3, [r7, #32]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d012      	beq.n	8000edc <SD_disk_ioctl+0x58>
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	dc1a      	bgt.n	8000ef0 <SD_disk_ioctl+0x6c>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <SD_disk_ioctl+0x40>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d006      	beq.n	8000ed0 <SD_disk_ioctl+0x4c>
 8000ec2:	e015      	b.n	8000ef0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000ec4:	f7ff fd0e 	bl	80008e4 <SD_PowerOff>
			res = RES_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ece:	e0fa      	b.n	80010c6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000ed0:	f7ff fcc6 	bl	8000860 <SD_PowerOn>
			res = RES_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eda:	e0f4      	b.n	80010c6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	1c5c      	adds	r4, r3, #1
 8000ee0:	f7ff fd0c 	bl	80008fc <SD_CheckPower>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eee:	e0ea      	b.n	80010c6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ef6:	e0e6      	b.n	80010c6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ef8:	4b76      	ldr	r3, [pc, #472]	@ (80010d4 <SD_disk_ioctl+0x250>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SD_disk_ioctl+0x86>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e0df      	b.n	80010ca <SD_disk_ioctl+0x246>

		SELECT();
 8000f0a:	f7ff fc15 	bl	8000738 <SELECT>

		switch (ctrl)
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	2b0d      	cmp	r3, #13
 8000f12:	f200 80c9 	bhi.w	80010a8 <SD_disk_ioctl+0x224>
 8000f16:	a201      	add	r2, pc, #4	@ (adr r2, 8000f1c <SD_disk_ioctl+0x98>)
 8000f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1c:	08001013 	.word	0x08001013
 8000f20:	08000f55 	.word	0x08000f55
 8000f24:	08001003 	.word	0x08001003
 8000f28:	080010a9 	.word	0x080010a9
 8000f2c:	080010a9 	.word	0x080010a9
 8000f30:	080010a9 	.word	0x080010a9
 8000f34:	080010a9 	.word	0x080010a9
 8000f38:	080010a9 	.word	0x080010a9
 8000f3c:	080010a9 	.word	0x080010a9
 8000f40:	080010a9 	.word	0x080010a9
 8000f44:	080010a9 	.word	0x080010a9
 8000f48:	08001025 	.word	0x08001025
 8000f4c:	08001049 	.word	0x08001049
 8000f50:	0800106d 	.word	0x0800106d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000f54:	2100      	movs	r1, #0
 8000f56:	2049      	movs	r0, #73	@ 0x49
 8000f58:	f7ff fd4f 	bl	80009fa <SD_SendCmd>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 80a6 	bne.w	80010b0 <SD_disk_ioctl+0x22c>
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2110      	movs	r1, #16
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fcd2 	bl	8000914 <SD_RxDataBlock>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 809c 	beq.w	80010b0 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000f78:	7b3b      	ldrb	r3, [r7, #12]
 8000f7a:	099b      	lsrs	r3, r3, #6
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d10d      	bne.n	8000f9e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000f82:	7d7b      	ldrb	r3, [r7, #21]
 8000f84:	461a      	mov	r2, r3
 8000f86:	7d3b      	ldrb	r3, [r7, #20]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	3301      	adds	r3, #1
 8000f92:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000f94:	8bfb      	ldrh	r3, [r7, #30]
 8000f96:	029a      	lsls	r2, r3, #10
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e02d      	b.n	8000ffa <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000f9e:	7c7b      	ldrb	r3, [r7, #17]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	7dbb      	ldrb	r3, [r7, #22]
 8000fa8:	09db      	lsrs	r3, r3, #7
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	7d7b      	ldrb	r3, [r7, #21]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f003 0306 	and.w	r3, r3, #6
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000fc6:	7d3b      	ldrb	r3, [r7, #20]
 8000fc8:	099b      	lsrs	r3, r3, #6
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	7cbb      	ldrb	r3, [r7, #18]
 8000fda:	029b      	lsls	r3, r3, #10
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000fec:	8bfa      	ldrh	r2, [r7, #30]
 8000fee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ff2:	3b09      	subs	r3, #9
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001000:	e056      	b.n	80010b0 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001008:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001010:	e055      	b.n	80010be <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001012:	f7ff fc0b 	bl	800082c <SD_ReadyWait>
 8001016:	4603      	mov	r3, r0
 8001018:	2bff      	cmp	r3, #255	@ 0xff
 800101a:	d14b      	bne.n	80010b4 <SD_disk_ioctl+0x230>
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001022:	e047      	b.n	80010b4 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001024:	2100      	movs	r1, #0
 8001026:	2049      	movs	r0, #73	@ 0x49
 8001028:	f7ff fce7 	bl	80009fa <SD_SendCmd>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d142      	bne.n	80010b8 <SD_disk_ioctl+0x234>
 8001032:	2110      	movs	r1, #16
 8001034:	6a38      	ldr	r0, [r7, #32]
 8001036:	f7ff fc6d 	bl	8000914 <SD_RxDataBlock>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d03b      	beq.n	80010b8 <SD_disk_ioctl+0x234>
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001046:	e037      	b.n	80010b8 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001048:	2100      	movs	r1, #0
 800104a:	204a      	movs	r0, #74	@ 0x4a
 800104c:	f7ff fcd5 	bl	80009fa <SD_SendCmd>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d132      	bne.n	80010bc <SD_disk_ioctl+0x238>
 8001056:	2110      	movs	r1, #16
 8001058:	6a38      	ldr	r0, [r7, #32]
 800105a:	f7ff fc5b 	bl	8000914 <SD_RxDataBlock>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d02b      	beq.n	80010bc <SD_disk_ioctl+0x238>
 8001064:	2300      	movs	r3, #0
 8001066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800106a:	e027      	b.n	80010bc <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800106c:	2100      	movs	r1, #0
 800106e:	207a      	movs	r0, #122	@ 0x7a
 8001070:	f7ff fcc3 	bl	80009fa <SD_SendCmd>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d116      	bne.n	80010a8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800107a:	2300      	movs	r3, #0
 800107c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001080:	e00b      	b.n	800109a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001082:	6a3c      	ldr	r4, [r7, #32]
 8001084:	1c63      	adds	r3, r4, #1
 8001086:	623b      	str	r3, [r7, #32]
 8001088:	f7ff fba6 	bl	80007d8 <SPI_RxByte>
 800108c:	4603      	mov	r3, r0
 800108e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001090:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001094:	3301      	adds	r3, #1
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800109a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d9ef      	bls.n	8001082 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80010a8:	2304      	movs	r3, #4
 80010aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010ae:	e006      	b.n	80010be <SD_disk_ioctl+0x23a>
			break;
 80010b0:	bf00      	nop
 80010b2:	e004      	b.n	80010be <SD_disk_ioctl+0x23a>
			break;
 80010b4:	bf00      	nop
 80010b6:	e002      	b.n	80010be <SD_disk_ioctl+0x23a>
			break;
 80010b8:	bf00      	nop
 80010ba:	e000      	b.n	80010be <SD_disk_ioctl+0x23a>
			break;
 80010bc:	bf00      	nop
		}

		DESELECT();
 80010be:	f7ff fb49 	bl	8000754 <DESELECT>
		SPI_RxByte();
 80010c2:	f7ff fb89 	bl	80007d8 <SPI_RxByte>
	}

	return res;
 80010c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	372c      	adds	r7, #44	@ 0x2c
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000

080010d8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f023 030f 	bic.w	r3, r3, #15
 80010e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	f043 030c 	orr.w	r3, r3, #12
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	b2db      	uxtb	r3, r3
 8001102:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	f043 030c 	orr.w	r3, r3, #12
 800110a:	b2db      	uxtb	r3, r3
 800110c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	b2db      	uxtb	r3, r3
 8001116:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001118:	f107 0208 	add.w	r2, r7, #8
 800111c:	2364      	movs	r3, #100	@ 0x64
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2304      	movs	r3, #4
 8001122:	214e      	movs	r1, #78	@ 0x4e
 8001124:	4803      	ldr	r0, [pc, #12]	@ (8001134 <lcd_send_cmd+0x5c>)
 8001126:	f001 fecb 	bl	8002ec0 <HAL_I2C_Master_Transmit>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20002274 	.word	0x20002274

08001138 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f023 030f 	bic.w	r3, r3, #15
 8001148:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f043 030d 	orr.w	r3, r3, #13
 8001156:	b2db      	uxtb	r3, r3
 8001158:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	f043 0309 	orr.w	r3, r3, #9
 8001160:	b2db      	uxtb	r3, r3
 8001162:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	f043 030d 	orr.w	r3, r3, #13
 800116a:	b2db      	uxtb	r3, r3
 800116c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	f043 0309 	orr.w	r3, r3, #9
 8001174:	b2db      	uxtb	r3, r3
 8001176:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	2364      	movs	r3, #100	@ 0x64
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2304      	movs	r3, #4
 8001182:	214e      	movs	r1, #78	@ 0x4e
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <lcd_send_data+0x5c>)
 8001186:	f001 fe9b 	bl	8002ec0 <HAL_I2C_Master_Transmit>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20002274 	.word	0x20002274

08001198 <lcd_clear>:

void lcd_clear (void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800119e:	2080      	movs	r0, #128	@ 0x80
 80011a0:	f7ff ff9a 	bl	80010d8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	e005      	b.n	80011b6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80011aa:	2020      	movs	r0, #32
 80011ac:	f7ff ffc4 	bl	8001138 <lcd_send_data>
	for (int i=0; i<70; i++)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3301      	adds	r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b45      	cmp	r3, #69	@ 0x45
 80011ba:	ddf6      	ble.n	80011aa <lcd_clear+0x12>
	}
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
    switch (row)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <lcd_put_cur+0x18>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d005      	beq.n	80011e8 <lcd_put_cur+0x22>
 80011dc:	e009      	b.n	80011f2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e4:	603b      	str	r3, [r7, #0]
            break;
 80011e6:	e004      	b.n	80011f2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80011ee:	603b      	str	r3, [r7, #0]
            break;
 80011f0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff6e 	bl	80010d8 <lcd_send_cmd>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <lcd_init>:


void lcd_init (void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001208:	2032      	movs	r0, #50	@ 0x32
 800120a:	f001 f97d 	bl	8002508 <HAL_Delay>
	lcd_send_cmd (0x30);
 800120e:	2030      	movs	r0, #48	@ 0x30
 8001210:	f7ff ff62 	bl	80010d8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001214:	2005      	movs	r0, #5
 8001216:	f001 f977 	bl	8002508 <HAL_Delay>
	lcd_send_cmd (0x30);
 800121a:	2030      	movs	r0, #48	@ 0x30
 800121c:	f7ff ff5c 	bl	80010d8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001220:	2001      	movs	r0, #1
 8001222:	f001 f971 	bl	8002508 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001226:	2030      	movs	r0, #48	@ 0x30
 8001228:	f7ff ff56 	bl	80010d8 <lcd_send_cmd>
	HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f001 f96b 	bl	8002508 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001232:	2020      	movs	r0, #32
 8001234:	f7ff ff50 	bl	80010d8 <lcd_send_cmd>
	HAL_Delay(10);
 8001238:	200a      	movs	r0, #10
 800123a:	f001 f965 	bl	8002508 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800123e:	2028      	movs	r0, #40	@ 0x28
 8001240:	f7ff ff4a 	bl	80010d8 <lcd_send_cmd>
	HAL_Delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f001 f95f 	bl	8002508 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800124a:	2008      	movs	r0, #8
 800124c:	f7ff ff44 	bl	80010d8 <lcd_send_cmd>
	HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f001 f959 	bl	8002508 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff ff3e 	bl	80010d8 <lcd_send_cmd>
	HAL_Delay(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f001 f953 	bl	8002508 <HAL_Delay>
	HAL_Delay(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f001 f950 	bl	8002508 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001268:	2006      	movs	r0, #6
 800126a:	f7ff ff35 	bl	80010d8 <lcd_send_cmd>
	HAL_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f001 f94a 	bl	8002508 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001274:	200c      	movs	r0, #12
 8001276:	f7ff ff2f 	bl	80010d8 <lcd_send_cmd>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}

0800127e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001286:	e006      	b.n	8001296 <lcd_send_string+0x18>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff51 	bl	8001138 <lcd_send_data>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f4      	bne.n	8001288 <lcd_send_string+0xa>
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <EditDate>:
char etime[30];
char edate[30];
extern IWDG_HandleTypeDef hiwdg;

void EditDate()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
    uint8_t editing = 1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
    uint8_t curser_pos = 0; // Track current editing field
 80012b2:	2300      	movs	r3, #0
 80012b4:	73bb      	strb	r3, [r7, #14]
    lcd_clear();
 80012b6:	f7ff ff6f 	bl	8001198 <lcd_clear>

    // Define cursor positions (two-digit fields)
    const uint8_t cursor_pos[][2] = {
 80012ba:	4aa6      	ldr	r2, [pc, #664]	@ (8001554 <EditDate+0x2ac>)
 80012bc:	463b      	mov	r3, r7
 80012be:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        {0x40, 0x41},  // Day (DD)
        {0x43, 0x44},  // Month (MM)
        {0x46, 0x47}   // Year (YY)
    };

    while (editing)
 80012c4:	e1a2      	b.n	800160c <EditDate+0x364>
    {
        setDateTimeDisplay(); // Update LCD
 80012c6:	f000 f9c7 	bl	8001658 <setDateTimeDisplay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80012ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ce:	48a2      	ldr	r0, [pc, #648]	@ (8001558 <EditDate+0x2b0>)
 80012d0:	f001 fc97 	bl	8002c02 <HAL_GPIO_TogglePin>


        // Move cursor to first digit of the selected field
        lcd_send_cmd(0x80 | cursor_pos[curser_pos][0]);
 80012d4:	7bbb      	ldrb	r3, [r7, #14]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	3310      	adds	r3, #16
 80012da:	443b      	add	r3, r7
 80012dc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fef6 	bl	80010d8 <lcd_send_cmd>

        // Cursor Blink Logic (500ms Interval)
        static uint32_t lastToggle = 0;
           if (HAL_GetTick() - lastToggle > 500)
 80012ec:	f001 f900 	bl	80024f0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b9a      	ldr	r3, [pc, #616]	@ (800155c <EditDate+0x2b4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012fc:	d90d      	bls.n	800131a <EditDate+0x72>
           {
               lcd_send_cmd(0x0E);  // Cursor ON, Blink OFF
 80012fe:	200e      	movs	r0, #14
 8001300:	f7ff feea 	bl	80010d8 <lcd_send_cmd>
               HAL_Delay(250);
 8001304:	20fa      	movs	r0, #250	@ 0xfa
 8001306:	f001 f8ff 	bl	8002508 <HAL_Delay>
               lcd_send_cmd(0x0F);  // Cursor ON, Blink ON
 800130a:	200f      	movs	r0, #15
 800130c:	f7ff fee4 	bl	80010d8 <lcd_send_cmd>
               lastToggle = HAL_GetTick();
 8001310:	f001 f8ee 	bl	80024f0 <HAL_GetTick>
 8001314:	4603      	mov	r3, r0
 8001316:	4a91      	ldr	r2, [pc, #580]	@ (800155c <EditDate+0x2b4>)
 8001318:	6013      	str	r3, [r2, #0]
           }
        // Navigation between fields
        if (ReadButton(BTN_PORT, BTN_LEFT)) curser_pos = (curser_pos + 5) % 6;
 800131a:	2104      	movs	r1, #4
 800131c:	4890      	ldr	r0, [pc, #576]	@ (8001560 <EditDate+0x2b8>)
 800131e:	f000 f9e1 	bl	80016e4 <ReadButton>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00d      	beq.n	8001344 <EditDate+0x9c>
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	1d5a      	adds	r2, r3, #5
 800132c:	4b8d      	ldr	r3, [pc, #564]	@ (8001564 <EditDate+0x2bc>)
 800132e:	fb83 3102 	smull	r3, r1, r3, r2
 8001332:	17d3      	asrs	r3, r2, #31
 8001334:	1ac9      	subs	r1, r1, r3
 8001336:	460b      	mov	r3, r1
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	440b      	add	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	1ad1      	subs	r1, r2, r3
 8001340:	460b      	mov	r3, r1
 8001342:	73bb      	strb	r3, [r7, #14]
        if (ReadButton(BTN_PORT, BTN_RIGHT)) curser_pos = (curser_pos + 1) % 6;
 8001344:	2102      	movs	r1, #2
 8001346:	4886      	ldr	r0, [pc, #536]	@ (8001560 <EditDate+0x2b8>)
 8001348:	f000 f9cc 	bl	80016e4 <ReadButton>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00d      	beq.n	800136e <EditDate+0xc6>
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	4b83      	ldr	r3, [pc, #524]	@ (8001564 <EditDate+0x2bc>)
 8001358:	fb83 3102 	smull	r3, r1, r3, r2
 800135c:	17d3      	asrs	r3, r2, #31
 800135e:	1ac9      	subs	r1, r1, r3
 8001360:	460b      	mov	r3, r1
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	440b      	add	r3, r1
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	1ad1      	subs	r1, r2, r3
 800136a:	460b      	mov	r3, r1
 800136c:	73bb      	strb	r3, [r7, #14]

        // Increase Selected Field
        if (ReadButton(BTN_PORT, BTN_UP))
 800136e:	2110      	movs	r1, #16
 8001370:	487b      	ldr	r0, [pc, #492]	@ (8001560 <EditDate+0x2b8>)
 8001372:	f000 f9b7 	bl	80016e4 <ReadButton>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d078      	beq.n	800146e <EditDate+0x1c6>
        {
            if (curser_pos == 0) sTime.Hours = (sTime.Hours + 1) % 24;
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d110      	bne.n	80013a4 <EditDate+0xfc>
 8001382:	4b79      	ldr	r3, [pc, #484]	@ (8001568 <EditDate+0x2c0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	4b76      	ldr	r3, [pc, #472]	@ (8001564 <EditDate+0x2bc>)
 800138a:	fb83 1302 	smull	r1, r3, r3, r2
 800138e:	1099      	asrs	r1, r3, #2
 8001390:	17d3      	asrs	r3, r2, #31
 8001392:	1ac9      	subs	r1, r1, r3
 8001394:	460b      	mov	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	440b      	add	r3, r1
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	1ad1      	subs	r1, r2, r3
 800139e:	b2ca      	uxtb	r2, r1
 80013a0:	4b71      	ldr	r3, [pc, #452]	@ (8001568 <EditDate+0x2c0>)
 80013a2:	701a      	strb	r2, [r3, #0]
            if (curser_pos == 1) sTime.Minutes = (sTime.Minutes + 1) % 60;
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d111      	bne.n	80013ce <EditDate+0x126>
 80013aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001568 <EditDate+0x2c0>)
 80013ac:	785b      	ldrb	r3, [r3, #1]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	4b6e      	ldr	r3, [pc, #440]	@ (800156c <EditDate+0x2c4>)
 80013b2:	fb83 1302 	smull	r1, r3, r3, r2
 80013b6:	4413      	add	r3, r2
 80013b8:	1159      	asrs	r1, r3, #5
 80013ba:	17d3      	asrs	r3, r2, #31
 80013bc:	1ac9      	subs	r1, r1, r3
 80013be:	460b      	mov	r3, r1
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	1a5b      	subs	r3, r3, r1
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	1ad1      	subs	r1, r2, r3
 80013c8:	b2ca      	uxtb	r2, r1
 80013ca:	4b67      	ldr	r3, [pc, #412]	@ (8001568 <EditDate+0x2c0>)
 80013cc:	705a      	strb	r2, [r3, #1]
            if (curser_pos == 2) sTime.Seconds = (sTime.Seconds + 1) % 60;
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d111      	bne.n	80013f8 <EditDate+0x150>
 80013d4:	4b64      	ldr	r3, [pc, #400]	@ (8001568 <EditDate+0x2c0>)
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	4b64      	ldr	r3, [pc, #400]	@ (800156c <EditDate+0x2c4>)
 80013dc:	fb83 1302 	smull	r1, r3, r3, r2
 80013e0:	4413      	add	r3, r2
 80013e2:	1159      	asrs	r1, r3, #5
 80013e4:	17d3      	asrs	r3, r2, #31
 80013e6:	1ac9      	subs	r1, r1, r3
 80013e8:	460b      	mov	r3, r1
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	1a5b      	subs	r3, r3, r1
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	1ad1      	subs	r1, r2, r3
 80013f2:	b2ca      	uxtb	r2, r1
 80013f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001568 <EditDate+0x2c0>)
 80013f6:	709a      	strb	r2, [r3, #2]
            if (curser_pos == 3) sDate.Date = (sDate.Date % 31) + 1;
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d111      	bne.n	8001422 <EditDate+0x17a>
 80013fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001570 <EditDate+0x2c8>)
 8001400:	789a      	ldrb	r2, [r3, #2]
 8001402:	4b5c      	ldr	r3, [pc, #368]	@ (8001574 <EditDate+0x2cc>)
 8001404:	fba3 1302 	umull	r1, r3, r3, r2
 8001408:	1ad1      	subs	r1, r2, r3
 800140a:	0849      	lsrs	r1, r1, #1
 800140c:	440b      	add	r3, r1
 800140e:	0919      	lsrs	r1, r3, #4
 8001410:	460b      	mov	r3, r1
 8001412:	015b      	lsls	r3, r3, #5
 8001414:	1a5b      	subs	r3, r3, r1
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	3301      	adds	r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b54      	ldr	r3, [pc, #336]	@ (8001570 <EditDate+0x2c8>)
 8001420:	709a      	strb	r2, [r3, #2]
            if (curser_pos == 4) sDate.Month = (sDate.Month % 12) + 1;
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	2b04      	cmp	r3, #4
 8001426:	d10f      	bne.n	8001448 <EditDate+0x1a0>
 8001428:	4b51      	ldr	r3, [pc, #324]	@ (8001570 <EditDate+0x2c8>)
 800142a:	785a      	ldrb	r2, [r3, #1]
 800142c:	4b52      	ldr	r3, [pc, #328]	@ (8001578 <EditDate+0x2d0>)
 800142e:	fba3 1302 	umull	r1, r3, r3, r2
 8001432:	08d9      	lsrs	r1, r3, #3
 8001434:	460b      	mov	r3, r1
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b4a      	ldr	r3, [pc, #296]	@ (8001570 <EditDate+0x2c8>)
 8001446:	705a      	strb	r2, [r3, #1]
            if (curser_pos == 5) sDate.Year = (sDate.Year + 1) % 100;
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d10f      	bne.n	800146e <EditDate+0x1c6>
 800144e:	4b48      	ldr	r3, [pc, #288]	@ (8001570 <EditDate+0x2c8>)
 8001450:	78db      	ldrb	r3, [r3, #3]
 8001452:	3301      	adds	r3, #1
 8001454:	4a49      	ldr	r2, [pc, #292]	@ (800157c <EditDate+0x2d4>)
 8001456:	fb82 1203 	smull	r1, r2, r2, r3
 800145a:	1151      	asrs	r1, r2, #5
 800145c:	17da      	asrs	r2, r3, #31
 800145e:	1a8a      	subs	r2, r1, r2
 8001460:	2164      	movs	r1, #100	@ 0x64
 8001462:	fb01 f202 	mul.w	r2, r1, r2
 8001466:	1a9a      	subs	r2, r3, r2
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	4b41      	ldr	r3, [pc, #260]	@ (8001570 <EditDate+0x2c8>)
 800146c:	70da      	strb	r2, [r3, #3]
        }

        // Decrease Selected Field with Proper Wrap-around
        if (ReadButton(BTN_PORT, BTN_DOWN))
 800146e:	2108      	movs	r1, #8
 8001470:	483b      	ldr	r0, [pc, #236]	@ (8001560 <EditDate+0x2b8>)
 8001472:	f000 f937 	bl	80016e4 <ReadButton>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 8084 	beq.w	8001586 <EditDate+0x2de>
        {
            if (curser_pos == 0) sTime.Hours = (sTime.Hours + 23) % 24;
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d111      	bne.n	80014a8 <EditDate+0x200>
 8001484:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <EditDate+0x2c0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f103 0217 	add.w	r2, r3, #23
 800148c:	4b35      	ldr	r3, [pc, #212]	@ (8001564 <EditDate+0x2bc>)
 800148e:	fb83 1302 	smull	r1, r3, r3, r2
 8001492:	1099      	asrs	r1, r3, #2
 8001494:	17d3      	asrs	r3, r2, #31
 8001496:	1ac9      	subs	r1, r1, r3
 8001498:	460b      	mov	r3, r1
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	440b      	add	r3, r1
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	1ad1      	subs	r1, r2, r3
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	4b30      	ldr	r3, [pc, #192]	@ (8001568 <EditDate+0x2c0>)
 80014a6:	701a      	strb	r2, [r3, #0]
            if (curser_pos == 1) sTime.Minutes = (sTime.Minutes + 59) % 60;
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d112      	bne.n	80014d4 <EditDate+0x22c>
 80014ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001568 <EditDate+0x2c0>)
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	f103 023b 	add.w	r2, r3, #59	@ 0x3b
 80014b6:	4b2d      	ldr	r3, [pc, #180]	@ (800156c <EditDate+0x2c4>)
 80014b8:	fb83 1302 	smull	r1, r3, r3, r2
 80014bc:	4413      	add	r3, r2
 80014be:	1159      	asrs	r1, r3, #5
 80014c0:	17d3      	asrs	r3, r2, #31
 80014c2:	1ac9      	subs	r1, r1, r3
 80014c4:	460b      	mov	r3, r1
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	1a5b      	subs	r3, r3, r1
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	1ad1      	subs	r1, r2, r3
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	4b25      	ldr	r3, [pc, #148]	@ (8001568 <EditDate+0x2c0>)
 80014d2:	705a      	strb	r2, [r3, #1]
            if (curser_pos == 2) sTime.Seconds = (sTime.Seconds + 59) % 60;
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d112      	bne.n	8001500 <EditDate+0x258>
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <EditDate+0x2c0>)
 80014dc:	789b      	ldrb	r3, [r3, #2]
 80014de:	f103 023b 	add.w	r2, r3, #59	@ 0x3b
 80014e2:	4b22      	ldr	r3, [pc, #136]	@ (800156c <EditDate+0x2c4>)
 80014e4:	fb83 1302 	smull	r1, r3, r3, r2
 80014e8:	4413      	add	r3, r2
 80014ea:	1159      	asrs	r1, r3, #5
 80014ec:	17d3      	asrs	r3, r2, #31
 80014ee:	1ac9      	subs	r1, r1, r3
 80014f0:	460b      	mov	r3, r1
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	1a5b      	subs	r3, r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	1ad1      	subs	r1, r2, r3
 80014fa:	b2ca      	uxtb	r2, r1
 80014fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <EditDate+0x2c0>)
 80014fe:	709a      	strb	r2, [r3, #2]
            if (curser_pos == 3) sDate.Date = (sDate.Date == 1) ? 31 : sDate.Date - 1;
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d10b      	bne.n	800151e <EditDate+0x276>
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <EditDate+0x2c8>)
 8001508:	789b      	ldrb	r3, [r3, #2]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d004      	beq.n	8001518 <EditDate+0x270>
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <EditDate+0x2c8>)
 8001510:	789b      	ldrb	r3, [r3, #2]
 8001512:	3b01      	subs	r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	e000      	b.n	800151a <EditDate+0x272>
 8001518:	231f      	movs	r3, #31
 800151a:	4a15      	ldr	r2, [pc, #84]	@ (8001570 <EditDate+0x2c8>)
 800151c:	7093      	strb	r3, [r2, #2]
            if (curser_pos == 4) sDate.Month = (sDate.Month == 1) ? 12 : sDate.Month - 1;
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d10b      	bne.n	800153c <EditDate+0x294>
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <EditDate+0x2c8>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d004      	beq.n	8001536 <EditDate+0x28e>
 800152c:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <EditDate+0x2c8>)
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	3b01      	subs	r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	e000      	b.n	8001538 <EditDate+0x290>
 8001536:	230c      	movs	r3, #12
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <EditDate+0x2c8>)
 800153a:	7053      	strb	r3, [r2, #1]
            if (curser_pos == 5) sDate.Year = (sDate.Year == 0) ? 99 : sDate.Year - 1;
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d121      	bne.n	8001586 <EditDate+0x2de>
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <EditDate+0x2c8>)
 8001544:	78db      	ldrb	r3, [r3, #3]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d01a      	beq.n	8001580 <EditDate+0x2d8>
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <EditDate+0x2c8>)
 800154c:	78db      	ldrb	r3, [r3, #3]
 800154e:	3b01      	subs	r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	e016      	b.n	8001582 <EditDate+0x2da>
 8001554:	08009d98 	.word	0x08009d98
 8001558:	40020400 	.word	0x40020400
 800155c:	200001bc 	.word	0x200001bc
 8001560:	40020000 	.word	0x40020000
 8001564:	2aaaaaab 	.word	0x2aaaaaab
 8001568:	200001a4 	.word	0x200001a4
 800156c:	88888889 	.word	0x88888889
 8001570:	200001b8 	.word	0x200001b8
 8001574:	08421085 	.word	0x08421085
 8001578:	aaaaaaab 	.word	0xaaaaaaab
 800157c:	51eb851f 	.word	0x51eb851f
 8001580:	2363      	movs	r3, #99	@ 0x63
 8001582:	4a30      	ldr	r2, [pc, #192]	@ (8001644 <EditDate+0x39c>)
 8001584:	70d3      	strb	r3, [r2, #3]
        }
        // Exit if BOTH LEFT and RIGHT buttons are pressed
        if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_LEFT) == GPIO_PIN_SET) &&
 8001586:	2104      	movs	r1, #4
 8001588:	482f      	ldr	r0, [pc, #188]	@ (8001648 <EditDate+0x3a0>)
 800158a:	f001 fb09 	bl	8002ba0 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b01      	cmp	r3, #1
 8001592:	d117      	bne.n	80015c4 <EditDate+0x31c>
            (HAL_GPIO_ReadPin(BTN_PORT, BTN_RIGHT) == GPIO_PIN_SET))
 8001594:	2102      	movs	r1, #2
 8001596:	482c      	ldr	r0, [pc, #176]	@ (8001648 <EditDate+0x3a0>)
 8001598:	f001 fb02 	bl	8002ba0 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
        if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_LEFT) == GPIO_PIN_SET) &&
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d110      	bne.n	80015c4 <EditDate+0x31c>
        {
            HAL_Delay(50); // Debounce
 80015a2:	2032      	movs	r0, #50	@ 0x32
 80015a4:	f000 ffb0 	bl	8002508 <HAL_Delay>
            if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_LEFT) == GPIO_PIN_SET) &&
 80015a8:	2104      	movs	r1, #4
 80015aa:	4827      	ldr	r0, [pc, #156]	@ (8001648 <EditDate+0x3a0>)
 80015ac:	f001 faf8 	bl	8002ba0 <HAL_GPIO_ReadPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d106      	bne.n	80015c4 <EditDate+0x31c>
                (HAL_GPIO_ReadPin(BTN_PORT, BTN_RIGHT) == GPIO_PIN_SET))
 80015b6:	2102      	movs	r1, #2
 80015b8:	4823      	ldr	r0, [pc, #140]	@ (8001648 <EditDate+0x3a0>)
 80015ba:	f001 faf1 	bl	8002ba0 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
            if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_LEFT) == GPIO_PIN_SET) &&
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d028      	beq.n	8001616 <EditDate+0x36e>
                break; // Exit loop
            }
        }

        // Check if ENTER is pressed and RIGHT is NOT pressed
		   if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_ENTER) == GPIO_PIN_SET) &&
 80015c4:	2101      	movs	r1, #1
 80015c6:	4820      	ldr	r0, [pc, #128]	@ (8001648 <EditDate+0x3a0>)
 80015c8:	f001 faea 	bl	8002ba0 <HAL_GPIO_ReadPin>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d119      	bne.n	8001606 <EditDate+0x35e>
			   (HAL_GPIO_ReadPin(BTN_PORT, BTN_RIGHT) == GPIO_PIN_RESET))
 80015d2:	2102      	movs	r1, #2
 80015d4:	481c      	ldr	r0, [pc, #112]	@ (8001648 <EditDate+0x3a0>)
 80015d6:	f001 fae3 	bl	8002ba0 <HAL_GPIO_ReadPin>
 80015da:	4603      	mov	r3, r0
		   if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_ENTER) == GPIO_PIN_SET) &&
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d112      	bne.n	8001606 <EditDate+0x35e>
		   {
			   HAL_Delay(50); // Debounce
 80015e0:	2032      	movs	r0, #50	@ 0x32
 80015e2:	f000 ff91 	bl	8002508 <HAL_Delay>
			   if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_ENTER) == GPIO_PIN_SET) &&
 80015e6:	2101      	movs	r1, #1
 80015e8:	4817      	ldr	r0, [pc, #92]	@ (8001648 <EditDate+0x3a0>)
 80015ea:	f001 fad9 	bl	8002ba0 <HAL_GPIO_ReadPin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d108      	bne.n	8001606 <EditDate+0x35e>
				   (HAL_GPIO_ReadPin(BTN_PORT, BTN_RIGHT) == GPIO_PIN_RESET))
 80015f4:	2102      	movs	r1, #2
 80015f6:	4814      	ldr	r0, [pc, #80]	@ (8001648 <EditDate+0x3a0>)
 80015f8:	f001 fad2 	bl	8002ba0 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
			   if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_ENTER) == GPIO_PIN_SET) &&
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <EditDate+0x35e>
			   {
				   editing = 0; // Exit loop
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
			   }
		   }
		   HAL_IWDG_Refresh(&hiwdg);
 8001606:	4811      	ldr	r0, [pc, #68]	@ (800164c <EditDate+0x3a4>)
 8001608:	f001 ffb3 	bl	8003572 <HAL_IWDG_Refresh>
    while (editing)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f ae59 	bne.w	80012c6 <EditDate+0x1e>
 8001614:	e000      	b.n	8001618 <EditDate+0x370>
                break; // Exit loop
 8001616:	bf00      	nop
    }
    lcd_send_cmd(0x0C);  // Turn off cursor when exiting edit mode
 8001618:	200c      	movs	r0, #12
 800161a:	f7ff fd5d 	bl	80010d8 <lcd_send_cmd>
    lcd_clear();
 800161e:	f7ff fdbb 	bl	8001198 <lcd_clear>
    HAL_Delay(200); // Ensure stable exit
 8001622:	20c8      	movs	r0, #200	@ 0xc8
 8001624:	f000 ff70 	bl	8002508 <HAL_Delay>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001628:	2200      	movs	r2, #0
 800162a:	4906      	ldr	r1, [pc, #24]	@ (8001644 <EditDate+0x39c>)
 800162c:	4808      	ldr	r0, [pc, #32]	@ (8001650 <EditDate+0x3a8>)
 800162e:	f002 fef0 	bl	8004412 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001632:	2200      	movs	r2, #0
 8001634:	4907      	ldr	r1, [pc, #28]	@ (8001654 <EditDate+0x3ac>)
 8001636:	4806      	ldr	r0, [pc, #24]	@ (8001650 <EditDate+0x3a8>)
 8001638:	f002 fdf3 	bl	8004222 <HAL_RTC_SetTime>
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200001b8 	.word	0x200001b8
 8001648:	40020000 	.word	0x40020000
 800164c:	200022c8 	.word	0x200022c8
 8001650:	2000222c 	.word	0x2000222c
 8001654:	200001a4 	.word	0x200001a4

08001658 <setDateTimeDisplay>:

void setDateTimeDisplay(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af02      	add	r7, sp, #8
	char buffer[16];
	memset(buffer,0,sizeof(buffer));
 800165e:	463b      	mov	r3, r7
 8001660:	2210      	movs	r2, #16
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f007 ff0b 	bl	8009480 <memset>
	sprintf(buffer,"%02d/%02d/%02d = Date",sDate.Date,sDate.Month,sDate.Year);
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <setDateTimeDisplay+0x7c>)
 800166c:	789b      	ldrb	r3, [r3, #2]
 800166e:	461a      	mov	r2, r3
 8001670:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <setDateTimeDisplay+0x7c>)
 8001672:	785b      	ldrb	r3, [r3, #1]
 8001674:	4619      	mov	r1, r3
 8001676:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <setDateTimeDisplay+0x7c>)
 8001678:	78db      	ldrb	r3, [r3, #3]
 800167a:	4638      	mov	r0, r7
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	460b      	mov	r3, r1
 8001680:	4915      	ldr	r1, [pc, #84]	@ (80016d8 <setDateTimeDisplay+0x80>)
 8001682:	f007 fedd 	bl	8009440 <siprintf>
	lcd_send_cmd(0xC0);
 8001686:	20c0      	movs	r0, #192	@ 0xc0
 8001688:	f7ff fd26 	bl	80010d8 <lcd_send_cmd>
	lcd_send_string(buffer);
 800168c:	463b      	mov	r3, r7
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fdf5 	bl	800127e <lcd_send_string>
	memset(buffer,0,sizeof(buffer));
 8001694:	463b      	mov	r3, r7
 8001696:	2210      	movs	r2, #16
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f007 fef0 	bl	8009480 <memset>
	sprintf(buffer,"%02d:%02d:%02d = Time",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <setDateTimeDisplay+0x84>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <setDateTimeDisplay+0x84>)
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <setDateTimeDisplay+0x84>)
 80016ae:	789b      	ldrb	r3, [r3, #2]
 80016b0:	4638      	mov	r0, r7
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	460b      	mov	r3, r1
 80016b6:	490a      	ldr	r1, [pc, #40]	@ (80016e0 <setDateTimeDisplay+0x88>)
 80016b8:	f007 fec2 	bl	8009440 <siprintf>
	lcd_send_cmd(0x80);
 80016bc:	2080      	movs	r0, #128	@ 0x80
 80016be:	f7ff fd0b 	bl	80010d8 <lcd_send_cmd>
	lcd_send_string(buffer);
 80016c2:	463b      	mov	r3, r7
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fdda 	bl	800127e <lcd_send_string>
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001b8 	.word	0x200001b8
 80016d8:	08009da4 	.word	0x08009da4
 80016dc:	200001a4 	.word	0x200001a4
 80016e0:	08009dbc 	.word	0x08009dbc

080016e4 <ReadButton>:

uint8_t ReadButton(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80016f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016f4:	4812      	ldr	r0, [pc, #72]	@ (8001740 <ReadButton+0x5c>)
 80016f6:	f001 fa84 	bl	8002c02 <HAL_GPIO_TogglePin>
    if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)  // Button pressed
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	4619      	mov	r1, r3
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f001 fa4e 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d115      	bne.n	8001736 <ReadButton+0x52>
    {
        HAL_Delay(75);  // Debounce delay
 800170a:	204b      	movs	r0, #75	@ 0x4b
 800170c:	f000 fefc 	bl	8002508 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)  // Confirm still pressed
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	4619      	mov	r1, r3
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f001 fa43 	bl	8002ba0 <HAL_GPIO_ReadPin>
 800171a:	4603      	mov	r3, r0
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10a      	bne.n	8001736 <ReadButton+0x52>
        {
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET);  // Wait for release
 8001720:	bf00      	nop
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f001 fa3a 	bl	8002ba0 <HAL_GPIO_ReadPin>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f7      	beq.n	8001722 <ReadButton+0x3e>
            return 1;  // Button press confirmed
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <ReadButton+0x54>
        }
    }
    return 0;  // No press detected
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40020400 	.word	0x40020400

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001748:	f000 fe6c 	bl	8002424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174c:	f000 f822 	bl	8001794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001750:	f000 f924 	bl	800199c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001754:	f000 f8c2 	bl	80018dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001758:	f000 f8f6 	bl	8001948 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800175c:	f004 fbe2 	bl	8005f24 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001760:	f000 f88e 	bl	8001880 <MX_I2C1_Init>
  MX_RTC_Init();
 8001764:	f000 fa74 	bl	8001c50 <MX_RTC_Init>
 // MX_IWDG_Init();
  /* USER CODE BEGIN 2 */

    MainInit();
 8001768:	f7fe ff66 	bl	8000638 <MainInit>
    create_new_file();
 800176c:	f000 fb28 	bl	8001dc0 <create_new_file>
    HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001770:	2201      	movs	r2, #1
 8001772:	4905      	ldr	r1, [pc, #20]	@ (8001788 <main+0x44>)
 8001774:	4805      	ldr	r0, [pc, #20]	@ (800178c <main+0x48>)
 8001776:	f003 fcb1 	bl	80050dc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HandleButtonPress();
 800177a:	f7fe ffa1 	bl	80006c0 <HandleButtonPress>
	  HAL_IWDG_Refresh(&hiwdg);
 800177e:	4804      	ldr	r0, [pc, #16]	@ (8001790 <main+0x4c>)
 8001780:	f001 fef7 	bl	8003572 <HAL_IWDG_Refresh>
	  HandleButtonPress();
 8001784:	bf00      	nop
 8001786:	e7f8      	b.n	800177a <main+0x36>
 8001788:	20000198 	.word	0x20000198
 800178c:	2000232c 	.word	0x2000232c
 8001790:	200022c8 	.word	0x200022c8

08001794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b094      	sub	sp, #80	@ 0x50
 8001798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	2230      	movs	r2, #48	@ 0x30
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f007 fe6c 	bl	8009480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <SystemClock_Config+0xe4>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001878 <SystemClock_Config+0xe4>)
 80017c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <SystemClock_Config+0xe4>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	4b28      	ldr	r3, [pc, #160]	@ (800187c <SystemClock_Config+0xe8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a27      	ldr	r2, [pc, #156]	@ (800187c <SystemClock_Config+0xe8>)
 80017de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b25      	ldr	r3, [pc, #148]	@ (800187c <SystemClock_Config+0xe8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80017f0:	230f      	movs	r3, #15
 80017f2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017fa:	2301      	movs	r3, #1
 80017fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fe:	2301      	movs	r3, #1
 8001800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001802:	2310      	movs	r3, #16
 8001804:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001806:	2301      	movs	r3, #1
 8001808:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180a:	2302      	movs	r3, #2
 800180c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800180e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001814:	230c      	movs	r3, #12
 8001816:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001818:	2360      	movs	r3, #96	@ 0x60
 800181a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181c:	2302      	movs	r3, #2
 800181e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001820:	2304      	movs	r3, #4
 8001822:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fec7 	bl	80035bc <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001834:	f000 f95e 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001838:	230f      	movs	r3, #15
 800183a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2103      	movs	r1, #3
 8001854:	4618      	mov	r0, r3
 8001856:	f002 f929 	bl	8003aac <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001860:	f000 f948 	bl	8001af4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	2000      	movs	r0, #0
 800186a:	f002 fa05 	bl	8003c78 <HAL_RCC_MCOConfig>
}
 800186e:	bf00      	nop
 8001870:	3750      	adds	r7, #80	@ 0x50
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40007000 	.word	0x40007000

08001880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <MX_I2C1_Init+0x50>)
 8001886:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <MX_I2C1_Init+0x54>)
 8001888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <MX_I2C1_Init+0x50>)
 800188c:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <MX_I2C1_Init+0x58>)
 800188e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <MX_I2C1_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <MX_I2C1_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <MX_I2C1_Init+0x50>)
 800189e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <MX_I2C1_Init+0x50>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <MX_I2C1_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b0:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <MX_I2C1_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <MX_I2C1_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	@ (80018d0 <MX_I2C1_Init+0x50>)
 80018be:	f001 f9bb 	bl	8002c38 <HAL_I2C_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018c8:	f000 f914 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20002274 	.word	0x20002274
 80018d4:	40005400 	.word	0x40005400
 80018d8:	000186a0 	.word	0x000186a0

080018dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <MX_SPI1_Init+0x64>)
 80018e2:	4a18      	ldr	r2, [pc, #96]	@ (8001944 <MX_SPI1_Init+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <MX_SPI1_Init+0x64>)
 80018e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <MX_SPI1_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <MX_SPI1_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <MX_SPI1_Init+0x64>)
 8001908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <MX_SPI1_Init+0x64>)
 8001910:	2210      	movs	r2, #16
 8001912:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001914:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <MX_SPI1_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <MX_SPI1_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001920:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <MX_SPI1_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <MX_SPI1_Init+0x64>)
 8001928:	220a      	movs	r2, #10
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	@ (8001940 <MX_SPI1_Init+0x64>)
 800192e:	f002 ff33 	bl	8004798 <HAL_SPI_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001938:	f000 f8dc 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200022d4 	.word	0x200022d4
 8001944:	40013000 	.word	0x40013000

08001948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_USART1_UART_Init+0x4c>)
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <MX_USART1_UART_Init+0x50>)
 8001950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <MX_USART1_UART_Init+0x4c>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <MX_USART1_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <MX_USART1_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <MX_USART1_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MX_USART1_UART_Init+0x4c>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <MX_USART1_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <MX_USART1_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_USART1_UART_Init+0x4c>)
 8001980:	f003 fb5c 	bl	800503c <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800198a:	f000 f8b3 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000232c 	.word	0x2000232c
 8001998:	40011000 	.word	0x40011000

0800199c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a4a      	ldr	r2, [pc, #296]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b48      	ldr	r3, [pc, #288]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b44      	ldr	r3, [pc, #272]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a43      	ldr	r2, [pc, #268]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 80019d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b41      	ldr	r3, [pc, #260]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a35      	ldr	r2, [pc, #212]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <MX_GPIO_Init+0x148>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a28:	482f      	ldr	r0, [pc, #188]	@ (8001ae8 <MX_GPIO_Init+0x14c>)
 8001a2a:	f001 f8d1 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_PIN_Pin|GPIO_PIN_15|TST_LED_Pin, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f248 2101 	movw	r1, #33281	@ 0x8201
 8001a34:	482d      	ldr	r0, [pc, #180]	@ (8001aec <MX_GPIO_Init+0x150>)
 8001a36:	f001 f8cb 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a40:	482b      	ldr	r0, [pc, #172]	@ (8001af0 <MX_GPIO_Init+0x154>)
 8001a42:	f001 f8c5 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4822      	ldr	r0, [pc, #136]	@ (8001ae8 <MX_GPIO_Init+0x14c>)
 8001a60:	f000 ff1a 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_5_Pin BTN_4_Pin BTN_3_Pin BTN_2_Pin
                           BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_5_Pin|BTN_4_Pin|BTN_3_Pin|BTN_2_Pin
 8001a64:	231f      	movs	r3, #31
 8001a66:	617b      	str	r3, [r7, #20]
                          |BTN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	481e      	ldr	r0, [pc, #120]	@ (8001af0 <MX_GPIO_Init+0x154>)
 8001a78:	f000 ff0e 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_PIN_Pin PB15 TST_LED_Pin */
  GPIO_InitStruct.Pin = SD_CS_PIN_Pin|GPIO_PIN_15|TST_LED_Pin;
 8001a7c:	f248 2301 	movw	r3, #33281	@ 0x8201
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4815      	ldr	r0, [pc, #84]	@ (8001aec <MX_GPIO_Init+0x150>)
 8001a96:	f000 feff 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480e      	ldr	r0, [pc, #56]	@ (8001af0 <MX_GPIO_Init+0x154>)
 8001ab8:	f000 feee 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4806      	ldr	r0, [pc, #24]	@ (8001af0 <MX_GPIO_Init+0x154>)
 8001ad6:	f000 fedf 	bl	8002898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	@ 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	40020400 	.word	0x40020400
 8001af0:	40020000 	.word	0x40020000

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <Error_Handler+0x8>

08001b00 <RTC_Backup_Write>:
extern char time[30];
extern char date[30];


void RTC_Backup_Write(void)
 {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
     HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x1234);
 8001b04:	f241 2234 	movw	r2, #4660	@ 0x1234
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <RTC_Backup_Write+0x14>)
 8001b0c:	f002 fe12 	bl	8004734 <HAL_RTCEx_BKUPWrite>

 }
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000222c 	.word	0x2000222c

08001b18 <RTC_Backup_Read>:

 void RTC_Backup_Read(void)
 {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
    HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <RTC_Backup_Read+0x10>)
 8001b20:	f002 fe22 	bl	8004768 <HAL_RTCEx_BKUPRead>
 }
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000222c 	.word	0x2000222c

08001b2c <getDateTime>:

 void getDateTime(void)
  {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af02      	add	r7, sp, #8
 	 RTC_DateTypeDef gDate = {0};
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 	 RTC_TimeTypeDef gTime = {0};
 8001b36:	463b      	mov	r3, r7
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]

 	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001b44:	463b      	mov	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4813      	ldr	r0, [pc, #76]	@ (8001b98 <getDateTime+0x6c>)
 8001b4c:	f002 fc03 	bl	8004356 <HAL_RTC_GetTime>
 	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	4619      	mov	r1, r3
 8001b58:	480f      	ldr	r0, [pc, #60]	@ (8001b98 <getDateTime+0x6c>)
 8001b5a:	f002 fcde 	bl	800451a <HAL_RTC_GetDate>

 	 sprintf((char*)time, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001b5e:	783b      	ldrb	r3, [r7, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	4619      	mov	r1, r3
 8001b66:	78bb      	ldrb	r3, [r7, #2]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	490b      	ldr	r1, [pc, #44]	@ (8001b9c <getDateTime+0x70>)
 8001b6e:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <getDateTime+0x74>)
 8001b70:	f007 fc66 	bl	8009440 <siprintf>
 	 sprintf((char*)date, "%02d-%02d-%04d", gDate.Date, gDate.Month, 2000 + gDate.Year);
 8001b74:	7dbb      	ldrb	r3, [r7, #22]
 8001b76:	461a      	mov	r2, r3
 8001b78:	7d7b      	ldrb	r3, [r7, #21]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	460b      	mov	r3, r1
 8001b86:	4907      	ldr	r1, [pc, #28]	@ (8001ba4 <getDateTime+0x78>)
 8001b88:	4807      	ldr	r0, [pc, #28]	@ (8001ba8 <getDateTime+0x7c>)
 8001b8a:	f007 fc59 	bl	8009440 <siprintf>
  }
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000222c 	.word	0x2000222c
 8001b9c:	08009dd4 	.word	0x08009dd4
 8001ba0:	20000158 	.word	0x20000158
 8001ba4:	08009de4 	.word	0x08009de4
 8001ba8:	20000178 	.word	0x20000178

08001bac <RTC_setTime>:

 void RTC_setTime(void)
  {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 	  RTC_TimeTypeDef sTime = {0};
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
 	      sTime.Hours = 22;
 8001bc0:	2316      	movs	r3, #22
 8001bc2:	713b      	strb	r3, [r7, #4]
 	      sTime.Minutes = 31;
 8001bc4:	231f      	movs	r3, #31
 8001bc6:	717b      	strb	r3, [r7, #5]
 	      sTime.Seconds = 00;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	71bb      	strb	r3, [r7, #6]
 	      sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
 	      sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 	      HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4803      	ldr	r0, [pc, #12]	@ (8001be8 <RTC_setTime+0x3c>)
 8001bdc:	f002 fb21 	bl	8004222 <HAL_RTC_SetTime>

  }
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000222c 	.word	0x2000222c

08001bec <RTC_setDate>:
  void RTC_setDate(void)
  {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]

    sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	713b      	strb	r3, [r7, #4]
    sDate.Month = RTC_MONTH_MARCH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	717b      	strb	r3, [r7, #5]
    sDate.Date = 0x11;
 8001bfe:	2311      	movs	r3, #17
 8001c00:	71bb      	strb	r3, [r7, #6]
    sDate.Year = 0x25;
 8001c02:	2325      	movs	r3, #37	@ 0x25
 8001c04:	71fb      	strb	r3, [r7, #7]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <RTC_setDate+0x38>)
 8001c0e:	f002 fc00 	bl	8004412 <HAL_RTC_SetDate>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <RTC_setDate+0x30>
    {
 	 Error_Handler();
 8001c18:	f7ff ff6c 	bl	8001af4 <Error_Handler>
    }
  }
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000222c 	.word	0x2000222c

08001c28 <DisplayDateTime>:


  void DisplayDateTime(void)
  {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
 	 lcd_send_cmd(0x80);
 8001c2c:	2080      	movs	r0, #128	@ 0x80
 8001c2e:	f7ff fa53 	bl	80010d8 <lcd_send_cmd>
	 lcd_send_string(time);
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <DisplayDateTime+0x20>)
 8001c34:	f7ff fb23 	bl	800127e <lcd_send_string>
 	 lcd_send_cmd(0xC0);
 8001c38:	20c0      	movs	r0, #192	@ 0xc0
 8001c3a:	f7ff fa4d 	bl	80010d8 <lcd_send_cmd>
 	 lcd_send_string(date);
 8001c3e:	4803      	ldr	r0, [pc, #12]	@ (8001c4c <DisplayDateTime+0x24>)
 8001c40:	f7ff fb1d 	bl	800127e <lcd_send_string>
  }
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000158 	.word	0x20000158
 8001c4c:	20000178 	.word	0x20000178

08001c50 <MX_RTC_Init>:

  void MX_RTC_Init(void)
  {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0

    /* USER CODE END RTC_Init 1 */

    /** Initialize RTC Only
    */
    hrtc.Instance = RTC;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <MX_RTC_Init+0x44>)
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <MX_RTC_Init+0x48>)
 8001c58:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <MX_RTC_Init+0x44>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <MX_RTC_Init+0x44>)
 8001c62:	227f      	movs	r2, #127	@ 0x7f
 8001c64:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <MX_RTC_Init+0x44>)
 8001c68:	22ff      	movs	r2, #255	@ 0xff
 8001c6a:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <MX_RTC_Init+0x44>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <MX_RTC_Init+0x44>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <MX_RTC_Init+0x44>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <MX_RTC_Init+0x44>)
 8001c80:	f002 fa4c 	bl	800411c <HAL_RTC_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_RTC_Init+0x3e>
    {
      Error_Handler();
 8001c8a:	f7ff ff33 	bl	8001af4 <Error_Handler>





  }
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000222c 	.word	0x2000222c
 8001c98:	40002800 	.word	0x40002800

08001c9c <log_to_sdcard>:
extern char filename[20];
extern uint8_t sdCardsts;
extern IWDG_HandleTypeDef hiwdg;

void log_to_sdcard(char *data)
{
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	b09b      	sub	sp, #108	@ 0x6c
 8001ca0:	af04      	add	r7, sp, #16
 8001ca2:	6078      	str	r0, [r7, #4]
    RTC_DateTypeDef sDate;
    char timestamp[50];

  static  int oldTime,currentTime;

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001ca4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4619      	mov	r1, r3
 8001cac:	483a      	ldr	r0, [pc, #232]	@ (8001d98 <log_to_sdcard+0xfc>)
 8001cae:	f002 fb52 	bl	8004356 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001cb2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4837      	ldr	r0, [pc, #220]	@ (8001d98 <log_to_sdcard+0xfc>)
 8001cbc:	f002 fc2d 	bl	800451a <HAL_RTC_GetDate>

    sprintf(timestamp, "[%02d-%02d-%04d %02d:%02d:%02d] ",
            sDate.Date, sDate.Month, 2000 + sDate.Year,
 8001cc0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
    sprintf(timestamp, "[%02d-%02d-%04d %02d:%02d:%02d] ",
 8001cc4:	461d      	mov	r5, r3
            sDate.Date, sDate.Month, 2000 + sDate.Year,
 8001cc6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
    sprintf(timestamp, "[%02d-%02d-%04d %02d:%02d:%02d] ",
 8001cca:	461e      	mov	r6, r3
            sDate.Date, sDate.Month, 2000 + sDate.Year,
 8001ccc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
    sprintf(timestamp, "[%02d-%02d-%04d %02d:%02d:%02d] ",
 8001cd0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
            sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001cd4:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001cd8:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 8001cdc:	f897 0046 	ldrb.w	r0, [r7, #70]	@ 0x46
    sprintf(timestamp, "[%02d-%02d-%04d %02d:%02d:%02d] ",
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	f107 000c 	add.w	r0, r7, #12
 8001ce6:	9403      	str	r4, [sp, #12]
 8001ce8:	9102      	str	r1, [sp, #8]
 8001cea:	9201      	str	r2, [sp, #4]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	4633      	mov	r3, r6
 8001cf0:	462a      	mov	r2, r5
 8001cf2:	492a      	ldr	r1, [pc, #168]	@ (8001d9c <log_to_sdcard+0x100>)
 8001cf4:	f007 fba4 	bl	8009440 <siprintf>

    fresult = f_mount(&fs, "", 1);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4929      	ldr	r1, [pc, #164]	@ (8001da0 <log_to_sdcard+0x104>)
 8001cfc:	4829      	ldr	r0, [pc, #164]	@ (8001da4 <log_to_sdcard+0x108>)
 8001cfe:	f006 fb59 	bl	80083b4 <f_mount>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <log_to_sdcard+0x10c>)
 8001d08:	701a      	strb	r2, [r3, #0]
    fresult = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8001d0a:	2212      	movs	r2, #18
 8001d0c:	4927      	ldr	r1, [pc, #156]	@ (8001dac <log_to_sdcard+0x110>)
 8001d0e:	4828      	ldr	r0, [pc, #160]	@ (8001db0 <log_to_sdcard+0x114>)
 8001d10:	f006 fb96 	bl	8008440 <f_open>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <log_to_sdcard+0x10c>)
 8001d1a:	701a      	strb	r2, [r3, #0]
    f_lseek(&fil, f_size(&fil));
 8001d1c:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <log_to_sdcard+0x114>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4823      	ldr	r0, [pc, #140]	@ (8001db0 <log_to_sdcard+0x114>)
 8001d24:	f006 ff90 	bl	8008c48 <f_lseek>
    f_write(&fil, timestamp, strlen(timestamp), NULL);
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fa57 	bl	80001e0 <strlen>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f107 010c 	add.w	r1, r7, #12
 8001d38:	2300      	movs	r3, #0
 8001d3a:	481d      	ldr	r0, [pc, #116]	@ (8001db0 <log_to_sdcard+0x114>)
 8001d3c:	f006 fd48 	bl	80087d0 <f_write>
    f_write(&fil, data, strlen(data), NULL);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7fe fa4d 	bl	80001e0 <strlen>
 8001d46:	4602      	mov	r2, r0
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4818      	ldr	r0, [pc, #96]	@ (8001db0 <log_to_sdcard+0x114>)
 8001d4e:	f006 fd3f 	bl	80087d0 <f_write>
    f_write(&fil, "\r\n", 2, NULL);
 8001d52:	2300      	movs	r3, #0
 8001d54:	2202      	movs	r2, #2
 8001d56:	4917      	ldr	r1, [pc, #92]	@ (8001db4 <log_to_sdcard+0x118>)
 8001d58:	4815      	ldr	r0, [pc, #84]	@ (8001db0 <log_to_sdcard+0x114>)
 8001d5a:	f006 fd39 	bl	80087d0 <f_write>
    f_close(&fil);
 8001d5e:	4814      	ldr	r0, [pc, #80]	@ (8001db0 <log_to_sdcard+0x114>)
 8001d60:	f006 ff48 	bl	8008bf4 <f_close>
    f_mount(NULL, "", 1);
 8001d64:	2201      	movs	r2, #1
 8001d66:	490e      	ldr	r1, [pc, #56]	@ (8001da0 <log_to_sdcard+0x104>)
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f006 fb23 	bl	80083b4 <f_mount>

    currentTime =  sTime.Minutes;
 8001d6e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <log_to_sdcard+0x11c>)
 8001d76:	601a      	str	r2, [r3, #0]
    if(currentTime != oldTime)
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <log_to_sdcard+0x11c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <log_to_sdcard+0x120>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d005      	beq.n	8001d90 <log_to_sdcard+0xf4>
    {
        create_new_file();
 8001d84:	f000 f81c 	bl	8001dc0 <create_new_file>
        oldTime = currentTime;
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <log_to_sdcard+0x11c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <log_to_sdcard+0x120>)
 8001d8e:	6013      	str	r3, [r2, #0]

    }

}
 8001d90:	bf00      	nop
 8001d92:	375c      	adds	r7, #92	@ 0x5c
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d98:	2000222c 	.word	0x2000222c
 8001d9c:	08009df4 	.word	0x08009df4
 8001da0:	08009e18 	.word	0x08009e18
 8001da4:	200001c0 	.word	0x200001c0
 8001da8:	20002228 	.word	0x20002228
 8001dac:	2000224c 	.word	0x2000224c
 8001db0:	200011f8 	.word	0x200011f8
 8001db4:	08009e1c 	.word	0x08009e1c
 8001db8:	20002374 	.word	0x20002374
 8001dbc:	20002378 	.word	0x20002378

08001dc0 <create_new_file>:

void create_new_file()
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af04      	add	r7, sp, #16
//

    RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4810      	ldr	r0, [pc, #64]	@ (8001e10 <create_new_file+0x50>)
 8001dce:	f002 fac2 	bl	8004356 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <create_new_file+0x50>)
 8001dda:	f002 fb9e 	bl	800451a <HAL_RTC_GetDate>
	//  sprintf(filename, "data%d.txt", file_index);

	  sprintf(filename, "%02d_%02d_%04d %02d_%02d_%02d.txt",
	  sDate.Date, sDate.Month, 2000 + sDate.Year,
 8001dde:	78bb      	ldrb	r3, [r7, #2]
	  sprintf(filename, "%02d_%02d_%04d %02d_%02d_%02d.txt",
 8001de0:	461c      	mov	r4, r3
	  sDate.Date, sDate.Month, 2000 + sDate.Year,
 8001de2:	787b      	ldrb	r3, [r7, #1]
	  sprintf(filename, "%02d_%02d_%04d %02d_%02d_%02d.txt",
 8001de4:	461d      	mov	r5, r3
	  sDate.Date, sDate.Month, 2000 + sDate.Year,
 8001de6:	78fb      	ldrb	r3, [r7, #3]
	  sprintf(filename, "%02d_%02d_%04d %02d_%02d_%02d.txt",
 8001de8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
	  sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001dec:	793a      	ldrb	r2, [r7, #4]
 8001dee:	7979      	ldrb	r1, [r7, #5]
 8001df0:	79b8      	ldrb	r0, [r7, #6]
	  sprintf(filename, "%02d_%02d_%04d %02d_%02d_%02d.txt",
 8001df2:	9003      	str	r0, [sp, #12]
 8001df4:	9102      	str	r1, [sp, #8]
 8001df6:	9201      	str	r2, [sp, #4]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	462b      	mov	r3, r5
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	4905      	ldr	r1, [pc, #20]	@ (8001e14 <create_new_file+0x54>)
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <create_new_file+0x58>)
 8001e02:	f007 fb1d 	bl	8009440 <siprintf>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000222c 	.word	0x2000222c
 8001e14:	08009e20 	.word	0x08009e20
 8001e18:	2000224c 	.word	0x2000224c

08001e1c <ReadsdCardStorage>:
        return 1;
    }
}

void ReadsdCardStorage(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8001e22:	af00      	add	r7, sp, #0
		  FATFS fs;
		  FATFS *pfs;
		  DWORD fre_clust;
		  uint32_t free_space, total;
		  FRESULT fresult;
		  uint8_t editing = 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001e2a:	f102 021f 	add.w	r2, r2, #31
 8001e2e:	7013      	strb	r3, [r2, #0]
		  lcd_clear();
 8001e30:	f7ff f9b2 	bl	8001198 <lcd_clear>

  while(editing)
 8001e34:	e0be      	b.n	8001fb4 <ReadsdCardStorage+0x198>
  {

		  // Mount the SD card
		  fresult = f_mount(&fs, "", 1);
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4966      	ldr	r1, [pc, #408]	@ (8001fd8 <ReadsdCardStorage+0x1bc>)
 8001e40:	4618      	mov	r0, r3
 8001e42:	f006 fab7 	bl	80083b4 <f_mount>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001e4c:	f102 021e 	add.w	r2, r2, #30
 8001e50:	7013      	strb	r3, [r2, #0]
		  if (fresult != FR_OK)
 8001e52:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001e56:	f103 031e 	add.w	r3, r3, #30
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <ReadsdCardStorage+0x4a>
		  {
			  lcd_send_string("No SD Card");
 8001e60:	485e      	ldr	r0, [pc, #376]	@ (8001fdc <ReadsdCardStorage+0x1c0>)
 8001e62:	f7ff fa0c 	bl	800127e <lcd_send_string>
	//		  return; // Exit if no SD card is found
		  }

		  // Get free clusters
		  fresult = f_getfree("", &fre_clust, &pfs);
 8001e66:	f107 0220 	add.w	r2, r7, #32
 8001e6a:	3a08      	subs	r2, #8
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	3b0c      	subs	r3, #12
 8001e72:	4619      	mov	r1, r3
 8001e74:	4858      	ldr	r0, [pc, #352]	@ (8001fd8 <ReadsdCardStorage+0x1bc>)
 8001e76:	f007 f90b 	bl	8009090 <f_getfree>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001e80:	f102 021e 	add.w	r2, r2, #30
 8001e84:	7013      	strb	r3, [r2, #0]
		  if (fresult != FR_OK)
 8001e86:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001e8a:	f103 031e 	add.w	r3, r3, #30
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <ReadsdCardStorage+0x7e>
		  {
			  lcd_send_string("Error reading SD");
 8001e94:	4852      	ldr	r0, [pc, #328]	@ (8001fe0 <ReadsdCardStorage+0x1c4>)
 8001e96:	f7ff f9f2 	bl	800127e <lcd_send_string>
			//  return;
		  }

		  // Calculate free and total space in KB
		  free_space = (uint32_t)(fre_clust * pfs->csize * 512) / 1024;  // KB
 8001e9a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e9e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001ea2:	895b      	ldrh	r3, [r3, #10]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001eaa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	025b      	lsls	r3, r3, #9
 8001eb4:	0a9b      	lsrs	r3, r3, #10
 8001eb6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001eba:	f102 0218 	add.w	r2, r2, #24
 8001ebe:	6013      	str	r3, [r2, #0]
		  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 512) / 1024;  // KB
 8001ec0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ec4:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	3b02      	subs	r3, #2
 8001ecc:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001ed0:	f852 2c48 	ldr.w	r2, [r2, #-72]
 8001ed4:	8952      	ldrh	r2, [r2, #10]
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	0a9b      	lsrs	r3, r3, #10
 8001ede:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001ee2:	f102 0214 	add.w	r2, r2, #20
 8001ee6:	6013      	str	r3, [r2, #0]

		  // Check if SD card is available
		  if (total == 0)
 8001ee8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001eec:	f103 0314 	add.w	r3, r3, #20
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <ReadsdCardStorage+0xe0>
		  {
			  lcd_send_string("No SD Card");
 8001ef6:	4839      	ldr	r0, [pc, #228]	@ (8001fdc <ReadsdCardStorage+0x1c0>)
 8001ef8:	f7ff f9c1 	bl	800127e <lcd_send_string>
			//  return;
		  }

		  // Display space info
		  lcd_put_cur(0, 0);
 8001efc:	2100      	movs	r1, #0
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff f961 	bl	80011c6 <lcd_put_cur>
		  char buffer[16];
		  sprintf(buffer, "Free: %lu KB", free_space);
 8001f04:	f107 0320 	add.w	r3, r7, #32
 8001f08:	3b1c      	subs	r3, #28
 8001f0a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001f0e:	f102 0218 	add.w	r2, r2, #24
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	4933      	ldr	r1, [pc, #204]	@ (8001fe4 <ReadsdCardStorage+0x1c8>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f007 fa92 	bl	8009440 <siprintf>
		  lcd_send_string(buffer);
 8001f1c:	f107 0320 	add.w	r3, r7, #32
 8001f20:	3b1c      	subs	r3, #28
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f9ab 	bl	800127e <lcd_send_string>
		  lcd_put_cur(1, 0);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7ff f94b 	bl	80011c6 <lcd_put_cur>
		  memset(buffer,0,sizeof(buffer));
 8001f30:	f107 0320 	add.w	r3, r7, #32
 8001f34:	3b1c      	subs	r3, #28
 8001f36:	2210      	movs	r2, #16
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f007 faa0 	bl	8009480 <memset>
		  sprintf(buffer, "total:%lu KB", total);
 8001f40:	f107 0320 	add.w	r3, r7, #32
 8001f44:	3b1c      	subs	r3, #28
 8001f46:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001f4a:	f102 0214 	add.w	r2, r2, #20
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	4925      	ldr	r1, [pc, #148]	@ (8001fe8 <ReadsdCardStorage+0x1cc>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f007 fa74 	bl	8009440 <siprintf>
		  lcd_send_string(buffer);
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	3b1c      	subs	r3, #28
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f98d 	bl	800127e <lcd_send_string>

	  if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_ENTER) == GPIO_PIN_SET) &&
 8001f64:	2101      	movs	r1, #1
 8001f66:	4821      	ldr	r0, [pc, #132]	@ (8001fec <ReadsdCardStorage+0x1d0>)
 8001f68:	f000 fe1a 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d11d      	bne.n	8001fae <ReadsdCardStorage+0x192>
	     (HAL_GPIO_ReadPin(BTN_PORT, BTN_RIGHT) == GPIO_PIN_RESET))
 8001f72:	2102      	movs	r1, #2
 8001f74:	481d      	ldr	r0, [pc, #116]	@ (8001fec <ReadsdCardStorage+0x1d0>)
 8001f76:	f000 fe13 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
	  if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_ENTER) == GPIO_PIN_SET) &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d116      	bne.n	8001fae <ReadsdCardStorage+0x192>
		   {
			   HAL_Delay(50); // Debounce
 8001f80:	2032      	movs	r0, #50	@ 0x32
 8001f82:	f000 fac1 	bl	8002508 <HAL_Delay>
			   if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_ENTER) == GPIO_PIN_SET) &&
 8001f86:	2101      	movs	r1, #1
 8001f88:	4818      	ldr	r0, [pc, #96]	@ (8001fec <ReadsdCardStorage+0x1d0>)
 8001f8a:	f000 fe09 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d10c      	bne.n	8001fae <ReadsdCardStorage+0x192>
				   (HAL_GPIO_ReadPin(BTN_PORT, BTN_RIGHT) == GPIO_PIN_RESET))
 8001f94:	2102      	movs	r1, #2
 8001f96:	4815      	ldr	r0, [pc, #84]	@ (8001fec <ReadsdCardStorage+0x1d0>)
 8001f98:	f000 fe02 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8001f9c:	4603      	mov	r3, r0
			   if ((HAL_GPIO_ReadPin(BTN_PORT, BTN_ENTER) == GPIO_PIN_SET) &&
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <ReadsdCardStorage+0x192>
			   {
				   editing = 0; // Exit loop
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001fa8:	f102 021f 	add.w	r2, r2, #31
 8001fac:	7013      	strb	r3, [r2, #0]
			   }
		   }
	       HAL_IWDG_Refresh(&hiwdg);
 8001fae:	4810      	ldr	r0, [pc, #64]	@ (8001ff0 <ReadsdCardStorage+0x1d4>)
 8001fb0:	f001 fadf 	bl	8003572 <HAL_IWDG_Refresh>
  while(editing)
 8001fb4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001fb8:	f103 031f 	add.w	r3, r3, #31
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f47f af39 	bne.w	8001e36 <ReadsdCardStorage+0x1a>
		  }
		  lcd_clear();
 8001fc4:	f7ff f8e8 	bl	8001198 <lcd_clear>
	      HAL_Delay(200); // Ensure stable exit
 8001fc8:	20c8      	movs	r0, #200	@ 0xc8
 8001fca:	f000 fa9d 	bl	8002508 <HAL_Delay>
}
 8001fce:	bf00      	nop
 8001fd0:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	08009e18 	.word	0x08009e18
 8001fdc:	08009e50 	.word	0x08009e50
 8001fe0:	08009e5c 	.word	0x08009e5c
 8001fe4:	08009e70 	.word	0x08009e70
 8001fe8:	08009e80 	.word	0x08009e80
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	200022c8 	.word	0x200022c8

08001ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <HAL_MspInit+0x4c>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	4a0f      	ldr	r2, [pc, #60]	@ (8002040 <HAL_MspInit+0x4c>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002008:	6453      	str	r3, [r2, #68]	@ 0x44
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <HAL_MspInit+0x4c>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <HAL_MspInit+0x4c>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	4a08      	ldr	r2, [pc, #32]	@ (8002040 <HAL_MspInit+0x4c>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002024:	6413      	str	r3, [r2, #64]	@ 0x40
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_MspInit+0x4c>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800

08002044 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	@ 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a19      	ldr	r2, [pc, #100]	@ (80020c8 <HAL_I2C_MspInit+0x84>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d12b      	bne.n	80020be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <HAL_I2C_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a17      	ldr	r2, [pc, #92]	@ (80020cc <HAL_I2C_MspInit+0x88>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <HAL_I2C_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002082:	23c0      	movs	r3, #192	@ 0xc0
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002086:	2312      	movs	r3, #18
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002092:	2304      	movs	r3, #4
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <HAL_I2C_MspInit+0x8c>)
 800209e:	f000 fbfb 	bl	8002898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HAL_I2C_MspInit+0x88>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	4a08      	ldr	r2, [pc, #32]	@ (80020cc <HAL_I2C_MspInit+0x88>)
 80020ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_I2C_MspInit+0x88>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	@ 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40005400 	.word	0x40005400
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020400 	.word	0x40020400

080020d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <HAL_RTC_MspInit+0x50>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d111      	bne.n	800211c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020f8:	2302      	movs	r3, #2
 80020fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002100:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	4618      	mov	r0, r3
 8002108:	f001 ff18 	bl	8003f3c <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002112:	f7ff fcef 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002116:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <HAL_RTC_MspInit+0x54>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800211c:	bf00      	nop
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40002800 	.word	0x40002800
 8002128:	42470e3c 	.word	0x42470e3c

0800212c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	@ 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a19      	ldr	r2, [pc, #100]	@ (80021b0 <HAL_SPI_MspInit+0x84>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d12b      	bne.n	80021a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <HAL_SPI_MspInit+0x88>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	4a17      	ldr	r2, [pc, #92]	@ (80021b4 <HAL_SPI_MspInit+0x88>)
 8002158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800215c:	6453      	str	r3, [r2, #68]	@ 0x44
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <HAL_SPI_MspInit+0x88>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_SPI_MspInit+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a10      	ldr	r2, [pc, #64]	@ (80021b4 <HAL_SPI_MspInit+0x88>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_SPI_MspInit+0x88>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002186:	23e0      	movs	r3, #224	@ 0xe0
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002196:	2305      	movs	r3, #5
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <HAL_SPI_MspInit+0x8c>)
 80021a2:	f000 fb79 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	@ 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40013000 	.word	0x40013000
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020000 	.word	0x40020000

080021bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	@ 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <HAL_UART_MspInit+0x94>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d134      	bne.n	8002248 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <HAL_UART_MspInit+0x98>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002254 <HAL_UART_MspInit+0x98>)
 80021e8:	f043 0310 	orr.w	r3, r3, #16
 80021ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HAL_UART_MspInit+0x98>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <HAL_UART_MspInit+0x98>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a14      	ldr	r2, [pc, #80]	@ (8002254 <HAL_UART_MspInit+0x98>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_UART_MspInit+0x98>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002216:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002228:	2307      	movs	r3, #7
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4809      	ldr	r0, [pc, #36]	@ (8002258 <HAL_UART_MspInit+0x9c>)
 8002234:	f000 fb30 	bl	8002898 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2025      	movs	r0, #37	@ 0x25
 800223e:	f000 fa62 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002242:	2025      	movs	r0, #37	@ 0x25
 8002244:	f000 fa7b 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3728      	adds	r7, #40	@ 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40011000 	.word	0x40011000
 8002254:	40023800 	.word	0x40023800
 8002258:	40020000 	.word	0x40020000

0800225c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <NMI_Handler+0x4>

08002264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <MemManage_Handler+0x4>

08002274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <UsageFault_Handler+0x4>

08002284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <SysTick_Handler+0x30>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <SysTick_Handler+0x30>)
 80022c0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80022c2:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <SysTick_Handler+0x30>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d904      	bls.n	80022d6 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <SysTick_Handler+0x30>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
		SDTimer_handler();
 80022d2:	f000 f811 	bl	80022f8 <SDTimer_handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d6:	f000 f8f7 	bl	80024c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000237c 	.word	0x2000237c

080022e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <USART1_IRQHandler+0x10>)
 80022ea:	f002 ff1d 	bl	8005128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000232c 	.word	0x2000232c

080022f8 <SDTimer_handler>:

/* USER CODE BEGIN 1 */
void SDTimer_handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80022fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <SDTimer_handler+0x40>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <SDTimer_handler+0x1c>
	{
		Timer1--;
 8002306:	4b0c      	ldr	r3, [pc, #48]	@ (8002338 <SDTimer_handler+0x40>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <SDTimer_handler+0x40>)
 8002312:	701a      	strb	r2, [r3, #0]
	}
	if(Timer2 > 0)
 8002314:	4b09      	ldr	r3, [pc, #36]	@ (800233c <SDTimer_handler+0x44>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <SDTimer_handler+0x34>
	{
		Timer2--;
 800231e:	4b07      	ldr	r3, [pc, #28]	@ (800233c <SDTimer_handler+0x44>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <SDTimer_handler+0x44>)
 800232a:	701a      	strb	r2, [r3, #0]
	}
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	2000237d 	.word	0x2000237d
 800233c:	2000237e 	.word	0x2000237e

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	@ (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f007 f88e 	bl	8009490 <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	@ (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20020000 	.word	0x20020000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	20002380 	.word	0x20002380
 80023a8:	20002710 	.word	0x20002710

080023ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <SystemInit+0x20>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <SystemInit+0x20>)
 80023b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002408 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023d4:	f7ff ffea 	bl	80023ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d8:	480c      	ldr	r0, [pc, #48]	@ (800240c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023da:	490d      	ldr	r1, [pc, #52]	@ (8002410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023f0:	4c0a      	ldr	r4, [pc, #40]	@ (800241c <LoopFillZerobss+0x22>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fe:	f007 f84d 	bl	800949c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002402:	f7ff f99f 	bl	8001744 <main>
  bx  lr    
 8002406:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002410:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002414:	0800a374 	.word	0x0800a374
  ldr r2, =_sbss
 8002418:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800241c:	2000270c 	.word	0x2000270c

08002420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC_IRQHandler>
	...

08002424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0d      	ldr	r2, [pc, #52]	@ (8002464 <HAL_Init+0x40>)
 800242e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <HAL_Init+0x40>)
 800243a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800243e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a07      	ldr	r2, [pc, #28]	@ (8002464 <HAL_Init+0x40>)
 8002446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f000 f94f 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002452:	200f      	movs	r0, #15
 8002454:	f000 f808 	bl	8002468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002458:	f7ff fdcc 	bl	8001ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00

08002468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002470:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_InitTick+0x54>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_InitTick+0x58>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f967 	bl	800275a <HAL_SYSTICK_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00e      	b.n	80024b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d80a      	bhi.n	80024b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800249c:	2200      	movs	r2, #0
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f000 f92f 	bl	8002706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a8:	4a06      	ldr	r2, [pc, #24]	@ (80024c4 <HAL_InitTick+0x5c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000004 	.word	0x20000004
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	20000008 	.word	0x20000008

080024c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_IncTick+0x20>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <HAL_IncTick+0x24>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	20002384 	.word	0x20002384

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20002384 	.word	0x20002384

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff ffee 	bl	80024f0 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d005      	beq.n	800252e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002522:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <HAL_Delay+0x44>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800252e:	bf00      	nop
 8002530:	f7ff ffde 	bl	80024f0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8f7      	bhi.n	8002530 <HAL_Delay+0x28>
  {
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000000c 	.word	0x2000000c

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	@ (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	@ (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	@ (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	@ 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff feb6 	bl	80024f0 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d008      	beq.n	80027a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2280      	movs	r2, #128	@ 0x80
 8002796:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e052      	b.n	800284a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0216 	bic.w	r2, r2, #22
 80027b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <HAL_DMA_Abort+0x62>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0208 	bic.w	r2, r2, #8
 80027e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f4:	e013      	b.n	800281e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f6:	f7ff fe7b 	bl	80024f0 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b05      	cmp	r3, #5
 8002802:	d90c      	bls.n	800281e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2203      	movs	r2, #3
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e015      	b.n	800284a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e4      	bne.n	80027f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	223f      	movs	r2, #63	@ 0x3f
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d004      	beq.n	8002870 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2280      	movs	r2, #128	@ 0x80
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e00c      	b.n	800288a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2205      	movs	r2, #5
 8002874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	@ 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	e159      	b.n	8002b68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f040 8148 	bne.w	8002b62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d005      	beq.n	80028ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d130      	bne.n	800294c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 0201 	and.w	r2, r3, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b03      	cmp	r3, #3
 8002956:	d017      	beq.n	8002988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d123      	bne.n	80029dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	220f      	movs	r2, #15
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	2203      	movs	r2, #3
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a2 	beq.w	8002b62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b57      	ldr	r3, [pc, #348]	@ (8002b80 <HAL_GPIO_Init+0x2e8>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	4a56      	ldr	r2, [pc, #344]	@ (8002b80 <HAL_GPIO_Init+0x2e8>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a2e:	4b54      	ldr	r3, [pc, #336]	@ (8002b80 <HAL_GPIO_Init+0x2e8>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3a:	4a52      	ldr	r2, [pc, #328]	@ (8002b84 <HAL_GPIO_Init+0x2ec>)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a49      	ldr	r2, [pc, #292]	@ (8002b88 <HAL_GPIO_Init+0x2f0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d019      	beq.n	8002a9a <HAL_GPIO_Init+0x202>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a48      	ldr	r2, [pc, #288]	@ (8002b8c <HAL_GPIO_Init+0x2f4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_Init+0x1fe>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a47      	ldr	r2, [pc, #284]	@ (8002b90 <HAL_GPIO_Init+0x2f8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00d      	beq.n	8002a92 <HAL_GPIO_Init+0x1fa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a46      	ldr	r2, [pc, #280]	@ (8002b94 <HAL_GPIO_Init+0x2fc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x1f6>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a45      	ldr	r2, [pc, #276]	@ (8002b98 <HAL_GPIO_Init+0x300>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_GPIO_Init+0x1f2>
 8002a86:	2304      	movs	r3, #4
 8002a88:	e008      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f002 0203 	and.w	r2, r2, #3
 8002aa2:	0092      	lsls	r2, r2, #2
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aac:	4935      	ldr	r1, [pc, #212]	@ (8002b84 <HAL_GPIO_Init+0x2ec>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b38      	ldr	r3, [pc, #224]	@ (8002b9c <HAL_GPIO_Init+0x304>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a2f      	ldr	r2, [pc, #188]	@ (8002b9c <HAL_GPIO_Init+0x304>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b9c <HAL_GPIO_Init+0x304>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a24      	ldr	r2, [pc, #144]	@ (8002b9c <HAL_GPIO_Init+0x304>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0e:	4b23      	ldr	r3, [pc, #140]	@ (8002b9c <HAL_GPIO_Init+0x304>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b32:	4a1a      	ldr	r2, [pc, #104]	@ (8002b9c <HAL_GPIO_Init+0x304>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b38:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_GPIO_Init+0x304>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b9c <HAL_GPIO_Init+0x304>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3301      	adds	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	f67f aea2 	bls.w	80028b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3724      	adds	r7, #36	@ 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	e001      	b.n	8002bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c14:	887a      	ldrh	r2, [r7, #2]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	041a      	lsls	r2, r3, #16
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	400b      	ands	r3, r1
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e12b      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff f9f0 	bl	8002044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f001 f926 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a81      	ldr	r2, [pc, #516]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d807      	bhi.n	8002cbc <HAL_I2C_Init+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a80      	ldr	r2, [pc, #512]	@ (8002eb0 <HAL_I2C_Init+0x278>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e006      	b.n	8002cca <HAL_I2C_Init+0x92>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8002eb4 <HAL_I2C_Init+0x27c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0e7      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a78      	ldr	r2, [pc, #480]	@ (8002eb8 <HAL_I2C_Init+0x280>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a6a      	ldr	r2, [pc, #424]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d802      	bhi.n	8002d0c <HAL_I2C_Init+0xd4>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	e009      	b.n	8002d20 <HAL_I2C_Init+0xe8>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	4a69      	ldr	r2, [pc, #420]	@ (8002ebc <HAL_I2C_Init+0x284>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	3301      	adds	r3, #1
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	495c      	ldr	r1, [pc, #368]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	d819      	bhi.n	8002d74 <HAL_I2C_Init+0x13c>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e59      	subs	r1, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d54:	400b      	ands	r3, r1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_I2C_Init+0x138>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1e59      	subs	r1, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	e051      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d70:	2304      	movs	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x168>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x18e>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x196>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x1bc>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	460b      	mov	r3, r1
 8002ece:	817b      	strh	r3, [r7, #10]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff fb0c 	bl	80024f0 <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	f040 80e0 	bne.w	80030a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4970      	ldr	r1, [pc, #448]	@ (80030b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f964 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0d3      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_Master_Transmit+0x50>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0cc      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d007      	beq.n	8002f36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2221      	movs	r2, #33	@ 0x21
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2210      	movs	r2, #16
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	893a      	ldrh	r2, [r7, #8]
 8002f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a50      	ldr	r2, [pc, #320]	@ (80030b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f89c 	bl	80030bc <I2C_MasterRequestWrite>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e08d      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fa4:	e066      	b.n	8003074 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fa22 	bl	80033f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d107      	bne.n	8002fce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b04      	cmp	r3, #4
 800300e:	d11b      	bne.n	8003048 <HAL_I2C_Master_Transmit+0x188>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	6a39      	ldr	r1, [r7, #32]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fa19 	bl	8003484 <I2C_WaitOnBTFFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e01a      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d194      	bne.n	8002fa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	00100002 	.word	0x00100002
 80030b8:	ffff0000 	.word	0xffff0000

080030bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d006      	beq.n	80030e6 <I2C_MasterRequestWrite+0x2a>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d003      	beq.n	80030e6 <I2C_MasterRequestWrite+0x2a>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030e4:	d108      	bne.n	80030f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e00b      	b.n	8003110 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	2b12      	cmp	r3, #18
 80030fe:	d107      	bne.n	8003110 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800310e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f84f 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003136:	d103      	bne.n	8003140 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e035      	b.n	80031b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800314c:	d108      	bne.n	8003160 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800314e:	897b      	ldrh	r3, [r7, #10]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800315c:	611a      	str	r2, [r3, #16]
 800315e:	e01b      	b.n	8003198 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003160:	897b      	ldrh	r3, [r7, #10]
 8003162:	11db      	asrs	r3, r3, #7
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 0306 	and.w	r3, r3, #6
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f063 030f 	orn	r3, r3, #15
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	490e      	ldr	r1, [pc, #56]	@ (80031b8 <I2C_MasterRequestWrite+0xfc>)
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f898 	bl	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e010      	b.n	80031b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800318e:	897b      	ldrh	r3, [r7, #10]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4907      	ldr	r1, [pc, #28]	@ (80031bc <I2C_MasterRequestWrite+0x100>)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f888 	bl	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	00010008 	.word	0x00010008
 80031bc:	00010002 	.word	0x00010002

080031c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d0:	e048      	b.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d044      	beq.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7ff f989 	bl	80024f0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d139      	bne.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d10d      	bne.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	43da      	mvns	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	e00c      	b.n	8003230 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	43da      	mvns	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d116      	bne.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e023      	b.n	80032ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d10d      	bne.n	800328a <I2C_WaitOnFlagUntilTimeout+0xca>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	43da      	mvns	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	e00c      	b.n	80032a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	43da      	mvns	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4013      	ands	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d093      	beq.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032c2:	e071      	b.n	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d2:	d123      	bne.n	800331c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	f043 0204 	orr.w	r2, r3, #4
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e067      	b.n	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d041      	beq.n	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003324:	f7ff f8e4 	bl	80024f0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	d302      	bcc.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d136      	bne.n	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10c      	bne.n	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e00b      	b.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e021      	b.n	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	0c1b      	lsrs	r3, r3, #16
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10c      	bne.n	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	43da      	mvns	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	4013      	ands	r3, r2
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e00b      	b.n	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f af6d 	bne.w	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003400:	e034      	b.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f886 	bl	8003514 <I2C_IsAcknowledgeFailed>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e034      	b.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d028      	beq.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341a:	f7ff f869 	bl	80024f0 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	d302      	bcc.n	8003430 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11d      	bne.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343a:	2b80      	cmp	r3, #128	@ 0x80
 800343c:	d016      	beq.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e007      	b.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003476:	2b80      	cmp	r3, #128	@ 0x80
 8003478:	d1c3      	bne.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003490:	e034      	b.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f83e 	bl	8003514 <I2C_IsAcknowledgeFailed>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e034      	b.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d028      	beq.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7ff f821 	bl	80024f0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11d      	bne.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d016      	beq.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b04      	cmp	r3, #4
 8003508:	d1c3      	bne.n	8003492 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352a:	d11b      	bne.n	8003564 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003534:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	f043 0204 	orr.w	r2, r3, #4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003582:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <HAL_PWR_EnableBkUpAccess+0x20>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80035a6:	687b      	ldr	r3, [r7, #4]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	420e0020 	.word	0x420e0020
 80035b8:	40007000 	.word	0x40007000

080035bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e267      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d075      	beq.n	80036c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035da:	4b88      	ldr	r3, [pc, #544]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d00c      	beq.n	8003600 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035e6:	4b85      	ldr	r3, [pc, #532]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d112      	bne.n	8003618 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f2:	4b82      	ldr	r3, [pc, #520]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035fe:	d10b      	bne.n	8003618 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	4b7e      	ldr	r3, [pc, #504]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d05b      	beq.n	80036c4 <HAL_RCC_OscConfig+0x108>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d157      	bne.n	80036c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e242      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003620:	d106      	bne.n	8003630 <HAL_RCC_OscConfig+0x74>
 8003622:	4b76      	ldr	r3, [pc, #472]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a75      	ldr	r2, [pc, #468]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e01d      	b.n	800366c <HAL_RCC_OscConfig+0xb0>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x98>
 800363a:	4b70      	ldr	r3, [pc, #448]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6f      	ldr	r2, [pc, #444]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6c      	ldr	r2, [pc, #432]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e00b      	b.n	800366c <HAL_RCC_OscConfig+0xb0>
 8003654:	4b69      	ldr	r3, [pc, #420]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a68      	ldr	r2, [pc, #416]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800365a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4b66      	ldr	r3, [pc, #408]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a65      	ldr	r2, [pc, #404]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800366a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d013      	beq.n	800369c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe ff3c 	bl	80024f0 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800367c:	f7fe ff38 	bl	80024f0 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	@ 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e207      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b5b      	ldr	r3, [pc, #364]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0xc0>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe ff28 	bl	80024f0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a4:	f7fe ff24 	bl	80024f0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	@ 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1f3      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	4b51      	ldr	r3, [pc, #324]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0xe8>
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d063      	beq.n	800379a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036d2:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036de:	4b47      	ldr	r3, [pc, #284]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d11c      	bne.n	8003724 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ea:	4b44      	ldr	r3, [pc, #272]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d116      	bne.n	8003724 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f6:	4b41      	ldr	r3, [pc, #260]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_RCC_OscConfig+0x152>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e1c7      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370e:	4b3b      	ldr	r3, [pc, #236]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4937      	ldr	r1, [pc, #220]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	e03a      	b.n	800379a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800372c:	4b34      	ldr	r3, [pc, #208]	@ (8003800 <HAL_RCC_OscConfig+0x244>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fe fedd 	bl	80024f0 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373a:	f7fe fed9 	bl	80024f0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1a8      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	4b2b      	ldr	r3, [pc, #172]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003758:	4b28      	ldr	r3, [pc, #160]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4925      	ldr	r1, [pc, #148]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]
 800376c:	e015      	b.n	800379a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376e:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <HAL_RCC_OscConfig+0x244>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fe febc 	bl	80024f0 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377c:	f7fe feb8 	bl	80024f0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e187      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d036      	beq.n	8003814 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ae:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <HAL_RCC_OscConfig+0x248>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fe fe9c 	bl	80024f0 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037bc:	f7fe fe98 	bl	80024f0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e167      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80037d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x200>
 80037da:	e01b      	b.n	8003814 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <HAL_RCC_OscConfig+0x248>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e2:	f7fe fe85 	bl	80024f0 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	e00e      	b.n	8003808 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ea:	f7fe fe81 	bl	80024f0 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d907      	bls.n	8003808 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e150      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
 80037fc:	40023800 	.word	0x40023800
 8003800:	42470000 	.word	0x42470000
 8003804:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003808:	4b88      	ldr	r3, [pc, #544]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800380a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ea      	bne.n	80037ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8097 	beq.w	8003950 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b81      	ldr	r3, [pc, #516]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	4b7d      	ldr	r3, [pc, #500]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003840:	6413      	str	r3, [r2, #64]	@ 0x40
 8003842:	4b7a      	ldr	r3, [pc, #488]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b77      	ldr	r3, [pc, #476]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385e:	4b74      	ldr	r3, [pc, #464]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a73      	ldr	r2, [pc, #460]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fe fe41 	bl	80024f0 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7fe fe3d 	bl	80024f0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e10c      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b6a      	ldr	r3, [pc, #424]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2ea>
 8003898:	4b64      	ldr	r3, [pc, #400]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389c:	4a63      	ldr	r2, [pc, #396]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a4:	e01c      	b.n	80038e0 <HAL_RCC_OscConfig+0x324>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x30c>
 80038ae:	4b5f      	ldr	r3, [pc, #380]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ba:	4b5c      	ldr	r3, [pc, #368]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	4a5b      	ldr	r2, [pc, #364]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0x324>
 80038c8:	4b58      	ldr	r3, [pc, #352]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	4a57      	ldr	r2, [pc, #348]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d4:	4b55      	ldr	r3, [pc, #340]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d8:	4a54      	ldr	r2, [pc, #336]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038da:	f023 0304 	bic.w	r3, r3, #4
 80038de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d015      	beq.n	8003914 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7fe fe02 	bl	80024f0 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7fe fdfe 	bl	80024f0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e0cb      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003906:	4b49      	ldr	r3, [pc, #292]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0ee      	beq.n	80038f0 <HAL_RCC_OscConfig+0x334>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003914:	f7fe fdec 	bl	80024f0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7fe fde8 	bl	80024f0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e0b5      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003932:	4b3e      	ldr	r3, [pc, #248]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ee      	bne.n	800391c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003944:	4b39      	ldr	r3, [pc, #228]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	4a38      	ldr	r2, [pc, #224]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800394a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a1 	beq.w	8003a9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800395a:	4b34      	ldr	r3, [pc, #208]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b08      	cmp	r3, #8
 8003964:	d05c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d141      	bne.n	80039f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b31      	ldr	r3, [pc, #196]	@ (8003a34 <HAL_RCC_OscConfig+0x478>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fdbc 	bl	80024f0 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe fdb8 	bl	80024f0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e087      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	3b01      	subs	r3, #1
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	491b      	ldr	r1, [pc, #108]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <HAL_RCC_OscConfig+0x478>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ca:	f7fe fd91 	bl	80024f0 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fe fd8d 	bl	80024f0 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e05c      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e4:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x416>
 80039f0:	e054      	b.n	8003a9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <HAL_RCC_OscConfig+0x478>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe fd7a 	bl	80024f0 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe fd76 	bl	80024f0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e045      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x444>
 8003a1e:	e03d      	b.n	8003a9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e038      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40007000 	.word	0x40007000
 8003a34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a38:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <HAL_RCC_OscConfig+0x4ec>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d028      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d121      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d11a      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d111      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	3b01      	subs	r3, #1
 8003a82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800

08003aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0cc      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b68      	ldr	r3, [pc, #416]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d90c      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b65      	ldr	r3, [pc, #404]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b63      	ldr	r3, [pc, #396]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0b8      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d020      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b00:	4b59      	ldr	r3, [pc, #356]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4a58      	ldr	r2, [pc, #352]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b18:	4b53      	ldr	r3, [pc, #332]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a52      	ldr	r2, [pc, #328]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b24:	4b50      	ldr	r3, [pc, #320]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	494d      	ldr	r1, [pc, #308]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d044      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4b47      	ldr	r3, [pc, #284]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d119      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e07f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e06f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e067      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8a:	4b37      	ldr	r3, [pc, #220]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4934      	ldr	r1, [pc, #208]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7fe fca8 	bl	80024f0 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7fe fca4 	bl	80024f0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e04f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b2b      	ldr	r3, [pc, #172]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 020c 	and.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1eb      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b25      	ldr	r3, [pc, #148]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d20c      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b22      	ldr	r3, [pc, #136]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b20      	ldr	r3, [pc, #128]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e032      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c00:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4916      	ldr	r1, [pc, #88]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1e:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	490e      	ldr	r1, [pc, #56]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c32:	f000 f889 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	490a      	ldr	r1, [pc, #40]	@ (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	5ccb      	ldrb	r3, [r1, r3]
 8003c46:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4a:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fc08 	bl	8002468 <HAL_InitTick>

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023c00 	.word	0x40023c00
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	08009ed8 	.word	0x08009ed8
 8003c70:	20000004 	.word	0x20000004
 8003c74:	20000008 	.word	0x20000008

08003c78 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	@ 0x30
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d129      	bne.n	8003cde <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4a2a      	ldr	r2, [pc, #168]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4b28      	ldr	r3, [pc, #160]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003ca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cac:	2302      	movs	r3, #2
 8003cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003cbc:	f107 031c 	add.w	r3, r7, #28
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	481f      	ldr	r0, [pc, #124]	@ (8003d40 <HAL_RCC_MCOConfig+0xc8>)
 8003cc4:	f7fe fde8 	bl	8002898 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	4919      	ldr	r1, [pc, #100]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003cdc:	e029      	b.n	8003d32 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	4b16      	ldr	r3, [pc, #88]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a15      	ldr	r2, [pc, #84]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b13      	ldr	r3, [pc, #76]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003cfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d04:	2303      	movs	r3, #3
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003d10:	f107 031c 	add.w	r3, r7, #28
 8003d14:	4619      	mov	r1, r3
 8003d16:	480b      	ldr	r0, [pc, #44]	@ (8003d44 <HAL_RCC_MCOConfig+0xcc>)
 8003d18:	f7fe fdbe 	bl	8002898 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003d1c:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	00d9      	lsls	r1, r3, #3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	4903      	ldr	r1, [pc, #12]	@ (8003d3c <HAL_RCC_MCOConfig+0xc4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
}
 8003d32:	bf00      	nop
 8003d34:	3730      	adds	r7, #48	@ 0x30
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40020000 	.word	0x40020000
 8003d44:	40020800 	.word	0x40020800

08003d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b090      	sub	sp, #64	@ 0x40
 8003d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d60:	4b59      	ldr	r3, [pc, #356]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 030c 	and.w	r3, r3, #12
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d00d      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x40>
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	f200 80a1 	bhi.w	8003eb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x34>
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d003      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d7a:	e09b      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4b53      	ldr	r3, [pc, #332]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8003d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d80:	e09b      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d82:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d86:	e098      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d88:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d92:	4b4d      	ldr	r3, [pc, #308]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d028      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	2200      	movs	r2, #0
 8003da6:	623b      	str	r3, [r7, #32]
 8003da8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003db0:	2100      	movs	r1, #0
 8003db2:	4b47      	ldr	r3, [pc, #284]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003db4:	fb03 f201 	mul.w	r2, r3, r1
 8003db8:	2300      	movs	r3, #0
 8003dba:	fb00 f303 	mul.w	r3, r0, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4a43      	ldr	r2, [pc, #268]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dc2:	fba0 1202 	umull	r1, r2, r0, r2
 8003dc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc8:	460a      	mov	r2, r1
 8003dca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dce:	4413      	add	r3, r2
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	61fa      	str	r2, [r7, #28]
 8003dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003de2:	f7fc fa55 	bl	8000290 <__aeabi_uldivmod>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4613      	mov	r3, r2
 8003dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dee:	e053      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df0:	4b35      	ldr	r3, [pc, #212]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	2200      	movs	r2, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	617a      	str	r2, [r7, #20]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e02:	f04f 0b00 	mov.w	fp, #0
 8003e06:	4652      	mov	r2, sl
 8003e08:	465b      	mov	r3, fp
 8003e0a:	f04f 0000 	mov.w	r0, #0
 8003e0e:	f04f 0100 	mov.w	r1, #0
 8003e12:	0159      	lsls	r1, r3, #5
 8003e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e18:	0150      	lsls	r0, r2, #5
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e22:	eb63 090b 	sbc.w	r9, r3, fp
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	00eb      	lsls	r3, r5, #3
 8003e4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e50:	00e2      	lsls	r2, r4, #3
 8003e52:	4614      	mov	r4, r2
 8003e54:	461d      	mov	r5, r3
 8003e56:	eb14 030a 	adds.w	r3, r4, sl
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	eb45 030b 	adc.w	r3, r5, fp
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e6e:	4629      	mov	r1, r5
 8003e70:	028b      	lsls	r3, r1, #10
 8003e72:	4621      	mov	r1, r4
 8003e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e78:	4621      	mov	r1, r4
 8003e7a:	028a      	lsls	r2, r1, #10
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e82:	2200      	movs	r2, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	60fa      	str	r2, [r7, #12]
 8003e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e8c:	f7fc fa00 	bl	8000290 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4613      	mov	r3, r2
 8003e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ea8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8003eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3740      	adds	r7, #64	@ 0x40
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	00f42400 	.word	0x00f42400
 8003ed0:	017d7840 	.word	0x017d7840

08003ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	@ (8003ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ef0:	f7ff fff0 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0a9b      	lsrs	r3, r3, #10
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4903      	ldr	r1, [pc, #12]	@ (8003f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	08009ee8 	.word	0x08009ee8

08003f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f18:	f7ff ffdc 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	0b5b      	lsrs	r3, r3, #13
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	4903      	ldr	r1, [pc, #12]	@ (8003f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f2a:	5ccb      	ldrb	r3, [r1, r3]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40023800 	.word	0x40023800
 8003f38:	08009ee8 	.word	0x08009ee8

08003f3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d038      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f64:	4b68      	ldr	r3, [pc, #416]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f6a:	f7fe fac1 	bl	80024f0 <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f72:	f7fe fabd 	bl	80024f0 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e0bd      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f84:	4b61      	ldr	r3, [pc, #388]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f0      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	019b      	lsls	r3, r3, #6
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	071b      	lsls	r3, r3, #28
 8003fa2:	495a      	ldr	r1, [pc, #360]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003faa:	4b57      	ldr	r3, [pc, #348]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fb0:	f7fe fa9e 	bl	80024f0 <HAL_GetTick>
 8003fb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fb8:	f7fe fa9a 	bl	80024f0 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e09a      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fca:	4b50      	ldr	r3, [pc, #320]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8083 	beq.w	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	4b48      	ldr	r3, [pc, #288]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	4a47      	ldr	r2, [pc, #284]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ff4:	4b45      	ldr	r3, [pc, #276]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004000:	4b43      	ldr	r3, [pc, #268]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a42      	ldr	r2, [pc, #264]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800400c:	f7fe fa70 	bl	80024f0 <HAL_GetTick>
 8004010:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004014:	f7fe fa6c 	bl	80024f0 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e06c      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004026:	4b3a      	ldr	r3, [pc, #232]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004032:	4b36      	ldr	r3, [pc, #216]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800403a:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d02f      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	429a      	cmp	r2, r3
 800404e:	d028      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004050:	4b2e      	ldr	r3, [pc, #184]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004058:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800405a:	4b2e      	ldr	r3, [pc, #184]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004060:	4b2c      	ldr	r3, [pc, #176]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004066:	4a29      	ldr	r2, [pc, #164]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800406c:	4b27      	ldr	r3, [pc, #156]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d114      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004078:	f7fe fa3a 	bl	80024f0 <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407e:	e00a      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fe fa36 	bl	80024f0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e034      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004096:	4b1d      	ldr	r3, [pc, #116]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0ee      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ae:	d10d      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80040b0:	4b16      	ldr	r3, [pc, #88]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80040c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c4:	4911      	ldr	r1, [pc, #68]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
 80040ca:	e005      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80040cc:	4b0f      	ldr	r3, [pc, #60]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a0e      	ldr	r2, [pc, #56]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80040d6:	6093      	str	r3, [r2, #8]
 80040d8:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e4:	4909      	ldr	r1, [pc, #36]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	7d1a      	ldrb	r2, [r3, #20]
 80040fa:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80040fc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	42470068 	.word	0x42470068
 800410c:	40023800 	.word	0x40023800
 8004110:	40007000 	.word	0x40007000
 8004114:	42470e40 	.word	0x42470e40
 8004118:	424711e0 	.word	0x424711e0

0800411c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e073      	b.n	800421a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	7f5b      	ldrb	r3, [r3, #29]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd ffc6 	bl	80020d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b10      	cmp	r3, #16
 800415a:	d055      	beq.n	8004208 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	22ca      	movs	r2, #202	@ 0xca
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2253      	movs	r2, #83	@ 0x53
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fa49 	bl	8004604 <RTC_EnterInitMode>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d12c      	bne.n	80041d6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800418a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800418e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6899      	ldr	r1, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68d2      	ldr	r2, [r2, #12]
 80041b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6919      	ldr	r1, [r3, #16]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	041a      	lsls	r2, r3, #16
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fa50 	bl	8004672 <RTC_ExitInitMode>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d110      	bne.n	80041fe <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041ea:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	22ff      	movs	r2, #255	@ 0xff
 8004204:	625a      	str	r2, [r3, #36]	@ 0x24
 8004206:	e001      	b.n	800420c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004222:	b590      	push	{r4, r7, lr}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	7f1b      	ldrb	r3, [r3, #28]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_RTC_SetTime+0x1c>
 800423a:	2302      	movs	r3, #2
 800423c:	e087      	b.n	800434e <HAL_RTC_SetTime+0x12c>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2202      	movs	r2, #2
 8004248:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d126      	bne.n	800429e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fa27 	bl	80046bc <RTC_ByteToBcd2>
 800426e:	4603      	mov	r3, r0
 8004270:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fa20 	bl	80046bc <RTC_ByteToBcd2>
 800427c:	4603      	mov	r3, r0
 800427e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004280:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	789b      	ldrb	r3, [r3, #2]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fa18 	bl	80046bc <RTC_ByteToBcd2>
 800428c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800428e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	78db      	ldrb	r3, [r3, #3]
 8004296:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e018      	b.n	80042d0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2200      	movs	r2, #0
 80042b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80042be:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80042c4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	78db      	ldrb	r3, [r3, #3]
 80042ca:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	22ca      	movs	r2, #202	@ 0xca
 80042d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2253      	movs	r2, #83	@ 0x53
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f98f 	bl	8004604 <RTC_EnterInitMode>
 80042e6:	4603      	mov	r3, r0
 80042e8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d120      	bne.n	8004332 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80042fa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80042fe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800430e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6899      	ldr	r1, [r3, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	431a      	orrs	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f9a2 	bl	8004672 <RTC_ExitInitMode>
 800432e:	4603      	mov	r3, r0
 8004330:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	22ff      	movs	r2, #255	@ 0xff
 8004344:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]

  return status;
 800434c:	7cfb      	ldrb	r3, [r7, #19]
}
 800434e:	4618      	mov	r0, r3
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd90      	pop	{r4, r7, pc}

08004356 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004388:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800438c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	0a1b      	lsrs	r3, r3, #8
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	0d9b      	lsrs	r3, r3, #22
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11a      	bne.n	8004408 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f98e 	bl	80046f8 <RTC_Bcd2ToByte>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	785b      	ldrb	r3, [r3, #1]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f985 	bl	80046f8 <RTC_Bcd2ToByte>
 80043ee:	4603      	mov	r3, r0
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	789b      	ldrb	r3, [r3, #2]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f97c 	bl	80046f8 <RTC_Bcd2ToByte>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004412:	b590      	push	{r4, r7, lr}
 8004414:	b087      	sub	sp, #28
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	7f1b      	ldrb	r3, [r3, #28]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_RTC_SetDate+0x1c>
 800442a:	2302      	movs	r3, #2
 800442c:	e071      	b.n	8004512 <HAL_RTC_SetDate+0x100>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2202      	movs	r2, #2
 8004438:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10e      	bne.n	800445e <HAL_RTC_SetDate+0x4c>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	f023 0310 	bic.w	r3, r3, #16
 8004454:	b2db      	uxtb	r3, r3
 8004456:	330a      	adds	r3, #10
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11c      	bne.n	800449e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	78db      	ldrb	r3, [r3, #3]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 f927 	bl	80046bc <RTC_ByteToBcd2>
 800446e:	4603      	mov	r3, r0
 8004470:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f920 	bl	80046bc <RTC_ByteToBcd2>
 800447c:	4603      	mov	r3, r0
 800447e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004480:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	789b      	ldrb	r3, [r3, #2]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f918 	bl	80046bc <RTC_ByteToBcd2>
 800448c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800448e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e00e      	b.n	80044bc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	78db      	ldrb	r3, [r3, #3]
 80044a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	785b      	ldrb	r3, [r3, #1]
 80044a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80044aa:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80044b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	22ca      	movs	r2, #202	@ 0xca
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2253      	movs	r2, #83	@ 0x53
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f899 	bl	8004604 <RTC_EnterInitMode>
 80044d2:	4603      	mov	r3, r0
 80044d4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10c      	bne.n	80044f6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80044ea:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f8c0 	bl	8004672 <RTC_ExitInitMode>
 80044f2:	4603      	mov	r3, r0
 80044f4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80044f6:	7cfb      	ldrb	r3, [r7, #19]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	22ff      	movs	r2, #255	@ 0xff
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]

  return status;
 8004510:	7cfb      	ldrb	r3, [r7, #19]
}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd90      	pop	{r4, r7, pc}

0800451a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004534:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004538:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	0b5b      	lsrs	r3, r3, #13
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d11a      	bne.n	80045ae <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	78db      	ldrb	r3, [r3, #3]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f8bb 	bl	80046f8 <RTC_Bcd2ToByte>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	785b      	ldrb	r3, [r3, #1]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f8b2 	bl	80046f8 <RTC_Bcd2ToByte>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	789b      	ldrb	r3, [r3, #2]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 f8a9 	bl	80046f8 <RTC_Bcd2ToByte>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004600 <HAL_RTC_WaitForSynchro+0x48>)
 80045ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045cc:	f7fd ff90 	bl	80024f0 <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045d2:	e009      	b.n	80045e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045d4:	f7fd ff8c 	bl	80024f0 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045e2:	d901      	bls.n	80045e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e007      	b.n	80045f8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ee      	beq.n	80045d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	00013f5f 	.word	0x00013f5f

08004604 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d122      	bne.n	8004668 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004630:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004632:	f7fd ff5d 	bl	80024f0 <HAL_GetTick>
 8004636:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004638:	e00c      	b.n	8004654 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800463a:	f7fd ff59 	bl	80024f0 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004648:	d904      	bls.n	8004654 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2204      	movs	r2, #4
 800464e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <RTC_EnterInitMode+0x64>
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d1e8      	bne.n	800463a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800468c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff8b 	bl	80045b8 <HAL_RTC_WaitForSynchro>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d004      	beq.n	80046b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2204      	movs	r2, #4
 80046ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80046ca:	e005      	b.n	80046d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	3b0a      	subs	r3, #10
 80046d6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b09      	cmp	r3, #9
 80046dc:	d8f6      	bhi.n	80046cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	b2db      	uxtb	r3, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	b2db      	uxtb	r3, r3
 8004724:	4413      	add	r3, r2
 8004726:	b2db      	uxtb	r3, r3
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3350      	adds	r3, #80	@ 0x50
 800474a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4413      	add	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	601a      	str	r2, [r3, #0]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3350      	adds	r3, #80	@ 0x50
 800477c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e07b      	b.n	80048a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d108      	bne.n	80047c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ba:	d009      	beq.n	80047d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	61da      	str	r2, [r3, #28]
 80047c2:	e005      	b.n	80047d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fc9e 	bl	800212c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004806:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004854:	ea42 0103 	orr.w	r1, r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	f003 0104 	and.w	r1, r3, #4
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	f003 0210 	and.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004890:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b088      	sub	sp, #32
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ba:	f7fd fe19 	bl	80024f0 <HAL_GetTick>
 80048be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d001      	beq.n	80048d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
 80048d2:	e12a      	b.n	8004b2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_SPI_Transmit+0x36>
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e122      	b.n	8004b2a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_SPI_Transmit+0x48>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e11b      	b.n	8004b2a <HAL_SPI_Transmit+0x280>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004940:	d10f      	bne.n	8004962 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004950:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004960:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	2b40      	cmp	r3, #64	@ 0x40
 800496e:	d007      	beq.n	8004980 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800497e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004988:	d152      	bne.n	8004a30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_SPI_Transmit+0xee>
 8004992:	8b7b      	ldrh	r3, [r7, #26]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d145      	bne.n	8004a24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499c:	881a      	ldrh	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a8:	1c9a      	adds	r2, r3, #2
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049bc:	e032      	b.n	8004a24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d112      	bne.n	80049f2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d0:	881a      	ldrh	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	1c9a      	adds	r2, r3, #2
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049f0:	e018      	b.n	8004a24 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f2:	f7fd fd7d 	bl	80024f0 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d803      	bhi.n	8004a0a <HAL_SPI_Transmit+0x160>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d102      	bne.n	8004a10 <HAL_SPI_Transmit+0x166>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e082      	b.n	8004b2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1c7      	bne.n	80049be <HAL_SPI_Transmit+0x114>
 8004a2e:	e053      	b.n	8004ad8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_SPI_Transmit+0x194>
 8004a38:	8b7b      	ldrh	r3, [r7, #26]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d147      	bne.n	8004ace <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	7812      	ldrb	r2, [r2, #0]
 8004a4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a64:	e033      	b.n	8004ace <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d113      	bne.n	8004a9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	7812      	ldrb	r2, [r2, #0]
 8004a80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a9a:	e018      	b.n	8004ace <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a9c:	f7fd fd28 	bl	80024f0 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d803      	bhi.n	8004ab4 <HAL_SPI_Transmit+0x20a>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d102      	bne.n	8004aba <HAL_SPI_Transmit+0x210>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e02d      	b.n	8004b2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1c6      	bne.n	8004a66 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	6839      	ldr	r1, [r7, #0]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fa59 	bl	8004f94 <SPI_EndRxTxTransaction>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004b28:	2300      	movs	r3, #0
  }
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b08a      	sub	sp, #40	@ 0x28
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b40:	2301      	movs	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b44:	f7fd fcd4 	bl	80024f0 <HAL_GetTick>
 8004b48:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b50:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b5c:	7ffb      	ldrb	r3, [r7, #31]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d00c      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x4a>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b68:	d106      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d102      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x46>
 8004b72:	7ffb      	ldrb	r3, [r7, #31]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d001      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e17f      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_SPI_TransmitReceive+0x5c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_SPI_TransmitReceive+0x5c>
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e174      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x6e>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e16d      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x34a>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d003      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	887a      	ldrh	r2, [r7, #2]
 8004bd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	887a      	ldrh	r2, [r7, #2]
 8004bde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	887a      	ldrh	r2, [r7, #2]
 8004be4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c18:	d17e      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0xf6>
 8004c22:	8afb      	ldrh	r3, [r7, #22]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d16c      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c4c:	e059      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d11b      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x162>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d016      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x162>
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d113      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c70:	881a      	ldrh	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7c:	1c9a      	adds	r2, r3, #2
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d119      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x1a4>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d014      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	b292      	uxth	r2, r2
 8004cb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbe:	1c9a      	adds	r2, r3, #2
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cd6:	f7fd fc0b 	bl	80024f0 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d80d      	bhi.n	8004d02 <HAL_SPI_TransmitReceive+0x1d0>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d009      	beq.n	8004d02 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e0bc      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1a0      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x11c>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d19b      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x11c>
 8004d16:	e082      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x1f4>
 8004d20:	8afb      	ldrh	r3, [r7, #22]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d171      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	330c      	adds	r3, #12
 8004d30:	7812      	ldrb	r2, [r2, #0]
 8004d32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d4c:	e05d      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d11c      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x264>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d017      	beq.n	8004d96 <HAL_SPI_TransmitReceive+0x264>
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d114      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d119      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x2a6>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d014      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004dd8:	f7fd fb8a 	bl	80024f0 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d803      	bhi.n	8004df0 <HAL_SPI_TransmitReceive+0x2be>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d102      	bne.n	8004df6 <HAL_SPI_TransmitReceive+0x2c4>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e038      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d19c      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x21c>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d197      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e1e:	6a3a      	ldr	r2, [r7, #32]
 8004e20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f8b6 	bl	8004f94 <SPI_EndRxTxTransaction>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d008      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e01d      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3728      	adds	r7, #40	@ 0x28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e94:	f7fd fb2c 	bl	80024f0 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ea4:	f7fd fb24 	bl	80024f0 <HAL_GetTick>
 8004ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eaa:	4b39      	ldr	r3, [pc, #228]	@ (8004f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	015b      	lsls	r3, r3, #5
 8004eb0:	0d1b      	lsrs	r3, r3, #20
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eba:	e054      	b.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d050      	beq.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ec4:	f7fd fb14 	bl	80024f0 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d902      	bls.n	8004eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d13d      	bne.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef2:	d111      	bne.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004efc:	d004      	beq.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f06:	d107      	bne.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f20:	d10f      	bne.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e017      	b.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d19b      	bne.n	8004ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000004 	.word	0x20000004

08004f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	2102      	movs	r1, #2
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff ff6a 	bl	8004e84 <SPI_WaitFlagStateUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e032      	b.n	800502c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <SPI_EndRxTxTransaction+0xa0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1b      	ldr	r2, [pc, #108]	@ (8005038 <SPI_EndRxTxTransaction+0xa4>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	0d5b      	lsrs	r3, r3, #21
 8004fd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe4:	d112      	bne.n	800500c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2180      	movs	r1, #128	@ 0x80
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f7ff ff47 	bl	8004e84 <SPI_WaitFlagStateUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d016      	beq.n	800502a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005000:	f043 0220 	orr.w	r2, r3, #32
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e00f      	b.n	800502c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3b01      	subs	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005022:	2b80      	cmp	r3, #128	@ 0x80
 8005024:	d0f2      	beq.n	800500c <SPI_EndRxTxTransaction+0x78>
 8005026:	e000      	b.n	800502a <SPI_EndRxTxTransaction+0x96>
        break;
 8005028:	bf00      	nop
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000004 	.word	0x20000004
 8005038:	165e9f81 	.word	0x165e9f81

0800503c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e042      	b.n	80050d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fd f8aa 	bl	80021bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2224      	movs	r2, #36	@ 0x24
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800507e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fcdb 	bl	8005a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d112      	bne.n	800511c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HAL_UART_Receive_IT+0x26>
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e00b      	b.n	800511e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	461a      	mov	r2, r3
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 faba 	bl	800568c <UART_Start_Receive_IT>
 8005118:	4603      	mov	r3, r0
 800511a:	e000      	b.n	800511e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800511c:	2302      	movs	r3, #2
  }
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b0ba      	sub	sp, #232	@ 0xe8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005154:	2300      	movs	r3, #0
 8005156:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10f      	bne.n	800518e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_UART_IRQHandler+0x66>
 800517a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fb99 	bl	80058be <UART_Receive_IT>
      return;
 800518c:	e25b      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800518e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80de 	beq.w	8005354 <HAL_UART_IRQHandler+0x22c>
 8005198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80d1 	beq.w	8005354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_UART_IRQHandler+0xae>
 80051be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	f043 0201 	orr.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_IRQHandler+0xd2>
 80051e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	f043 0202 	orr.w	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_UART_IRQHandler+0xf6>
 8005206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005216:	f043 0204 	orr.w	r2, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d011      	beq.n	800524e <HAL_UART_IRQHandler+0x126>
 800522a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	f043 0208 	orr.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 81f2 	beq.w	800563c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_UART_IRQHandler+0x14e>
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fb24 	bl	80058be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005280:	2b40      	cmp	r3, #64	@ 0x40
 8005282:	bf0c      	ite	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	2300      	movne	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_UART_IRQHandler+0x17a>
 800529a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d04f      	beq.n	8005342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa2c 	bl	8005700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b2:	2b40      	cmp	r3, #64	@ 0x40
 80052b4:	d141      	bne.n	800533a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3314      	adds	r3, #20
 80052de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80052fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1d9      	bne.n	80052b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d013      	beq.n	8005332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530e:	4a7e      	ldr	r2, [pc, #504]	@ (8005508 <HAL_UART_IRQHandler+0x3e0>)
 8005310:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005316:	4618      	mov	r0, r3
 8005318:	f7fd fa9b 	bl	8002852 <HAL_DMA_Abort_IT>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d016      	beq.n	8005350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	e00e      	b.n	8005350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f994 	bl	8005660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005338:	e00a      	b.n	8005350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f990 	bl	8005660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	e006      	b.n	8005350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f98c 	bl	8005660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800534e:	e175      	b.n	800563c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	bf00      	nop
    return;
 8005352:	e173      	b.n	800563c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005358:	2b01      	cmp	r3, #1
 800535a:	f040 814f 	bne.w	80055fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8148 	beq.w	80055fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800536c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8141 	beq.w	80055fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539a:	2b40      	cmp	r3, #64	@ 0x40
 800539c:	f040 80b6 	bne.w	800550c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8145 	beq.w	8005640 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053be:	429a      	cmp	r2, r3
 80053c0:	f080 813e 	bcs.w	8005640 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d6:	f000 8088 	beq.w	80054ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005406:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800540a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005412:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800541e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1d9      	bne.n	80053da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3314      	adds	r3, #20
 8005446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800544a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800544e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005452:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800545c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e1      	bne.n	8005426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3314      	adds	r3, #20
 8005482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005486:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005488:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800548c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e3      	bne.n	8005462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ba:	f023 0310 	bic.w	r3, r3, #16
 80054be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e3      	bne.n	80054a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fd f944 	bl	8002772 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f8b7 	bl	8005674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005506:	e09b      	b.n	8005640 <HAL_UART_IRQHandler+0x518>
 8005508:	080057c7 	.word	0x080057c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005514:	b29b      	uxth	r3, r3
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 808e 	beq.w	8005644 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8089 	beq.w	8005644 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330c      	adds	r3, #12
 8005538:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005556:	647a      	str	r2, [r7, #68]	@ 0x44
 8005558:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800555c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e3      	bne.n	8005532 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	623b      	str	r3, [r7, #32]
   return(result);
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3314      	adds	r3, #20
 800558a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800558e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005590:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e3      	bne.n	800556a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	60fb      	str	r3, [r7, #12]
   return(result);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0310 	bic.w	r3, r3, #16
 80055c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055d4:	61fa      	str	r2, [r7, #28]
 80055d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	69b9      	ldr	r1, [r7, #24]
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	617b      	str	r3, [r7, #20]
   return(result);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e3      	bne.n	80055b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f83d 	bl	8005674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055fa:	e023      	b.n	8005644 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <HAL_UART_IRQHandler+0x4f4>
 8005608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f8ea 	bl	80057ee <UART_Transmit_IT>
    return;
 800561a:	e014      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800561c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <HAL_UART_IRQHandler+0x51e>
 8005628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f92a 	bl	800588e <UART_EndTransmit_IT>
    return;
 800563a:	e004      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
    return;
 800563c:	bf00      	nop
 800563e:	e002      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
      return;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
      return;
 8005644:	bf00      	nop
  }
}
 8005646:	37e8      	adds	r7, #232	@ 0xe8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	88fa      	ldrh	r2, [r7, #6]
 80056a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2222      	movs	r2, #34	@ 0x22
 80056b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0220 	orr.w	r2, r2, #32
 80056f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005700:	b480      	push	{r7}
 8005702:	b095      	sub	sp, #84	@ 0x54
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800571e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005728:	643a      	str	r2, [r7, #64]	@ 0x40
 800572a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800572e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3314      	adds	r3, #20
 8005742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	61fb      	str	r3, [r7, #28]
   return(result);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3314      	adds	r3, #20
 800575a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800575c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800575e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005774:	2b01      	cmp	r3, #1
 8005776:	d119      	bne.n	80057ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	60bb      	str	r3, [r7, #8]
   return(result);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f023 0310 	bic.w	r3, r3, #16
 800578e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005798:	61ba      	str	r2, [r7, #24]
 800579a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6979      	ldr	r1, [r7, #20]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	613b      	str	r3, [r7, #16]
   return(result);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e5      	bne.n	8005778 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057ba:	bf00      	nop
 80057bc:	3754      	adds	r7, #84	@ 0x54
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7ff ff3d 	bl	8005660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b21      	cmp	r3, #33	@ 0x21
 8005800:	d13e      	bne.n	8005880 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800580a:	d114      	bne.n	8005836 <UART_Transmit_IT+0x48>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d110      	bne.n	8005836 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005828:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	1c9a      	adds	r2, r3, #2
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	621a      	str	r2, [r3, #32]
 8005834:	e008      	b.n	8005848 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	1c59      	adds	r1, r3, #1
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6211      	str	r1, [r2, #32]
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29b      	uxth	r3, r3
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4619      	mov	r1, r3
 8005856:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10f      	bne.n	800587c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800586a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800587a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff fecc 	bl	800564c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b08c      	sub	sp, #48	@ 0x30
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b22      	cmp	r3, #34	@ 0x22
 80058d0:	f040 80ae 	bne.w	8005a30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058dc:	d117      	bne.n	800590e <UART_Receive_IT+0x50>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d113      	bne.n	800590e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005900:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	1c9a      	adds	r2, r3, #2
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	629a      	str	r2, [r3, #40]	@ 0x28
 800590c:	e026      	b.n	800595c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005920:	d007      	beq.n	8005932 <UART_Receive_IT+0x74>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <UART_Receive_IT+0x82>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	b2da      	uxtb	r2, r3
 800593a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	e008      	b.n	8005952 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800594c:	b2da      	uxtb	r2, r3
 800594e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005950:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29b      	uxth	r3, r3
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4619      	mov	r1, r3
 800596a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800596c:	2b00      	cmp	r3, #0
 800596e:	d15d      	bne.n	8005a2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0220 	bic.w	r2, r2, #32
 800597e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800598e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d135      	bne.n	8005a22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	613b      	str	r3, [r7, #16]
   return(result);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f023 0310 	bic.w	r3, r3, #16
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059dc:	623a      	str	r2, [r7, #32]
 80059de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	69f9      	ldr	r1, [r7, #28]
 80059e2:	6a3a      	ldr	r2, [r7, #32]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b10      	cmp	r3, #16
 80059fc:	d10a      	bne.n	8005a14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff fe2a 	bl	8005674 <HAL_UARTEx_RxEventCallback>
 8005a20:	e002      	b.n	8005a28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fa fdac 	bl	8000580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e002      	b.n	8005a32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e000      	b.n	8005a32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3730      	adds	r7, #48	@ 0x30
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a40:	b0c0      	sub	sp, #256	@ 0x100
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a58:	68d9      	ldr	r1, [r3, #12]
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	ea40 0301 	orr.w	r3, r0, r1
 8005a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a94:	f021 010c 	bic.w	r1, r1, #12
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab6:	6999      	ldr	r1, [r3, #24]
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	ea40 0301 	orr.w	r3, r0, r1
 8005ac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b8f      	ldr	r3, [pc, #572]	@ (8005d08 <UART_SetConfig+0x2cc>)
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d005      	beq.n	8005adc <UART_SetConfig+0xa0>
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8005d0c <UART_SetConfig+0x2d0>)
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d104      	bne.n	8005ae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005adc:	f7fe fa1a 	bl	8003f14 <HAL_RCC_GetPCLK2Freq>
 8005ae0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ae4:	e003      	b.n	8005aee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ae6:	f7fe fa01 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8005aea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af8:	f040 810c 	bne.w	8005d14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b0e:	4622      	mov	r2, r4
 8005b10:	462b      	mov	r3, r5
 8005b12:	1891      	adds	r1, r2, r2
 8005b14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b16:	415b      	adcs	r3, r3
 8005b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b1e:	4621      	mov	r1, r4
 8005b20:	eb12 0801 	adds.w	r8, r2, r1
 8005b24:	4629      	mov	r1, r5
 8005b26:	eb43 0901 	adc.w	r9, r3, r1
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b3e:	4690      	mov	r8, r2
 8005b40:	4699      	mov	r9, r3
 8005b42:	4623      	mov	r3, r4
 8005b44:	eb18 0303 	adds.w	r3, r8, r3
 8005b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b4c:	462b      	mov	r3, r5
 8005b4e:	eb49 0303 	adc.w	r3, r9, r3
 8005b52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	18db      	adds	r3, r3, r3
 8005b6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b70:	4613      	mov	r3, r2
 8005b72:	eb42 0303 	adc.w	r3, r2, r3
 8005b76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b80:	f7fa fb86 	bl	8000290 <__aeabi_uldivmod>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4b61      	ldr	r3, [pc, #388]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	011c      	lsls	r4, r3, #4
 8005b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	1891      	adds	r1, r2, r2
 8005baa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bac:	415b      	adcs	r3, r3
 8005bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	eb12 0a01 	adds.w	sl, r2, r1
 8005bba:	4649      	mov	r1, r9
 8005bbc:	eb43 0b01 	adc.w	fp, r3, r1
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bd4:	4692      	mov	sl, r2
 8005bd6:	469b      	mov	fp, r3
 8005bd8:	4643      	mov	r3, r8
 8005bda:	eb1a 0303 	adds.w	r3, sl, r3
 8005bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005be2:	464b      	mov	r3, r9
 8005be4:	eb4b 0303 	adc.w	r3, fp, r3
 8005be8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c00:	460b      	mov	r3, r1
 8005c02:	18db      	adds	r3, r3, r3
 8005c04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c06:	4613      	mov	r3, r2
 8005c08:	eb42 0303 	adc.w	r3, r2, r3
 8005c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c16:	f7fa fb3b 	bl	8000290 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4b3b      	ldr	r3, [pc, #236]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005c22:	fba3 2301 	umull	r2, r3, r3, r1
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	2264      	movs	r2, #100	@ 0x64
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	1acb      	subs	r3, r1, r3
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c36:	4b36      	ldr	r3, [pc, #216]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005c38:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c44:	441c      	add	r4, r3
 8005c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c58:	4642      	mov	r2, r8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	1891      	adds	r1, r2, r2
 8005c5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c60:	415b      	adcs	r3, r3
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c68:	4641      	mov	r1, r8
 8005c6a:	1851      	adds	r1, r2, r1
 8005c6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c6e:	4649      	mov	r1, r9
 8005c70:	414b      	adcs	r3, r1
 8005c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c80:	4659      	mov	r1, fp
 8005c82:	00cb      	lsls	r3, r1, #3
 8005c84:	4651      	mov	r1, sl
 8005c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	00ca      	lsls	r2, r1, #3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	4642      	mov	r2, r8
 8005c96:	189b      	adds	r3, r3, r2
 8005c98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	eb42 0303 	adc.w	r3, r2, r3
 8005ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cb4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	18db      	adds	r3, r3, r3
 8005cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	eb42 0303 	adc.w	r3, r2, r3
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cd2:	f7fa fadd 	bl	8000290 <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	@ 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	3332      	adds	r3, #50	@ 0x32
 8005cee:	4a08      	ldr	r2, [pc, #32]	@ (8005d10 <UART_SetConfig+0x2d4>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 0207 	and.w	r2, r3, #7
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4422      	add	r2, r4
 8005d02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d04:	e106      	b.n	8005f14 <UART_SetConfig+0x4d8>
 8005d06:	bf00      	nop
 8005d08:	40011000 	.word	0x40011000
 8005d0c:	40011400 	.word	0x40011400
 8005d10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d26:	4642      	mov	r2, r8
 8005d28:	464b      	mov	r3, r9
 8005d2a:	1891      	adds	r1, r2, r2
 8005d2c:	6239      	str	r1, [r7, #32]
 8005d2e:	415b      	adcs	r3, r3
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d36:	4641      	mov	r1, r8
 8005d38:	1854      	adds	r4, r2, r1
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	eb43 0501 	adc.w	r5, r3, r1
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	00eb      	lsls	r3, r5, #3
 8005d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d4e:	00e2      	lsls	r2, r4, #3
 8005d50:	4614      	mov	r4, r2
 8005d52:	461d      	mov	r5, r3
 8005d54:	4643      	mov	r3, r8
 8005d56:	18e3      	adds	r3, r4, r3
 8005d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	eb45 0303 	adc.w	r3, r5, r3
 8005d62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d82:	4629      	mov	r1, r5
 8005d84:	008b      	lsls	r3, r1, #2
 8005d86:	4621      	mov	r1, r4
 8005d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	008a      	lsls	r2, r1, #2
 8005d90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d94:	f7fa fa7c 	bl	8000290 <__aeabi_uldivmod>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4b60      	ldr	r3, [pc, #384]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	011c      	lsls	r4, r3, #4
 8005da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005db0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005db4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005db8:	4642      	mov	r2, r8
 8005dba:	464b      	mov	r3, r9
 8005dbc:	1891      	adds	r1, r2, r2
 8005dbe:	61b9      	str	r1, [r7, #24]
 8005dc0:	415b      	adcs	r3, r3
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dc8:	4641      	mov	r1, r8
 8005dca:	1851      	adds	r1, r2, r1
 8005dcc:	6139      	str	r1, [r7, #16]
 8005dce:	4649      	mov	r1, r9
 8005dd0:	414b      	adcs	r3, r1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005de0:	4659      	mov	r1, fp
 8005de2:	00cb      	lsls	r3, r1, #3
 8005de4:	4651      	mov	r1, sl
 8005de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dea:	4651      	mov	r1, sl
 8005dec:	00ca      	lsls	r2, r1, #3
 8005dee:	4610      	mov	r0, r2
 8005df0:	4619      	mov	r1, r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	4642      	mov	r2, r8
 8005df6:	189b      	adds	r3, r3, r2
 8005df8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	460a      	mov	r2, r1
 8005e00:	eb42 0303 	adc.w	r3, r2, r3
 8005e04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e20:	4649      	mov	r1, r9
 8005e22:	008b      	lsls	r3, r1, #2
 8005e24:	4641      	mov	r1, r8
 8005e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e2a:	4641      	mov	r1, r8
 8005e2c:	008a      	lsls	r2, r1, #2
 8005e2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e32:	f7fa fa2d 	bl	8000290 <__aeabi_uldivmod>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4b38      	ldr	r3, [pc, #224]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	2264      	movs	r2, #100	@ 0x64
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	1acb      	subs	r3, r1, r3
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	3332      	adds	r3, #50	@ 0x32
 8005e50:	4a33      	ldr	r2, [pc, #204]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e5c:	441c      	add	r4, r3
 8005e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e62:	2200      	movs	r2, #0
 8005e64:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e66:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	464b      	mov	r3, r9
 8005e70:	1891      	adds	r1, r2, r2
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	415b      	adcs	r3, r3
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	1851      	adds	r1, r2, r1
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	4649      	mov	r1, r9
 8005e84:	414b      	adcs	r3, r1
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e94:	4659      	mov	r1, fp
 8005e96:	00cb      	lsls	r3, r1, #3
 8005e98:	4651      	mov	r1, sl
 8005e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e9e:	4651      	mov	r1, sl
 8005ea0:	00ca      	lsls	r2, r1, #3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	189b      	adds	r3, r3, r2
 8005eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eae:	464b      	mov	r3, r9
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	eb42 0303 	adc.w	r3, r2, r3
 8005eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ec2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	008b      	lsls	r3, r1, #2
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eda:	4641      	mov	r1, r8
 8005edc:	008a      	lsls	r2, r1, #2
 8005ede:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ee2:	f7fa f9d5 	bl	8000290 <__aeabi_uldivmod>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005eec:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	2164      	movs	r1, #100	@ 0x64
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	3332      	adds	r3, #50	@ 0x32
 8005efe:	4a08      	ldr	r2, [pc, #32]	@ (8005f20 <UART_SetConfig+0x4e4>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4422      	add	r2, r4
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	bf00      	nop
 8005f16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f20:	51eb851f 	.word	0x51eb851f

08005f24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005f28:	4904      	ldr	r1, [pc, #16]	@ (8005f3c <MX_FATFS_Init+0x18>)
 8005f2a:	4805      	ldr	r0, [pc, #20]	@ (8005f40 <MX_FATFS_Init+0x1c>)
 8005f2c:	f003 f9b2 	bl	8009294 <FATFS_LinkDriver>
 8005f30:	4603      	mov	r3, r0
 8005f32:	461a      	mov	r2, r3
 8005f34:	4b03      	ldr	r3, [pc, #12]	@ (8005f44 <MX_FATFS_Init+0x20>)
 8005f36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005f38:	bf00      	nop
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	2000238c 	.word	0x2000238c
 8005f40:	20000010 	.word	0x20000010
 8005f44:	20002388 	.word	0x20002388

08005f48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005f4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	SD_disk_initialize(pdrv);
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fa fd9d 	bl	8000aa4 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8005f6a:	bf00      	nop
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fa fe7b 	bl	8000c7c <SD_disk_status>
 8005f86:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv,buff,sector,count);
 8005fa0:	7bf8      	ldrb	r0, [r7, #15]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	f7fa fe7e 	bl	8000ca8 <SD_disk_read>
 8005fac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005fc6:	7bf8      	ldrb	r0, [r7, #15]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	f7fa fed5 	bl	8000d7c <SD_disk_write>
 8005fd2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	603a      	str	r2, [r7, #0]
 8005fe6:	71fb      	strb	r3, [r7, #7]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005fec:	79b9      	ldrb	r1, [r7, #6]
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fa ff46 	bl	8000e84 <SD_disk_ioctl>
 8005ff8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	4603      	mov	r3, r0
 800600c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	4a08      	ldr	r2, [pc, #32]	@ (8006034 <disk_status+0x30>)
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	79fa      	ldrb	r2, [r7, #7]
 800601c:	4905      	ldr	r1, [pc, #20]	@ (8006034 <disk_status+0x30>)
 800601e:	440a      	add	r2, r1
 8006020:	7a12      	ldrb	r2, [r2, #8]
 8006022:	4610      	mov	r0, r2
 8006024:	4798      	blx	r3
 8006026:	4603      	mov	r3, r0
 8006028:	73fb      	strb	r3, [r7, #15]
  return stat;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	200025b8 	.word	0x200025b8

08006038 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	4a0e      	ldr	r2, [pc, #56]	@ (8006084 <disk_initialize+0x4c>)
 800604a:	5cd3      	ldrb	r3, [r2, r3]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d114      	bne.n	800607a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	4a0c      	ldr	r2, [pc, #48]	@ (8006084 <disk_initialize+0x4c>)
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	79fa      	ldrb	r2, [r7, #7]
 800605e:	4909      	ldr	r1, [pc, #36]	@ (8006084 <disk_initialize+0x4c>)
 8006060:	440a      	add	r2, r1
 8006062:	7a12      	ldrb	r2, [r2, #8]
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	4a03      	ldr	r2, [pc, #12]	@ (8006084 <disk_initialize+0x4c>)
 8006076:	2101      	movs	r1, #1
 8006078:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200025b8 	.word	0x200025b8

08006088 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4603      	mov	r3, r0
 8006096:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	4a0a      	ldr	r2, [pc, #40]	@ (80060c4 <disk_read+0x3c>)
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	689c      	ldr	r4, [r3, #8]
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	4a07      	ldr	r2, [pc, #28]	@ (80060c4 <disk_read+0x3c>)
 80060a8:	4413      	add	r3, r2
 80060aa:	7a18      	ldrb	r0, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	47a0      	blx	r4
 80060b4:	4603      	mov	r3, r0
 80060b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd90      	pop	{r4, r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200025b8 	.word	0x200025b8

080060c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80060c8:	b590      	push	{r4, r7, lr}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	4a0a      	ldr	r2, [pc, #40]	@ (8006104 <disk_write+0x3c>)
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	68dc      	ldr	r4, [r3, #12]
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	4a07      	ldr	r2, [pc, #28]	@ (8006104 <disk_write+0x3c>)
 80060e8:	4413      	add	r3, r2
 80060ea:	7a18      	ldrb	r0, [r3, #8]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	47a0      	blx	r4
 80060f4:	4603      	mov	r3, r0
 80060f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd90      	pop	{r4, r7, pc}
 8006102:	bf00      	nop
 8006104:	200025b8 	.word	0x200025b8

08006108 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	603a      	str	r2, [r7, #0]
 8006112:	71fb      	strb	r3, [r7, #7]
 8006114:	460b      	mov	r3, r1
 8006116:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	4a09      	ldr	r2, [pc, #36]	@ (8006140 <disk_ioctl+0x38>)
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	79fa      	ldrb	r2, [r7, #7]
 8006126:	4906      	ldr	r1, [pc, #24]	@ (8006140 <disk_ioctl+0x38>)
 8006128:	440a      	add	r2, r1
 800612a:	7a10      	ldrb	r0, [r2, #8]
 800612c:	79b9      	ldrb	r1, [r7, #6]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	4798      	blx	r3
 8006132:	4603      	mov	r3, r0
 8006134:	73fb      	strb	r3, [r7, #15]
  return res;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	200025b8 	.word	0x200025b8

08006144 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3301      	adds	r3, #1
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006154:	89fb      	ldrh	r3, [r7, #14]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	b21a      	sxth	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b21b      	sxth	r3, r3
 8006160:	4313      	orrs	r3, r2
 8006162:	b21b      	sxth	r3, r3
 8006164:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006166:	89fb      	ldrh	r3, [r7, #14]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3303      	adds	r3, #3
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	3202      	adds	r2, #2
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	3201      	adds	r2, #1
 800619a:	7812      	ldrb	r2, [r2, #0]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	7812      	ldrb	r2, [r2, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	887a      	ldrh	r2, [r7, #2]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	887b      	ldrh	r3, [r7, #2]
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	607a      	str	r2, [r7, #4]
 80061de:	887a      	ldrh	r2, [r7, #2]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	607a      	str	r2, [r7, #4]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00d      	beq.n	800627e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	1c53      	adds	r3, r2, #1
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1c59      	adds	r1, r3, #1
 800626c:	6179      	str	r1, [r7, #20]
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3b01      	subs	r3, #1
 8006276:	607b      	str	r3, [r7, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f1      	bne.n	8006262 <mem_cpy+0x1a>
	}
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800628a:	b480      	push	{r7}
 800628c:	b087      	sub	sp, #28
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	617a      	str	r2, [r7, #20]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	607b      	str	r3, [r7, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f3      	bne.n	800629a <mem_set+0x10>
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80062c0:	b480      	push	{r7}
 80062c2:	b089      	sub	sp, #36	@ 0x24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	61fa      	str	r2, [r7, #28]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	61ba      	str	r2, [r7, #24]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	1acb      	subs	r3, r1, r3
 80062ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	607b      	str	r3, [r7, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <mem_cmp+0x40>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0eb      	beq.n	80062d8 <mem_cmp+0x18>

	return r;
 8006300:	697b      	ldr	r3, [r7, #20]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3724      	adds	r7, #36	@ 0x24
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006318:	e002      	b.n	8006320 <chk_chr+0x12>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3301      	adds	r3, #1
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <chk_chr+0x26>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	4293      	cmp	r3, r2
 8006332:	d1f2      	bne.n	800631a <chk_chr+0xc>
	return *str;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	781b      	ldrb	r3, [r3, #0]
}
 8006338:	4618      	mov	r0, r3
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e029      	b.n	80063ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006358:	4a27      	ldr	r2, [pc, #156]	@ (80063f8 <chk_lock+0xb4>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	4413      	add	r3, r2
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01d      	beq.n	80063a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006366:	4a24      	ldr	r2, [pc, #144]	@ (80063f8 <chk_lock+0xb4>)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	4413      	add	r3, r2
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d116      	bne.n	80063a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006378:	4a1f      	ldr	r2, [pc, #124]	@ (80063f8 <chk_lock+0xb4>)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	4413      	add	r3, r2
 8006380:	3304      	adds	r3, #4
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006388:	429a      	cmp	r2, r3
 800638a:	d10c      	bne.n	80063a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800638c:	4a1a      	ldr	r2, [pc, #104]	@ (80063f8 <chk_lock+0xb4>)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	4413      	add	r3, r2
 8006394:	3308      	adds	r3, #8
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800639c:	429a      	cmp	r2, r3
 800639e:	d102      	bne.n	80063a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80063a0:	e007      	b.n	80063b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80063a2:	2301      	movs	r3, #1
 80063a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d9d2      	bls.n	8006358 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d109      	bne.n	80063cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <chk_lock+0x80>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d101      	bne.n	80063c8 <chk_lock+0x84>
 80063c4:	2300      	movs	r3, #0
 80063c6:	e010      	b.n	80063ea <chk_lock+0xa6>
 80063c8:	2312      	movs	r3, #18
 80063ca:	e00e      	b.n	80063ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <chk_lock+0xa0>
 80063d2:	4a09      	ldr	r2, [pc, #36]	@ (80063f8 <chk_lock+0xb4>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	4413      	add	r3, r2
 80063da:	330c      	adds	r3, #12
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e2:	d101      	bne.n	80063e8 <chk_lock+0xa4>
 80063e4:	2310      	movs	r3, #16
 80063e6:	e000      	b.n	80063ea <chk_lock+0xa6>
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20002398 	.word	0x20002398

080063fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]
 8006406:	e002      	b.n	800640e <enq_lock+0x12>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3301      	adds	r3, #1
 800640c:	607b      	str	r3, [r7, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d806      	bhi.n	8006422 <enq_lock+0x26>
 8006414:	4a09      	ldr	r2, [pc, #36]	@ (800643c <enq_lock+0x40>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	4413      	add	r3, r2
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f2      	bne.n	8006408 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b02      	cmp	r3, #2
 8006426:	bf14      	ite	ne
 8006428:	2301      	movne	r3, #1
 800642a:	2300      	moveq	r3, #0
 800642c:	b2db      	uxtb	r3, r3
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20002398 	.word	0x20002398

08006440 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e01f      	b.n	8006490 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006450:	4a41      	ldr	r2, [pc, #260]	@ (8006558 <inc_lock+0x118>)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	4413      	add	r3, r2
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d113      	bne.n	800648a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006462:	4a3d      	ldr	r2, [pc, #244]	@ (8006558 <inc_lock+0x118>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	4413      	add	r3, r2
 800646a:	3304      	adds	r3, #4
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006472:	429a      	cmp	r2, r3
 8006474:	d109      	bne.n	800648a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006476:	4a38      	ldr	r2, [pc, #224]	@ (8006558 <inc_lock+0x118>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	4413      	add	r3, r2
 800647e:	3308      	adds	r3, #8
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006486:	429a      	cmp	r2, r3
 8006488:	d006      	beq.n	8006498 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d9dc      	bls.n	8006450 <inc_lock+0x10>
 8006496:	e000      	b.n	800649a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006498:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d132      	bne.n	8006506 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e002      	b.n	80064ac <inc_lock+0x6c>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d806      	bhi.n	80064c0 <inc_lock+0x80>
 80064b2:	4a29      	ldr	r2, [pc, #164]	@ (8006558 <inc_lock+0x118>)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	4413      	add	r3, r2
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1f2      	bne.n	80064a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d101      	bne.n	80064ca <inc_lock+0x8a>
 80064c6:	2300      	movs	r3, #0
 80064c8:	e040      	b.n	800654c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4922      	ldr	r1, [pc, #136]	@ (8006558 <inc_lock+0x118>)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	440b      	add	r3, r1
 80064d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	491e      	ldr	r1, [pc, #120]	@ (8006558 <inc_lock+0x118>)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	440b      	add	r3, r1
 80064e4:	3304      	adds	r3, #4
 80064e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	491a      	ldr	r1, [pc, #104]	@ (8006558 <inc_lock+0x118>)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	440b      	add	r3, r1
 80064f4:	3308      	adds	r3, #8
 80064f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80064f8:	4a17      	ldr	r2, [pc, #92]	@ (8006558 <inc_lock+0x118>)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	4413      	add	r3, r2
 8006500:	330c      	adds	r3, #12
 8006502:	2200      	movs	r2, #0
 8006504:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <inc_lock+0xe0>
 800650c:	4a12      	ldr	r2, [pc, #72]	@ (8006558 <inc_lock+0x118>)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	4413      	add	r3, r2
 8006514:	330c      	adds	r3, #12
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <inc_lock+0xe0>
 800651c:	2300      	movs	r3, #0
 800651e:	e015      	b.n	800654c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d108      	bne.n	8006538 <inc_lock+0xf8>
 8006526:	4a0c      	ldr	r2, [pc, #48]	@ (8006558 <inc_lock+0x118>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	4413      	add	r3, r2
 800652e:	330c      	adds	r3, #12
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	e001      	b.n	800653c <inc_lock+0xfc>
 8006538:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800653c:	4906      	ldr	r1, [pc, #24]	@ (8006558 <inc_lock+0x118>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	440b      	add	r3, r1
 8006544:	330c      	adds	r3, #12
 8006546:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	20002398 	.word	0x20002398

0800655c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3b01      	subs	r3, #1
 8006568:	607b      	str	r3, [r7, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d825      	bhi.n	80065bc <dec_lock+0x60>
		n = Files[i].ctr;
 8006570:	4a17      	ldr	r2, [pc, #92]	@ (80065d0 <dec_lock+0x74>)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	4413      	add	r3, r2
 8006578:	330c      	adds	r3, #12
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800657e:	89fb      	ldrh	r3, [r7, #14]
 8006580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006584:	d101      	bne.n	800658a <dec_lock+0x2e>
 8006586:	2300      	movs	r3, #0
 8006588:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800658a:	89fb      	ldrh	r3, [r7, #14]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <dec_lock+0x3a>
 8006590:	89fb      	ldrh	r3, [r7, #14]
 8006592:	3b01      	subs	r3, #1
 8006594:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006596:	4a0e      	ldr	r2, [pc, #56]	@ (80065d0 <dec_lock+0x74>)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	4413      	add	r3, r2
 800659e:	330c      	adds	r3, #12
 80065a0:	89fa      	ldrh	r2, [r7, #14]
 80065a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80065a4:	89fb      	ldrh	r3, [r7, #14]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <dec_lock+0x5a>
 80065aa:	4a09      	ldr	r2, [pc, #36]	@ (80065d0 <dec_lock+0x74>)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	4413      	add	r3, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	737b      	strb	r3, [r7, #13]
 80065ba:	e001      	b.n	80065c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80065bc:	2302      	movs	r3, #2
 80065be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80065c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20002398 	.word	0x20002398

080065d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e010      	b.n	8006604 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80065e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006618 <clear_lock+0x44>)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	4413      	add	r3, r2
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d105      	bne.n	80065fe <clear_lock+0x2a>
 80065f2:	4a09      	ldr	r2, [pc, #36]	@ (8006618 <clear_lock+0x44>)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	4413      	add	r3, r2
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d9eb      	bls.n	80065e2 <clear_lock+0xe>
	}
}
 800660a:	bf00      	nop
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	20002398 	.word	0x20002398

0800661c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	78db      	ldrb	r3, [r3, #3]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d034      	beq.n	800669a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006634:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7858      	ldrb	r0, [r3, #1]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006640:	2301      	movs	r3, #1
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	f7ff fd40 	bl	80060c8 <disk_write>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <sync_window+0x38>
			res = FR_DISK_ERR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
 8006652:	e022      	b.n	800669a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	1ad2      	subs	r2, r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	429a      	cmp	r2, r3
 8006668:	d217      	bcs.n	800669a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	789b      	ldrb	r3, [r3, #2]
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	e010      	b.n	8006694 <sync_window+0x78>
					wsect += fs->fsize;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4413      	add	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7858      	ldrb	r0, [r3, #1]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006686:	2301      	movs	r3, #1
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	f7ff fd1d 	bl	80060c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3b01      	subs	r3, #1
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d8eb      	bhi.n	8006672 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d01b      	beq.n	80066f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff ffad 	bl	800661c <sync_window>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d113      	bne.n	80066f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	7858      	ldrb	r0, [r3, #1]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80066d6:	2301      	movs	r3, #1
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	f7ff fcd5 	bl	8006088 <disk_read>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ff87 	bl	800661c <sync_window>
 800670e:	4603      	mov	r3, r0
 8006710:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d159      	bne.n	80067cc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d149      	bne.n	80067b4 <sync_fs+0xb4>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	791b      	ldrb	r3, [r3, #4]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d145      	bne.n	80067b4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	899b      	ldrh	r3, [r3, #12]
 8006732:	461a      	mov	r2, r3
 8006734:	2100      	movs	r1, #0
 8006736:	f7ff fda8 	bl	800628a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3338      	adds	r3, #56	@ 0x38
 800673e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006742:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fd37 	bl	80061ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3338      	adds	r3, #56	@ 0x38
 8006750:	4921      	ldr	r1, [pc, #132]	@ (80067d8 <sync_fs+0xd8>)
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fd4c 	bl	80061f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3338      	adds	r3, #56	@ 0x38
 800675c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006760:	491e      	ldr	r1, [pc, #120]	@ (80067dc <sync_fs+0xdc>)
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff fd44 	bl	80061f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3338      	adds	r3, #56	@ 0x38
 800676c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f7ff fd3a 	bl	80061f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3338      	adds	r3, #56	@ 0x38
 8006780:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f7ff fd30 	bl	80061f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	7858      	ldrb	r0, [r3, #1]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a8:	2301      	movs	r3, #1
 80067aa:	f7ff fc8d 	bl	80060c8 <disk_write>
			fs->fsi_flag = 0;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2200      	movs	r2, #0
 80067ba:	2100      	movs	r1, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff fca3 	bl	8006108 <disk_ioctl>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <sync_fs+0xcc>
 80067c8:	2301      	movs	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	41615252 	.word	0x41615252
 80067dc:	61417272 	.word	0x61417272

080067e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	3b02      	subs	r3, #2
 80067ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	3b02      	subs	r3, #2
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d301      	bcc.n	8006800 <clust2sect+0x20>
 80067fc:	2300      	movs	r3, #0
 80067fe:	e008      	b.n	8006812 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	895b      	ldrh	r3, [r3, #10]
 8006804:	461a      	mov	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	fb03 f202 	mul.w	r2, r3, r2
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006810:	4413      	add	r3, r2
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b086      	sub	sp, #24
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d904      	bls.n	800683e <get_fat+0x20>
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d302      	bcc.n	8006844 <get_fat+0x26>
		val = 1;	/* Internal error */
 800683e:	2301      	movs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e0ba      	b.n	80069ba <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006844:	f04f 33ff 	mov.w	r3, #4294967295
 8006848:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b03      	cmp	r3, #3
 8006850:	f000 8082 	beq.w	8006958 <get_fat+0x13a>
 8006854:	2b03      	cmp	r3, #3
 8006856:	f300 80a6 	bgt.w	80069a6 <get_fat+0x188>
 800685a:	2b01      	cmp	r3, #1
 800685c:	d002      	beq.n	8006864 <get_fat+0x46>
 800685e:	2b02      	cmp	r3, #2
 8006860:	d055      	beq.n	800690e <get_fat+0xf0>
 8006862:	e0a0      	b.n	80069a6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	899b      	ldrh	r3, [r3, #12]
 800687a:	4619      	mov	r1, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006882:	4413      	add	r3, r2
 8006884:	4619      	mov	r1, r3
 8006886:	6938      	ldr	r0, [r7, #16]
 8006888:	f7ff ff0c 	bl	80066a4 <move_window>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	f040 808c 	bne.w	80069ac <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	60fa      	str	r2, [r7, #12]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	8992      	ldrh	r2, [r2, #12]
 800689e:	fbb3 f1f2 	udiv	r1, r3, r2
 80068a2:	fb01 f202 	mul.w	r2, r1, r2
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	899b      	ldrh	r3, [r3, #12]
 80068ba:	4619      	mov	r1, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	fbb3 f3f1 	udiv	r3, r3, r1
 80068c2:	4413      	add	r3, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	6938      	ldr	r0, [r7, #16]
 80068c8:	f7ff feec 	bl	80066a4 <move_window>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d16e      	bne.n	80069b0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	899b      	ldrh	r3, [r3, #12]
 80068d6:	461a      	mov	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	fbb3 f1f2 	udiv	r1, r3, r2
 80068de:	fb01 f202 	mul.w	r2, r1, r2
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <get_fat+0xe6>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	091b      	lsrs	r3, r3, #4
 8006902:	e002      	b.n	800690a <get_fat+0xec>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800690a:	617b      	str	r3, [r7, #20]
			break;
 800690c:	e055      	b.n	80069ba <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	899b      	ldrh	r3, [r3, #12]
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	b29b      	uxth	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006922:	4413      	add	r3, r2
 8006924:	4619      	mov	r1, r3
 8006926:	6938      	ldr	r0, [r7, #16]
 8006928:	f7ff febc 	bl	80066a4 <move_window>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d140      	bne.n	80069b4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	8992      	ldrh	r2, [r2, #12]
 8006940:	fbb3 f0f2 	udiv	r0, r3, r2
 8006944:	fb00 f202 	mul.w	r2, r0, r2
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	440b      	add	r3, r1
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fbf9 	bl	8006144 <ld_word>
 8006952:	4603      	mov	r3, r0
 8006954:	617b      	str	r3, [r7, #20]
			break;
 8006956:	e030      	b.n	80069ba <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	899b      	ldrh	r3, [r3, #12]
 8006960:	089b      	lsrs	r3, r3, #2
 8006962:	b29b      	uxth	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	fbb3 f3f1 	udiv	r3, r3, r1
 800696c:	4413      	add	r3, r2
 800696e:	4619      	mov	r1, r3
 8006970:	6938      	ldr	r0, [r7, #16]
 8006972:	f7ff fe97 	bl	80066a4 <move_window>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d11d      	bne.n	80069b8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	8992      	ldrh	r2, [r2, #12]
 800698a:	fbb3 f0f2 	udiv	r0, r3, r2
 800698e:	fb00 f202 	mul.w	r2, r0, r2
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	440b      	add	r3, r1
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fbec 	bl	8006174 <ld_dword>
 800699c:	4603      	mov	r3, r0
 800699e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80069a2:	617b      	str	r3, [r7, #20]
			break;
 80069a4:	e009      	b.n	80069ba <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80069a6:	2301      	movs	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e006      	b.n	80069ba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069ac:	bf00      	nop
 80069ae:	e004      	b.n	80069ba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069b0:	bf00      	nop
 80069b2:	e002      	b.n	80069ba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069b4:	bf00      	nop
 80069b6:	e000      	b.n	80069ba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069b8:	bf00      	nop
		}
	}

	return val;
 80069ba:	697b      	ldr	r3, [r7, #20]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80069c4:	b590      	push	{r4, r7, lr}
 80069c6:	b089      	sub	sp, #36	@ 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80069d0:	2302      	movs	r3, #2
 80069d2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	f240 8109 	bls.w	8006bee <put_fat+0x22a>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	f080 8103 	bcs.w	8006bee <put_fat+0x22a>
		switch (fs->fs_type) {
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	f000 80b6 	beq.w	8006b5e <put_fat+0x19a>
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	f300 80fb 	bgt.w	8006bee <put_fat+0x22a>
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d003      	beq.n	8006a04 <put_fat+0x40>
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	f000 8083 	beq.w	8006b08 <put_fat+0x144>
 8006a02:	e0f4      	b.n	8006bee <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	4413      	add	r3, r2
 8006a10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	899b      	ldrh	r3, [r3, #12]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a22:	4413      	add	r3, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff fe3c 	bl	80066a4 <move_window>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a30:	7ffb      	ldrb	r3, [r7, #31]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 80d4 	bne.w	8006be0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	61ba      	str	r2, [r7, #24]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	8992      	ldrh	r2, [r2, #12]
 8006a48:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a4c:	fb00 f202 	mul.w	r2, r0, r2
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	440b      	add	r3, r1
 8006a54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00d      	beq.n	8006a7c <put_fat+0xb8>
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	b25a      	sxtb	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	4313      	orrs	r3, r2
 8006a76:	b25b      	sxtb	r3, r3
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	e001      	b.n	8006a80 <put_fat+0xbc>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	899b      	ldrh	r3, [r3, #12]
 8006a92:	4619      	mov	r1, r3
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff fe00 	bl	80066a4 <move_window>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006aa8:	7ffb      	ldrb	r3, [r7, #31]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f040 809a 	bne.w	8006be4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	899b      	ldrh	r3, [r3, #12]
 8006aba:	461a      	mov	r2, r3
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ac2:	fb00 f202 	mul.w	r2, r0, r2
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	440b      	add	r3, r1
 8006aca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <put_fat+0x11a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	091b      	lsrs	r3, r3, #4
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	e00e      	b.n	8006afc <put_fat+0x138>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	f023 030f 	bic.w	r3, r3, #15
 8006ae8:	b25a      	sxtb	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	b25b      	sxtb	r3, r3
 8006af6:	4313      	orrs	r3, r2
 8006af8:	b25b      	sxtb	r3, r3
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	70da      	strb	r2, [r3, #3]
			break;
 8006b06:	e072      	b.n	8006bee <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	899b      	ldrh	r3, [r3, #12]
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	4619      	mov	r1, r3
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff fdbf 	bl	80066a4 <move_window>
 8006b26:	4603      	mov	r3, r0
 8006b28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b2a:	7ffb      	ldrb	r3, [r7, #31]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d15b      	bne.n	8006be8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	8992      	ldrh	r2, [r2, #12]
 8006b3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b42:	fb00 f202 	mul.w	r2, r0, r2
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	440b      	add	r3, r1
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	b292      	uxth	r2, r2
 8006b4e:	4611      	mov	r1, r2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff fb32 	bl	80061ba <st_word>
			fs->wflag = 1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	70da      	strb	r2, [r3, #3]
			break;
 8006b5c:	e047      	b.n	8006bee <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	899b      	ldrh	r3, [r3, #12]
 8006b66:	089b      	lsrs	r3, r3, #2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b72:	4413      	add	r3, r2
 8006b74:	4619      	mov	r1, r3
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff fd94 	bl	80066a4 <move_window>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b80:	7ffb      	ldrb	r3, [r7, #31]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d132      	bne.n	8006bec <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	8992      	ldrh	r2, [r2, #12]
 8006b9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b9e:	fb00 f202 	mul.w	r2, r0, r2
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff fae4 	bl	8006174 <ld_dword>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006bb2:	4323      	orrs	r3, r4
 8006bb4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	8992      	ldrh	r2, [r2, #12]
 8006bc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bc8:	fb00 f202 	mul.w	r2, r0, r2
 8006bcc:	1a9b      	subs	r3, r3, r2
 8006bce:	440b      	add	r3, r1
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff fb0c 	bl	80061f0 <st_dword>
			fs->wflag = 1;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	70da      	strb	r2, [r3, #3]
			break;
 8006bde:	e006      	b.n	8006bee <put_fat+0x22a>
			if (res != FR_OK) break;
 8006be0:	bf00      	nop
 8006be2:	e004      	b.n	8006bee <put_fat+0x22a>
			if (res != FR_OK) break;
 8006be4:	bf00      	nop
 8006be6:	e002      	b.n	8006bee <put_fat+0x22a>
			if (res != FR_OK) break;
 8006be8:	bf00      	nop
 8006bea:	e000      	b.n	8006bee <put_fat+0x22a>
			if (res != FR_OK) break;
 8006bec:	bf00      	nop
		}
	}
	return res;
 8006bee:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3724      	adds	r7, #36	@ 0x24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd90      	pop	{r4, r7, pc}

08006bf8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d904      	bls.n	8006c1e <remove_chain+0x26>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d301      	bcc.n	8006c22 <remove_chain+0x2a>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e04b      	b.n	8006cba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00c      	beq.n	8006c42 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	69b8      	ldr	r0, [r7, #24]
 8006c30:	f7ff fec8 	bl	80069c4 <put_fat>
 8006c34:	4603      	mov	r3, r0
 8006c36:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006c38:	7ffb      	ldrb	r3, [r7, #31]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <remove_chain+0x4a>
 8006c3e:	7ffb      	ldrb	r3, [r7, #31]
 8006c40:	e03b      	b.n	8006cba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f7ff fdea 	bl	800681e <get_fat>
 8006c4a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d031      	beq.n	8006cb6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <remove_chain+0x64>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e02e      	b.n	8006cba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d101      	bne.n	8006c68 <remove_chain+0x70>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e028      	b.n	8006cba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006c68:	2200      	movs	r2, #0
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	69b8      	ldr	r0, [r7, #24]
 8006c6e:	f7ff fea9 	bl	80069c4 <put_fat>
 8006c72:	4603      	mov	r3, r0
 8006c74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006c76:	7ffb      	ldrb	r3, [r7, #31]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <remove_chain+0x88>
 8006c7c:	7ffb      	ldrb	r3, [r7, #31]
 8006c7e:	e01c      	b.n	8006cba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	3b02      	subs	r3, #2
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d20b      	bcs.n	8006ca6 <remove_chain+0xae>
			fs->free_clst++;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d3c6      	bcc.n	8006c42 <remove_chain+0x4a>
 8006cb4:	e000      	b.n	8006cb8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006cb6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b088      	sub	sp, #32
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <create_chain+0x2c>
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d31b      	bcc.n	8006d26 <create_chain+0x64>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	e018      	b.n	8006d26 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fd91 	bl	800681e <get_fat>
 8006cfc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d801      	bhi.n	8006d08 <create_chain+0x46>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e070      	b.n	8006dea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d101      	bne.n	8006d14 <create_chain+0x52>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	e06a      	b.n	8006dea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d201      	bcs.n	8006d22 <create_chain+0x60>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	e063      	b.n	8006dea <create_chain+0x128>
		scl = clst;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d307      	bcc.n	8006d4a <create_chain+0x88>
				ncl = 2;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d901      	bls.n	8006d4a <create_chain+0x88>
 8006d46:	2300      	movs	r3, #0
 8006d48:	e04f      	b.n	8006dea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006d4a:	69f9      	ldr	r1, [r7, #28]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff fd66 	bl	800681e <get_fat>
 8006d52:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00e      	beq.n	8006d78 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d003      	beq.n	8006d68 <create_chain+0xa6>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d66:	d101      	bne.n	8006d6c <create_chain+0xaa>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	e03e      	b.n	8006dea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d1da      	bne.n	8006d2a <create_chain+0x68>
 8006d74:	2300      	movs	r3, #0
 8006d76:	e038      	b.n	8006dea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006d78:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	69f9      	ldr	r1, [r7, #28]
 8006d80:	6938      	ldr	r0, [r7, #16]
 8006d82:	f7ff fe1f 	bl	80069c4 <put_fat>
 8006d86:	4603      	mov	r3, r0
 8006d88:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <create_chain+0xe2>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d006      	beq.n	8006da4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6938      	ldr	r0, [r7, #16]
 8006d9c:	f7ff fe12 	bl	80069c4 <put_fat>
 8006da0:	4603      	mov	r3, r0
 8006da2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d116      	bne.n	8006dd8 <create_chain+0x116>
		fs->last_clst = ncl;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	699a      	ldr	r2, [r3, #24]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	3b02      	subs	r3, #2
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d804      	bhi.n	8006dc8 <create_chain+0x106>
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	1e5a      	subs	r2, r3, #1
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	791b      	ldrb	r3, [r3, #4]
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	711a      	strb	r2, [r3, #4]
 8006dd6:	e007      	b.n	8006de8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d102      	bne.n	8006de4 <create_chain+0x122>
 8006dde:	f04f 33ff 	mov.w	r3, #4294967295
 8006de2:	e000      	b.n	8006de6 <create_chain+0x124>
 8006de4:	2301      	movs	r3, #1
 8006de6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006de8:	69fb      	ldr	r3, [r7, #28]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3720      	adds	r7, #32
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b087      	sub	sp, #28
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	3304      	adds	r3, #4
 8006e08:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	899b      	ldrh	r3, [r3, #12]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	8952      	ldrh	r2, [r2, #10]
 8006e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	613a      	str	r2, [r7, #16]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <clmt_clust+0x42>
 8006e30:	2300      	movs	r3, #0
 8006e32:	e010      	b.n	8006e56 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d307      	bcc.n	8006e4c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	3304      	adds	r3, #4
 8006e48:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e4a:	e7e9      	b.n	8006e20 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006e4c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4413      	add	r3, r2
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e78:	d204      	bcs.n	8006e84 <dir_sdi+0x22>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006e84:	2302      	movs	r3, #2
 8006e86:	e071      	b.n	8006f6c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <dir_sdi+0x46>
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d902      	bls.n	8006ea8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10c      	bne.n	8006ec8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	8912      	ldrh	r2, [r2, #8]
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d301      	bcc.n	8006ebe <dir_sdi+0x5c>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e056      	b.n	8006f6c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	61da      	str	r2, [r3, #28]
 8006ec6:	e02d      	b.n	8006f24 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	895b      	ldrh	r3, [r3, #10]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	899b      	ldrh	r3, [r3, #12]
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ed8:	e019      	b.n	8006f0e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6979      	ldr	r1, [r7, #20]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fc9d 	bl	800681e <get_fat>
 8006ee4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d101      	bne.n	8006ef2 <dir_sdi+0x90>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e03c      	b.n	8006f6c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d904      	bls.n	8006f02 <dir_sdi+0xa0>
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d301      	bcc.n	8006f06 <dir_sdi+0xa4>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e032      	b.n	8006f6c <dir_sdi+0x10a>
			ofs -= csz;
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d2e1      	bcs.n	8006eda <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006f16:	6979      	ldr	r1, [r7, #20]
 8006f18:	6938      	ldr	r0, [r7, #16]
 8006f1a:	f7ff fc61 	bl	80067e0 <clust2sect>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <dir_sdi+0xd4>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e01a      	b.n	8006f6c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69da      	ldr	r2, [r3, #28]
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	899b      	ldrh	r3, [r3, #12]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f46:	441a      	add	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	899b      	ldrh	r3, [r3, #12]
 8006f56:	461a      	mov	r2, r3
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f5e:	fb00 f202 	mul.w	r2, r0, r2
 8006f62:	1a9b      	subs	r3, r3, r2
 8006f64:	18ca      	adds	r2, r1, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	3320      	adds	r3, #32
 8006f8a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <dir_next+0x28>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f9a:	d301      	bcc.n	8006fa0 <dir_next+0x2c>
 8006f9c:	2304      	movs	r3, #4
 8006f9e:	e0bb      	b.n	8007118 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	899b      	ldrh	r3, [r3, #12]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fac:	fb01 f202 	mul.w	r2, r1, r2
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f040 809d 	bne.w	80070f2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	8912      	ldrh	r2, [r2, #8]
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	f0c0 808d 	bcc.w	80070f2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	61da      	str	r2, [r3, #28]
 8006fde:	2304      	movs	r3, #4
 8006fe0:	e09a      	b.n	8007118 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	899b      	ldrh	r3, [r3, #12]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	8952      	ldrh	r2, [r2, #10]
 8006ff2:	3a01      	subs	r2, #1
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d17b      	bne.n	80070f2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7ff fc0b 	bl	800681e <get_fat>
 8007008:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d801      	bhi.n	8007014 <dir_next+0xa0>
 8007010:	2302      	movs	r3, #2
 8007012:	e081      	b.n	8007118 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d101      	bne.n	8007020 <dir_next+0xac>
 800701c:	2301      	movs	r3, #1
 800701e:	e07b      	b.n	8007118 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	429a      	cmp	r2, r3
 8007028:	d359      	bcc.n	80070de <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	61da      	str	r2, [r3, #28]
 8007036:	2304      	movs	r3, #4
 8007038:	e06e      	b.n	8007118 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f7ff fe3d 	bl	8006cc2 <create_chain>
 8007048:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <dir_next+0xe0>
 8007050:	2307      	movs	r3, #7
 8007052:	e061      	b.n	8007118 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <dir_next+0xea>
 800705a:	2302      	movs	r3, #2
 800705c:	e05c      	b.n	8007118 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d101      	bne.n	800706a <dir_next+0xf6>
 8007066:	2301      	movs	r3, #1
 8007068:	e056      	b.n	8007118 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff fad6 	bl	800661c <sync_window>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <dir_next+0x106>
 8007076:	2301      	movs	r3, #1
 8007078:	e04e      	b.n	8007118 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	899b      	ldrh	r3, [r3, #12]
 8007084:	461a      	mov	r2, r3
 8007086:	2100      	movs	r1, #0
 8007088:	f7ff f8ff 	bl	800628a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800708c:	2300      	movs	r3, #0
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	6979      	ldr	r1, [r7, #20]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fba4 	bl	80067e0 <clust2sect>
 8007098:	4602      	mov	r2, r0
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	635a      	str	r2, [r3, #52]	@ 0x34
 800709e:	e012      	b.n	80070c6 <dir_next+0x152>
						fs->wflag = 1;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7ff fab8 	bl	800661c <sync_window>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <dir_next+0x142>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e030      	b.n	8007118 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	3301      	adds	r3, #1
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	895b      	ldrh	r3, [r3, #10]
 80070ca:	461a      	mov	r2, r3
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d3e6      	bcc.n	80070a0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad2      	subs	r2, r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80070e4:	6979      	ldr	r1, [r7, #20]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff fb7a 	bl	80067e0 <clust2sect>
 80070ec:	4602      	mov	r2, r0
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	899b      	ldrh	r3, [r3, #12]
 8007102:	461a      	mov	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	fbb3 f0f2 	udiv	r0, r3, r2
 800710a:	fb00 f202 	mul.w	r2, r0, r2
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	18ca      	adds	r2, r1, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fe95 	bl	8006e62 <dir_sdi>
 8007138:	4603      	mov	r3, r0
 800713a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d12b      	bne.n	800719a <dir_alloc+0x7a>
		n = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	4619      	mov	r1, r3
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff faa9 	bl	80066a4 <move_window>
 8007152:	4603      	mov	r3, r0
 8007154:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d11d      	bne.n	8007198 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2be5      	cmp	r3, #229	@ 0xe5
 8007164:	d004      	beq.n	8007170 <dir_alloc+0x50>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d107      	bne.n	8007180 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	3301      	adds	r3, #1
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d102      	bne.n	8007184 <dir_alloc+0x64>
 800717e:	e00c      	b.n	800719a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007180:	2300      	movs	r3, #0
 8007182:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007184:	2101      	movs	r1, #1
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fef4 	bl	8006f74 <dir_next>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0d7      	beq.n	8007146 <dir_alloc+0x26>
 8007196:	e000      	b.n	800719a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007198:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b04      	cmp	r3, #4
 800719e:	d101      	bne.n	80071a4 <dir_alloc+0x84>
 80071a0:	2307      	movs	r3, #7
 80071a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	331a      	adds	r3, #26
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe ffc1 	bl	8006144 <ld_word>
 80071c2:	4603      	mov	r3, r0
 80071c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d109      	bne.n	80071e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	3314      	adds	r3, #20
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe ffb6 	bl	8006144 <ld_word>
 80071d8:	4603      	mov	r3, r0
 80071da:	041b      	lsls	r3, r3, #16
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	331a      	adds	r3, #26
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	b292      	uxth	r2, r2
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe ffd9 	bl	80061ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d109      	bne.n	8007224 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f103 0214 	add.w	r2, r3, #20
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	b29b      	uxth	r3, r3
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f7fe ffcb 	bl	80061ba <st_word>
	}
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	331a      	adds	r3, #26
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe ff82 	bl	8006144 <ld_word>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <cmp_lfn+0x1e>
 8007246:	2300      	movs	r3, #0
 8007248:	e059      	b.n	80072fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007252:	1e5a      	subs	r2, r3, #1
 8007254:	4613      	mov	r3, r2
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007260:	2301      	movs	r3, #1
 8007262:	81fb      	strh	r3, [r7, #14]
 8007264:	2300      	movs	r3, #0
 8007266:	613b      	str	r3, [r7, #16]
 8007268:	e033      	b.n	80072d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800726a:	4a27      	ldr	r2, [pc, #156]	@ (8007308 <cmp_lfn+0xdc>)
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	4413      	add	r3, r2
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	4413      	add	r3, r2
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe ff63 	bl	8006144 <ld_word>
 800727e:	4603      	mov	r3, r0
 8007280:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007282:	89fb      	ldrh	r3, [r7, #14]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01a      	beq.n	80072be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2bfe      	cmp	r3, #254	@ 0xfe
 800728c:	d812      	bhi.n	80072b4 <cmp_lfn+0x88>
 800728e:	89bb      	ldrh	r3, [r7, #12]
 8007290:	4618      	mov	r0, r3
 8007292:	f002 f84b 	bl	800932c <ff_wtoupper>
 8007296:	4603      	mov	r3, r0
 8007298:	461c      	mov	r4, r3
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	617a      	str	r2, [r7, #20]
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	4413      	add	r3, r2
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f002 f83f 	bl	800932c <ff_wtoupper>
 80072ae:	4603      	mov	r3, r0
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d001      	beq.n	80072b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80072b4:	2300      	movs	r3, #0
 80072b6:	e022      	b.n	80072fe <cmp_lfn+0xd2>
			}
			wc = uc;
 80072b8:	89bb      	ldrh	r3, [r7, #12]
 80072ba:	81fb      	strh	r3, [r7, #14]
 80072bc:	e006      	b.n	80072cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80072be:	89bb      	ldrh	r3, [r7, #12]
 80072c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d001      	beq.n	80072cc <cmp_lfn+0xa0>
 80072c8:	2300      	movs	r3, #0
 80072ca:	e018      	b.n	80072fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	3301      	adds	r3, #1
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b0c      	cmp	r3, #12
 80072d6:	d9c8      	bls.n	800726a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <cmp_lfn+0xd0>
 80072e4:	89fb      	ldrh	r3, [r7, #14]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <cmp_lfn+0xd0>
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <cmp_lfn+0xd0>
 80072f8:	2300      	movs	r3, #0
 80072fa:	e000      	b.n	80072fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80072fc:	2301      	movs	r3, #1
}
 80072fe:	4618      	mov	r0, r3
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	bd90      	pop	{r4, r7, pc}
 8007306:	bf00      	nop
 8007308:	08009f70 	.word	0x08009f70

0800730c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	4611      	mov	r1, r2
 8007318:	461a      	mov	r2, r3
 800731a:	460b      	mov	r3, r1
 800731c:	71fb      	strb	r3, [r7, #7]
 800731e:	4613      	mov	r3, r2
 8007320:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	330d      	adds	r3, #13
 8007326:	79ba      	ldrb	r2, [r7, #6]
 8007328:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	330b      	adds	r3, #11
 800732e:	220f      	movs	r2, #15
 8007330:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	330c      	adds	r3, #12
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	331a      	adds	r3, #26
 800733e:	2100      	movs	r1, #0
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe ff3a 	bl	80061ba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	1e5a      	subs	r2, r3, #1
 800734a:	4613      	mov	r3, r2
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	82fb      	strh	r3, [r7, #22]
 800735a:	2300      	movs	r3, #0
 800735c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800735e:	8afb      	ldrh	r3, [r7, #22]
 8007360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007364:	4293      	cmp	r3, r2
 8007366:	d007      	beq.n	8007378 <put_lfn+0x6c>
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	61fa      	str	r2, [r7, #28]
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007378:	4a17      	ldr	r2, [pc, #92]	@ (80073d8 <put_lfn+0xcc>)
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	4413      	add	r3, r2
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4413      	add	r3, r2
 8007386:	8afa      	ldrh	r2, [r7, #22]
 8007388:	4611      	mov	r1, r2
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe ff15 	bl	80061ba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007390:	8afb      	ldrh	r3, [r7, #22]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d102      	bne.n	800739c <put_lfn+0x90>
 8007396:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800739a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	3301      	adds	r3, #1
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b0c      	cmp	r3, #12
 80073a6:	d9da      	bls.n	800735e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80073a8:	8afb      	ldrh	r3, [r7, #22]
 80073aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d006      	beq.n	80073c0 <put_lfn+0xb4>
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d103      	bne.n	80073c8 <put_lfn+0xbc>
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073c6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	79fa      	ldrb	r2, [r7, #7]
 80073cc:	701a      	strb	r2, [r3, #0]
}
 80073ce:	bf00      	nop
 80073d0:	3720      	adds	r7, #32
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	08009f70 	.word	0x08009f70

080073dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08c      	sub	sp, #48	@ 0x30
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80073ea:	220b      	movs	r2, #11
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7fe ff2a 	bl	8006248 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b05      	cmp	r3, #5
 80073f8:	d92b      	bls.n	8007452 <gen_numname+0x76>
		sr = seq;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80073fe:	e022      	b.n	8007446 <gen_numname+0x6a>
			wc = *lfn++;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	1c9a      	adds	r2, r3, #2
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800740a:	2300      	movs	r3, #0
 800740c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800740e:	e017      	b.n	8007440 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	005a      	lsls	r2, r3, #1
 8007414:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	4413      	add	r3, r2
 800741c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800741e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <gen_numname+0x5e>
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007434:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007438:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800743a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743c:	3301      	adds	r3, #1
 800743e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007442:	2b0f      	cmp	r3, #15
 8007444:	d9e4      	bls.n	8007410 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1d8      	bne.n	8007400 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007452:	2307      	movs	r3, #7
 8007454:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	b2db      	uxtb	r3, r3
 8007460:	3330      	adds	r3, #48	@ 0x30
 8007462:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007466:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800746a:	2b39      	cmp	r3, #57	@ 0x39
 800746c:	d904      	bls.n	8007478 <gen_numname+0x9c>
 800746e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007472:	3307      	adds	r3, #7
 8007474:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	1e5a      	subs	r2, r3, #1
 800747c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800747e:	3330      	adds	r3, #48	@ 0x30
 8007480:	443b      	add	r3, r7
 8007482:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007486:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	091b      	lsrs	r3, r3, #4
 800748e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1df      	bne.n	8007456 <gen_numname+0x7a>
	ns[i] = '~';
 8007496:	f107 0214 	add.w	r2, r7, #20
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	4413      	add	r3, r2
 800749e:	227e      	movs	r2, #126	@ 0x7e
 80074a0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80074a2:	2300      	movs	r3, #0
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a6:	e002      	b.n	80074ae <gen_numname+0xd2>
 80074a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074aa:	3301      	adds	r3, #1
 80074ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d205      	bcs.n	80074c2 <gen_numname+0xe6>
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	4413      	add	r3, r2
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b20      	cmp	r3, #32
 80074c0:	d1f2      	bne.n	80074a8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	2b07      	cmp	r3, #7
 80074c6:	d807      	bhi.n	80074d8 <gen_numname+0xfc>
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80074ce:	3330      	adds	r3, #48	@ 0x30
 80074d0:	443b      	add	r3, r7
 80074d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80074d6:	e000      	b.n	80074da <gen_numname+0xfe>
 80074d8:	2120      	movs	r1, #32
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	627a      	str	r2, [r7, #36]	@ 0x24
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	460a      	mov	r2, r1
 80074e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80074e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ea:	2b07      	cmp	r3, #7
 80074ec:	d9e9      	bls.n	80074c2 <gen_numname+0xe6>
}
 80074ee:	bf00      	nop
 80074f0:	bf00      	nop
 80074f2:	3730      	adds	r7, #48	@ 0x30
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007504:	230b      	movs	r3, #11
 8007506:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	b2da      	uxtb	r2, r3
 800750c:	0852      	lsrs	r2, r2, #1
 800750e:	01db      	lsls	r3, r3, #7
 8007510:	4313      	orrs	r3, r2
 8007512:	b2da      	uxtb	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	1c59      	adds	r1, r3, #1
 8007518:	6079      	str	r1, [r7, #4]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	4413      	add	r3, r2
 800751e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	3b01      	subs	r3, #1
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1ed      	bne.n	8007508 <sum_sfn+0x10>
	return sum;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b086      	sub	sp, #24
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007548:	2100      	movs	r1, #0
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff fc89 	bl	8006e62 <dir_sdi>
 8007550:	4603      	mov	r3, r0
 8007552:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <dir_find+0x24>
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	e0a9      	b.n	80076b2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800755e:	23ff      	movs	r3, #255	@ 0xff
 8007560:	753b      	strb	r3, [r7, #20]
 8007562:	7d3b      	ldrb	r3, [r7, #20]
 8007564:	757b      	strb	r3, [r7, #21]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f04f 32ff 	mov.w	r2, #4294967295
 800756c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	4619      	mov	r1, r3
 8007574:	6938      	ldr	r0, [r7, #16]
 8007576:	f7ff f895 	bl	80066a4 <move_window>
 800757a:	4603      	mov	r3, r0
 800757c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f040 8090 	bne.w	80076a6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800758e:	7dbb      	ldrb	r3, [r7, #22]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <dir_find+0x60>
 8007594:	2304      	movs	r3, #4
 8007596:	75fb      	strb	r3, [r7, #23]
 8007598:	e08a      	b.n	80076b0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	330b      	adds	r3, #11
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075a6:	73fb      	strb	r3, [r7, #15]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	7bfa      	ldrb	r2, [r7, #15]
 80075ac:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80075ae:	7dbb      	ldrb	r3, [r7, #22]
 80075b0:	2be5      	cmp	r3, #229	@ 0xe5
 80075b2:	d007      	beq.n	80075c4 <dir_find+0x8a>
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	f003 0308 	and.w	r3, r3, #8
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <dir_find+0x98>
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	2b0f      	cmp	r3, #15
 80075c2:	d006      	beq.n	80075d2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80075c4:	23ff      	movs	r3, #255	@ 0xff
 80075c6:	757b      	strb	r3, [r7, #21]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f04f 32ff 	mov.w	r2, #4294967295
 80075ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80075d0:	e05e      	b.n	8007690 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
 80075d4:	2b0f      	cmp	r3, #15
 80075d6:	d136      	bne.n	8007646 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80075de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d154      	bne.n	8007690 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80075e6:	7dbb      	ldrb	r3, [r7, #22]
 80075e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00d      	beq.n	800760c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	7b5b      	ldrb	r3, [r3, #13]
 80075f6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80075f8:	7dbb      	ldrb	r3, [r7, #22]
 80075fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075fe:	75bb      	strb	r3, [r7, #22]
 8007600:	7dbb      	ldrb	r3, [r7, #22]
 8007602:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	695a      	ldr	r2, [r3, #20]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800760c:	7dba      	ldrb	r2, [r7, #22]
 800760e:	7d7b      	ldrb	r3, [r7, #21]
 8007610:	429a      	cmp	r2, r3
 8007612:	d115      	bne.n	8007640 <dir_find+0x106>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	330d      	adds	r3, #13
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	7d3a      	ldrb	r2, [r7, #20]
 800761e:	429a      	cmp	r2, r3
 8007620:	d10e      	bne.n	8007640 <dir_find+0x106>
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	691a      	ldr	r2, [r3, #16]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	4619      	mov	r1, r3
 800762c:	4610      	mov	r0, r2
 800762e:	f7ff fdfd 	bl	800722c <cmp_lfn>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <dir_find+0x106>
 8007638:	7d7b      	ldrb	r3, [r7, #21]
 800763a:	3b01      	subs	r3, #1
 800763c:	b2db      	uxtb	r3, r3
 800763e:	e000      	b.n	8007642 <dir_find+0x108>
 8007640:	23ff      	movs	r3, #255	@ 0xff
 8007642:	757b      	strb	r3, [r7, #21]
 8007644:	e024      	b.n	8007690 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007646:	7d7b      	ldrb	r3, [r7, #21]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <dir_find+0x126>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff ff51 	bl	80074f8 <sum_sfn>
 8007656:	4603      	mov	r3, r0
 8007658:	461a      	mov	r2, r3
 800765a:	7d3b      	ldrb	r3, [r7, #20]
 800765c:	4293      	cmp	r3, r2
 800765e:	d024      	beq.n	80076aa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <dir_find+0x14a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a18      	ldr	r0, [r3, #32]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3324      	adds	r3, #36	@ 0x24
 8007676:	220b      	movs	r2, #11
 8007678:	4619      	mov	r1, r3
 800767a:	f7fe fe21 	bl	80062c0 <mem_cmp>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d014      	beq.n	80076ae <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007684:	23ff      	movs	r3, #255	@ 0xff
 8007686:	757b      	strb	r3, [r7, #21]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f04f 32ff 	mov.w	r2, #4294967295
 800768e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007690:	2100      	movs	r1, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff fc6e 	bl	8006f74 <dir_next>
 8007698:	4603      	mov	r3, r0
 800769a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f43f af65 	beq.w	800756e <dir_find+0x34>
 80076a4:	e004      	b.n	80076b0 <dir_find+0x176>
		if (res != FR_OK) break;
 80076a6:	bf00      	nop
 80076a8:	e002      	b.n	80076b0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80076aa:	bf00      	nop
 80076ac:	e000      	b.n	80076b0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80076ae:	bf00      	nop

	return res;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08c      	sub	sp, #48	@ 0x30
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80076d0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <dir_register+0x20>
 80076d8:	2306      	movs	r3, #6
 80076da:	e0e0      	b.n	800789e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80076dc:	2300      	movs	r3, #0
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
 80076e0:	e002      	b.n	80076e8 <dir_register+0x2c>
 80076e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e4:	3301      	adds	r3, #1
 80076e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	691a      	ldr	r2, [r3, #16]
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	4413      	add	r3, r2
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f4      	bne.n	80076e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80076fe:	f107 030c 	add.w	r3, r7, #12
 8007702:	220c      	movs	r2, #12
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe fd9f 	bl	8006248 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800770a:	7dfb      	ldrb	r3, [r7, #23]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d032      	beq.n	800777a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2240      	movs	r2, #64	@ 0x40
 8007718:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800771c:	2301      	movs	r3, #1
 800771e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007720:	e016      	b.n	8007750 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	f107 010c 	add.w	r1, r7, #12
 8007730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007732:	f7ff fe53 	bl	80073dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff feff 	bl	800753a <dir_find>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007742:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774c:	3301      	adds	r3, #1
 800774e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	2b63      	cmp	r3, #99	@ 0x63
 8007754:	d9e5      	bls.n	8007722 <dir_register+0x66>
 8007756:	e000      	b.n	800775a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007758:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800775a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775c:	2b64      	cmp	r3, #100	@ 0x64
 800775e:	d101      	bne.n	8007764 <dir_register+0xa8>
 8007760:	2307      	movs	r3, #7
 8007762:	e09c      	b.n	800789e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007768:	2b04      	cmp	r3, #4
 800776a:	d002      	beq.n	8007772 <dir_register+0xb6>
 800776c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007770:	e095      	b.n	800789e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007772:	7dfa      	ldrb	r2, [r7, #23]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d007      	beq.n	8007794 <dir_register+0xd8>
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	330c      	adds	r3, #12
 8007788:	4a47      	ldr	r2, [pc, #284]	@ (80078a8 <dir_register+0x1ec>)
 800778a:	fba2 2303 	umull	r2, r3, r2, r3
 800778e:	089b      	lsrs	r3, r3, #2
 8007790:	3301      	adds	r3, #1
 8007792:	e000      	b.n	8007796 <dir_register+0xda>
 8007794:	2301      	movs	r3, #1
 8007796:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007798:	6a39      	ldr	r1, [r7, #32]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fcc0 	bl	8007120 <dir_alloc>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80077a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d148      	bne.n	8007840 <dir_register+0x184>
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	623b      	str	r3, [r7, #32]
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d042      	beq.n	8007840 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	015b      	lsls	r3, r3, #5
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fb4b 	bl	8006e62 <dir_sdi>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80077d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d132      	bne.n	8007840 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3324      	adds	r3, #36	@ 0x24
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff fe8a 	bl	80074f8 <sum_sfn>
 80077e4:	4603      	mov	r3, r0
 80077e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	4619      	mov	r1, r3
 80077ee:	69f8      	ldr	r0, [r7, #28]
 80077f0:	f7fe ff58 	bl	80066a4 <move_window>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80077fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d11d      	bne.n	800783e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	6918      	ldr	r0, [r3, #16]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a19      	ldr	r1, [r3, #32]
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	b2da      	uxtb	r2, r3
 800780e:	7efb      	ldrb	r3, [r7, #27]
 8007810:	f7ff fd7c 	bl	800730c <put_lfn>
				fs->wflag = 1;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	2201      	movs	r2, #1
 8007818:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800781a:	2100      	movs	r1, #0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff fba9 	bl	8006f74 <dir_next>
 8007822:	4603      	mov	r3, r0
 8007824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800782c:	2b00      	cmp	r3, #0
 800782e:	d107      	bne.n	8007840 <dir_register+0x184>
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	3b01      	subs	r3, #1
 8007834:	623b      	str	r3, [r7, #32]
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1d5      	bne.n	80077e8 <dir_register+0x12c>
 800783c:	e000      	b.n	8007840 <dir_register+0x184>
				if (res != FR_OK) break;
 800783e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007840:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007844:	2b00      	cmp	r3, #0
 8007846:	d128      	bne.n	800789a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	4619      	mov	r1, r3
 800784e:	69f8      	ldr	r0, [r7, #28]
 8007850:	f7fe ff28 	bl	80066a4 <move_window>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800785a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800785e:	2b00      	cmp	r3, #0
 8007860:	d11b      	bne.n	800789a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	2220      	movs	r2, #32
 8007868:	2100      	movs	r1, #0
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe fd0d 	bl	800628a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a18      	ldr	r0, [r3, #32]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3324      	adds	r3, #36	@ 0x24
 8007878:	220b      	movs	r2, #11
 800787a:	4619      	mov	r1, r3
 800787c:	f7fe fce4 	bl	8006248 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	330c      	adds	r3, #12
 800788c:	f002 0218 	and.w	r2, r2, #24
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	2201      	movs	r2, #1
 8007898:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800789a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3730      	adds	r7, #48	@ 0x30
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	4ec4ec4f 	.word	0x4ec4ec4f

080078ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08a      	sub	sp, #40	@ 0x28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	61ba      	str	r2, [r7, #24]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	4413      	add	r3, r2
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80078da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078dc:	2b1f      	cmp	r3, #31
 80078de:	d940      	bls.n	8007962 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80078e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80078e4:	d006      	beq.n	80078f4 <create_name+0x48>
 80078e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80078ea:	d110      	bne.n	800790e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80078ec:	e002      	b.n	80078f4 <create_name+0x48>
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	3301      	adds	r3, #1
 80078f2:	61bb      	str	r3, [r7, #24]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	4413      	add	r3, r2
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80078fe:	d0f6      	beq.n	80078ee <create_name+0x42>
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	4413      	add	r3, r2
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b5c      	cmp	r3, #92	@ 0x5c
 800790a:	d0f0      	beq.n	80078ee <create_name+0x42>
			break;
 800790c:	e02a      	b.n	8007964 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2bfe      	cmp	r3, #254	@ 0xfe
 8007912:	d901      	bls.n	8007918 <create_name+0x6c>
 8007914:	2306      	movs	r3, #6
 8007916:	e17d      	b.n	8007c14 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800791a:	b2db      	uxtb	r3, r3
 800791c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800791e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007920:	2101      	movs	r1, #1
 8007922:	4618      	mov	r0, r3
 8007924:	f001 fcc6 	bl	80092b4 <ff_convert>
 8007928:	4603      	mov	r3, r0
 800792a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800792c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <create_name+0x8a>
 8007932:	2306      	movs	r3, #6
 8007934:	e16e      	b.n	8007c14 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007938:	2b7f      	cmp	r3, #127	@ 0x7f
 800793a:	d809      	bhi.n	8007950 <create_name+0xa4>
 800793c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800793e:	4619      	mov	r1, r3
 8007940:	488d      	ldr	r0, [pc, #564]	@ (8007b78 <create_name+0x2cc>)
 8007942:	f7fe fce4 	bl	800630e <chk_chr>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <create_name+0xa4>
 800794c:	2306      	movs	r3, #6
 800794e:	e161      	b.n	8007c14 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	617a      	str	r2, [r7, #20]
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800795e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007960:	e7b4      	b.n	80078cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007962:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	441a      	add	r2, r3
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800796e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007970:	2b1f      	cmp	r3, #31
 8007972:	d801      	bhi.n	8007978 <create_name+0xcc>
 8007974:	2304      	movs	r3, #4
 8007976:	e000      	b.n	800797a <create_name+0xce>
 8007978:	2300      	movs	r3, #0
 800797a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800797e:	e011      	b.n	80079a4 <create_name+0xf8>
		w = lfn[di - 1];
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007986:	3b01      	subs	r3, #1
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007992:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007994:	2b20      	cmp	r3, #32
 8007996:	d002      	beq.n	800799e <create_name+0xf2>
 8007998:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800799a:	2b2e      	cmp	r3, #46	@ 0x2e
 800799c:	d106      	bne.n	80079ac <create_name+0x100>
		di--;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1ea      	bne.n	8007980 <create_name+0xd4>
 80079aa:	e000      	b.n	80079ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80079ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	2200      	movs	r2, #0
 80079b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <create_name+0x118>
 80079c0:	2306      	movs	r3, #6
 80079c2:	e127      	b.n	8007c14 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3324      	adds	r3, #36	@ 0x24
 80079c8:	220b      	movs	r2, #11
 80079ca:	2120      	movs	r1, #32
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe fc5c 	bl	800628a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]
 80079d6:	e002      	b.n	80079de <create_name+0x132>
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	3301      	adds	r3, #1
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d0f5      	beq.n	80079d8 <create_name+0x12c>
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80079f8:	d0ee      	beq.n	80079d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <create_name+0x168>
 8007a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a04:	f043 0303 	orr.w	r3, r3, #3
 8007a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a0c:	e002      	b.n	8007a14 <create_name+0x168>
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <create_name+0x182>
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007a20:	3b01      	subs	r3, #1
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a2c:	d1ef      	bne.n	8007a0e <create_name+0x162>

	i = b = 0; ni = 8;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007a34:	2300      	movs	r3, #0
 8007a36:	623b      	str	r3, [r7, #32]
 8007a38:	2308      	movs	r3, #8
 8007a3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	61ba      	str	r2, [r7, #24]
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4413      	add	r3, r2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007a4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8090 	beq.w	8007b74 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007a54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d006      	beq.n	8007a68 <create_name+0x1bc>
 8007a5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a5e:	d10a      	bne.n	8007a76 <create_name+0x1ca>
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d006      	beq.n	8007a76 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007a68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a6c:	f043 0303 	orr.w	r3, r3, #3
 8007a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a74:	e07d      	b.n	8007b72 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d203      	bcs.n	8007a86 <create_name+0x1da>
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d123      	bne.n	8007ace <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	2b0b      	cmp	r3, #11
 8007a8a:	d106      	bne.n	8007a9a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a90:	f043 0303 	orr.w	r3, r3, #3
 8007a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a98:	e075      	b.n	8007b86 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d005      	beq.n	8007aae <create_name+0x202>
 8007aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007aa6:	f043 0303 	orr.w	r3, r3, #3
 8007aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d866      	bhi.n	8007b84 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	2308      	movs	r3, #8
 8007abc:	623b      	str	r3, [r7, #32]
 8007abe:	230b      	movs	r3, #11
 8007ac0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007acc:	e051      	b.n	8007b72 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ad2:	d914      	bls.n	8007afe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007ad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 fbeb 	bl	80092b4 <ff_convert>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007ae2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <create_name+0x246>
 8007ae8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007aea:	3b80      	subs	r3, #128	@ 0x80
 8007aec:	4a23      	ldr	r2, [pc, #140]	@ (8007b7c <create_name+0x2d0>)
 8007aee:	5cd3      	ldrb	r3, [r2, r3]
 8007af0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007af2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007af6:	f043 0302 	orr.w	r3, r3, #2
 8007afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007afe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d007      	beq.n	8007b14 <create_name+0x268>
 8007b04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b06:	4619      	mov	r1, r3
 8007b08:	481d      	ldr	r0, [pc, #116]	@ (8007b80 <create_name+0x2d4>)
 8007b0a:	f7fe fc00 	bl	800630e <chk_chr>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d008      	beq.n	8007b26 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b14:	235f      	movs	r3, #95	@ 0x5f
 8007b16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b1c:	f043 0303 	orr.w	r3, r3, #3
 8007b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007b24:	e01b      	b.n	8007b5e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007b26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b28:	2b40      	cmp	r3, #64	@ 0x40
 8007b2a:	d909      	bls.n	8007b40 <create_name+0x294>
 8007b2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b2e:	2b5a      	cmp	r3, #90	@ 0x5a
 8007b30:	d806      	bhi.n	8007b40 <create_name+0x294>
					b |= 2;
 8007b32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b36:	f043 0302 	orr.w	r3, r3, #2
 8007b3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b3e:	e00e      	b.n	8007b5e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007b40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b42:	2b60      	cmp	r3, #96	@ 0x60
 8007b44:	d90b      	bls.n	8007b5e <create_name+0x2b2>
 8007b46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b48:	2b7a      	cmp	r3, #122	@ 0x7a
 8007b4a:	d808      	bhi.n	8007b5e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007b4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b50:	f043 0301 	orr.w	r3, r3, #1
 8007b54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b5a:	3b20      	subs	r3, #32
 8007b5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	623a      	str	r2, [r7, #32]
 8007b64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b66:	b2d1      	uxtb	r1, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	460a      	mov	r2, r1
 8007b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007b72:	e763      	b.n	8007a3c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007b74:	bf00      	nop
 8007b76:	e006      	b.n	8007b86 <create_name+0x2da>
 8007b78:	08009e90 	.word	0x08009e90
 8007b7c:	08009ef0 	.word	0x08009ef0
 8007b80:	08009e9c 	.word	0x08009e9c
			if (si > di) break;			/* No extension */
 8007b84:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b8c:	2be5      	cmp	r3, #229	@ 0xe5
 8007b8e:	d103      	bne.n	8007b98 <create_name+0x2ec>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2205      	movs	r2, #5
 8007b94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	d104      	bne.n	8007ba8 <create_name+0x2fc>
 8007b9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bac:	f003 030c 	and.w	r3, r3, #12
 8007bb0:	2b0c      	cmp	r3, #12
 8007bb2:	d005      	beq.n	8007bc0 <create_name+0x314>
 8007bb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d105      	bne.n	8007bcc <create_name+0x320>
 8007bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bc4:	f043 0302 	orr.w	r3, r3, #2
 8007bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d117      	bne.n	8007c08 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bdc:	f003 0303 	and.w	r3, r3, #3
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d105      	bne.n	8007bf0 <create_name+0x344>
 8007be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007be8:	f043 0310 	orr.w	r3, r3, #16
 8007bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bf4:	f003 030c 	and.w	r3, r3, #12
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d105      	bne.n	8007c08 <create_name+0x35c>
 8007bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c00:	f043 0308 	orr.w	r3, r3, #8
 8007c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007c0e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007c12:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3728      	adds	r7, #40	@ 0x28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c30:	e002      	b.n	8007c38 <follow_path+0x1c>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	3301      	adds	r3, #1
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c3e:	d0f8      	beq.n	8007c32 <follow_path+0x16>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c46:	d0f4      	beq.n	8007c32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b1f      	cmp	r3, #31
 8007c54:	d80a      	bhi.n	8007c6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2280      	movs	r2, #128	@ 0x80
 8007c5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff f8fe 	bl	8006e62 <dir_sdi>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]
 8007c6a:	e048      	b.n	8007cfe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff fe1b 	bl	80078ac <create_name>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d139      	bne.n	8007cf4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fc5a 	bl	800753a <dir_find>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007c90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d12c      	bne.n	8007cf8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007c9e:	7afb      	ldrb	r3, [r7, #11]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d127      	bne.n	8007cf8 <follow_path+0xdc>
 8007ca8:	2305      	movs	r3, #5
 8007caa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007cac:	e024      	b.n	8007cf8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007cae:	7afb      	ldrb	r3, [r7, #11]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d121      	bne.n	8007cfc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	799b      	ldrb	r3, [r3, #6]
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007cc4:	2305      	movs	r3, #5
 8007cc6:	75fb      	strb	r3, [r7, #23]
 8007cc8:	e019      	b.n	8007cfe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	8992      	ldrh	r2, [r2, #12]
 8007cd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cdc:	fb00 f202 	mul.w	r2, r0, r2
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff fa61 	bl	80071ae <ld_clust>
 8007cec:	4602      	mov	r2, r0
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cf2:	e7bb      	b.n	8007c6c <follow_path+0x50>
			if (res != FR_OK) break;
 8007cf4:	bf00      	nop
 8007cf6:	e002      	b.n	8007cfe <follow_path+0xe2>
				break;
 8007cf8:	bf00      	nop
 8007cfa:	e000      	b.n	8007cfe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007cfc:	bf00      	nop
			}
		}
	}

	return res;
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d10:	f04f 33ff 	mov.w	r3, #4294967295
 8007d14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d031      	beq.n	8007d82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	e002      	b.n	8007d2c <get_ldnumber+0x24>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b1f      	cmp	r3, #31
 8007d32:	d903      	bls.n	8007d3c <get_ldnumber+0x34>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d3a:	d1f4      	bne.n	8007d26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d42:	d11c      	bne.n	8007d7e <get_ldnumber+0x76>
			tp = *path;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	60fa      	str	r2, [r7, #12]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	3b30      	subs	r3, #48	@ 0x30
 8007d54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b09      	cmp	r3, #9
 8007d5a:	d80e      	bhi.n	8007d7a <get_ldnumber+0x72>
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d10a      	bne.n	8007d7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d107      	bne.n	8007d7a <get_ldnumber+0x72>
					vol = (int)i;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	3301      	adds	r3, #1
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	e002      	b.n	8007d84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007d7e:	2300      	movs	r3, #0
 8007d80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007d82:	693b      	ldr	r3, [r7, #16]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	70da      	strb	r2, [r3, #3]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f04f 32ff 	mov.w	r2, #4294967295
 8007da6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fe fc7a 	bl	80066a4 <move_window>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <check_fs+0x2a>
 8007db6:	2304      	movs	r3, #4
 8007db8:	e038      	b.n	8007e2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3338      	adds	r3, #56	@ 0x38
 8007dbe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe f9be 	bl	8006144 <ld_word>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d001      	beq.n	8007dd8 <check_fs+0x48>
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e029      	b.n	8007e2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007dde:	2be9      	cmp	r3, #233	@ 0xe9
 8007de0:	d009      	beq.n	8007df6 <check_fs+0x66>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007de8:	2beb      	cmp	r3, #235	@ 0xeb
 8007dea:	d11e      	bne.n	8007e2a <check_fs+0x9a>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007df2:	2b90      	cmp	r3, #144	@ 0x90
 8007df4:	d119      	bne.n	8007e2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3338      	adds	r3, #56	@ 0x38
 8007dfa:	3336      	adds	r3, #54	@ 0x36
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe f9b9 	bl	8006174 <ld_dword>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e08:	4a0a      	ldr	r2, [pc, #40]	@ (8007e34 <check_fs+0xa4>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d101      	bne.n	8007e12 <check_fs+0x82>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e00c      	b.n	8007e2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3338      	adds	r3, #56	@ 0x38
 8007e16:	3352      	adds	r3, #82	@ 0x52
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe f9ab 	bl	8006174 <ld_dword>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	4a05      	ldr	r2, [pc, #20]	@ (8007e38 <check_fs+0xa8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d101      	bne.n	8007e2a <check_fs+0x9a>
 8007e26:	2300      	movs	r3, #0
 8007e28:	e000      	b.n	8007e2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007e2a:	2302      	movs	r3, #2
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	00544146 	.word	0x00544146
 8007e38:	33544146 	.word	0x33544146

08007e3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b096      	sub	sp, #88	@ 0x58
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ff59 	bl	8007d08 <get_ldnumber>
 8007e56:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	da01      	bge.n	8007e62 <find_volume+0x26>
 8007e5e:	230b      	movs	r3, #11
 8007e60:	e265      	b.n	800832e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007e62:	4a9f      	ldr	r2, [pc, #636]	@ (80080e0 <find_volume+0x2a4>)
 8007e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <find_volume+0x3a>
 8007e72:	230c      	movs	r3, #12
 8007e74:	e25b      	b.n	800832e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	f023 0301 	bic.w	r3, r3, #1
 8007e82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01a      	beq.n	8007ec2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe f8b7 	bl	8006004 <disk_status>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10c      	bne.n	8007ec2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <find_volume+0x82>
 8007eae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007eba:	230a      	movs	r3, #10
 8007ebc:	e237      	b.n	800832e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e235      	b.n	800832e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ece:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe f8af 	bl	8006038 <disk_initialize>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007eec:	2303      	movs	r3, #3
 8007eee:	e21e      	b.n	800832e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d007      	beq.n	8007f06 <find_volume+0xca>
 8007ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f02:	230a      	movs	r3, #10
 8007f04:	e213      	b.n	800832e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f08:	7858      	ldrb	r0, [r3, #1]
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0c:	330c      	adds	r3, #12
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2102      	movs	r1, #2
 8007f12:	f7fe f8f9 	bl	8006108 <disk_ioctl>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <find_volume+0xe4>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e206      	b.n	800832e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f22:	899b      	ldrh	r3, [r3, #12]
 8007f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f28:	d80d      	bhi.n	8007f46 <find_volume+0x10a>
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	899b      	ldrh	r3, [r3, #12]
 8007f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f32:	d308      	bcc.n	8007f46 <find_volume+0x10a>
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	899b      	ldrh	r3, [r3, #12]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3c:	899b      	ldrh	r3, [r3, #12]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	4013      	ands	r3, r2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <find_volume+0x10e>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e1f1      	b.n	800832e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007f4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f52:	f7ff ff1d 	bl	8007d90 <check_fs>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d149      	bne.n	8007ff8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f64:	2300      	movs	r3, #0
 8007f66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f68:	e01e      	b.n	8007fa8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007f78:	4413      	add	r3, r2
 8007f7a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7e:	3304      	adds	r3, #4
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d006      	beq.n	8007f94 <find_volume+0x158>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	3308      	adds	r3, #8
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe f8f2 	bl	8006174 <ld_dword>
 8007f90:	4602      	mov	r2, r0
 8007f92:	e000      	b.n	8007f96 <find_volume+0x15a>
 8007f94:	2200      	movs	r2, #0
 8007f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	3358      	adds	r3, #88	@ 0x58
 8007f9c:	443b      	add	r3, r7
 8007f9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d9dd      	bls.n	8007f6a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007fae:	2300      	movs	r3, #0
 8007fb0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <find_volume+0x182>
 8007fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	3358      	adds	r3, #88	@ 0x58
 8007fc4:	443b      	add	r3, r7
 8007fc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007fca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d005      	beq.n	8007fde <find_volume+0x1a2>
 8007fd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fd6:	f7ff fedb 	bl	8007d90 <check_fs>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	e000      	b.n	8007fe0 <find_volume+0x1a4>
 8007fde:	2303      	movs	r3, #3
 8007fe0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d905      	bls.n	8007ff8 <find_volume+0x1bc>
 8007fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fee:	3301      	adds	r3, #1
 8007ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d9e2      	bls.n	8007fbe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d101      	bne.n	8008004 <find_volume+0x1c8>
 8008000:	2301      	movs	r3, #1
 8008002:	e194      	b.n	800832e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008004:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008008:	2b01      	cmp	r3, #1
 800800a:	d901      	bls.n	8008010 <find_volume+0x1d4>
 800800c:	230d      	movs	r3, #13
 800800e:	e18e      	b.n	800832e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008012:	3338      	adds	r3, #56	@ 0x38
 8008014:	330b      	adds	r3, #11
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe f894 	bl	8006144 <ld_word>
 800801c:	4603      	mov	r3, r0
 800801e:	461a      	mov	r2, r3
 8008020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008022:	899b      	ldrh	r3, [r3, #12]
 8008024:	429a      	cmp	r2, r3
 8008026:	d001      	beq.n	800802c <find_volume+0x1f0>
 8008028:	230d      	movs	r3, #13
 800802a:	e180      	b.n	800832e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800802c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802e:	3338      	adds	r3, #56	@ 0x38
 8008030:	3316      	adds	r3, #22
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe f886 	bl	8006144 <ld_word>
 8008038:	4603      	mov	r3, r0
 800803a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800803c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d106      	bne.n	8008050 <find_volume+0x214>
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	3338      	adds	r3, #56	@ 0x38
 8008046:	3324      	adds	r3, #36	@ 0x24
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe f893 	bl	8006174 <ld_dword>
 800804e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008052:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008054:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008058:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800805c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008062:	789b      	ldrb	r3, [r3, #2]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d005      	beq.n	8008074 <find_volume+0x238>
 8008068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806a:	789b      	ldrb	r3, [r3, #2]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d001      	beq.n	8008074 <find_volume+0x238>
 8008070:	230d      	movs	r3, #13
 8008072:	e15c      	b.n	800832e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	789b      	ldrb	r3, [r3, #2]
 8008078:	461a      	mov	r2, r3
 800807a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800807c:	fb02 f303 	mul.w	r3, r2, r3
 8008080:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008084:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008088:	461a      	mov	r2, r3
 800808a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	895b      	ldrh	r3, [r3, #10]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d008      	beq.n	80080a8 <find_volume+0x26c>
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	895b      	ldrh	r3, [r3, #10]
 800809a:	461a      	mov	r2, r3
 800809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809e:	895b      	ldrh	r3, [r3, #10]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	4013      	ands	r3, r2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <find_volume+0x270>
 80080a8:	230d      	movs	r3, #13
 80080aa:	e140      	b.n	800832e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80080ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ae:	3338      	adds	r3, #56	@ 0x38
 80080b0:	3311      	adds	r3, #17
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe f846 	bl	8006144 <ld_word>
 80080b8:	4603      	mov	r3, r0
 80080ba:	461a      	mov	r2, r3
 80080bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	891b      	ldrh	r3, [r3, #8]
 80080c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080c6:	8992      	ldrh	r2, [r2, #12]
 80080c8:	0952      	lsrs	r2, r2, #5
 80080ca:	b292      	uxth	r2, r2
 80080cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80080d0:	fb01 f202 	mul.w	r2, r1, r2
 80080d4:	1a9b      	subs	r3, r3, r2
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <find_volume+0x2a8>
 80080dc:	230d      	movs	r3, #13
 80080de:	e126      	b.n	800832e <find_volume+0x4f2>
 80080e0:	20002390 	.word	0x20002390

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	3338      	adds	r3, #56	@ 0x38
 80080e8:	3313      	adds	r3, #19
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe f82a 	bl	8006144 <ld_word>
 80080f0:	4603      	mov	r3, r0
 80080f2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80080f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d106      	bne.n	8008108 <find_volume+0x2cc>
 80080fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fc:	3338      	adds	r3, #56	@ 0x38
 80080fe:	3320      	adds	r3, #32
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe f837 	bl	8006174 <ld_dword>
 8008106:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810a:	3338      	adds	r3, #56	@ 0x38
 800810c:	330e      	adds	r3, #14
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe f818 	bl	8006144 <ld_word>
 8008114:	4603      	mov	r3, r0
 8008116:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008118:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <find_volume+0x2e6>
 800811e:	230d      	movs	r3, #13
 8008120:	e105      	b.n	800832e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008122:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008126:	4413      	add	r3, r2
 8008128:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800812a:	8911      	ldrh	r1, [r2, #8]
 800812c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800812e:	8992      	ldrh	r2, [r2, #12]
 8008130:	0952      	lsrs	r2, r2, #5
 8008132:	b292      	uxth	r2, r2
 8008134:	fbb1 f2f2 	udiv	r2, r1, r2
 8008138:	b292      	uxth	r2, r2
 800813a:	4413      	add	r3, r2
 800813c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800813e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008142:	429a      	cmp	r2, r3
 8008144:	d201      	bcs.n	800814a <find_volume+0x30e>
 8008146:	230d      	movs	r3, #13
 8008148:	e0f1      	b.n	800832e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800814a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800814c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008152:	8952      	ldrh	r2, [r2, #10]
 8008154:	fbb3 f3f2 	udiv	r3, r3, r2
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <find_volume+0x328>
 8008160:	230d      	movs	r3, #13
 8008162:	e0e4      	b.n	800832e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008164:	2303      	movs	r3, #3
 8008166:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008170:	4293      	cmp	r3, r2
 8008172:	d802      	bhi.n	800817a <find_volume+0x33e>
 8008174:	2302      	movs	r3, #2
 8008176:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008180:	4293      	cmp	r3, r2
 8008182:	d802      	bhi.n	800818a <find_volume+0x34e>
 8008184:	2301      	movs	r3, #1
 8008186:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	1c9a      	adds	r2, r3, #2
 800818e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008190:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008194:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008196:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008198:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800819a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800819c:	441a      	add	r2, r3
 800819e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80081a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	441a      	add	r2, r3
 80081a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081aa:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80081ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d11e      	bne.n	80081f2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80081b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b6:	3338      	adds	r3, #56	@ 0x38
 80081b8:	332a      	adds	r3, #42	@ 0x2a
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fd ffc2 	bl	8006144 <ld_word>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <find_volume+0x38e>
 80081c6:	230d      	movs	r3, #13
 80081c8:	e0b1      	b.n	800832e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80081ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081cc:	891b      	ldrh	r3, [r3, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <find_volume+0x39a>
 80081d2:	230d      	movs	r3, #13
 80081d4:	e0ab      	b.n	800832e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	3338      	adds	r3, #56	@ 0x38
 80081da:	332c      	adds	r3, #44	@ 0x2c
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fd ffc9 	bl	8006174 <ld_dword>
 80081e2:	4602      	mov	r2, r0
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80081e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80081f0:	e01f      	b.n	8008232 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80081f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f4:	891b      	ldrh	r3, [r3, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <find_volume+0x3c2>
 80081fa:	230d      	movs	r3, #13
 80081fc:	e097      	b.n	800832e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80081fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008200:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008204:	441a      	add	r2, r3
 8008206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008208:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800820a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800820e:	2b02      	cmp	r3, #2
 8008210:	d103      	bne.n	800821a <find_volume+0x3de>
 8008212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	e00a      	b.n	8008230 <find_volume+0x3f4>
 800821a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821c:	69da      	ldr	r2, [r3, #28]
 800821e:	4613      	mov	r3, r2
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	4413      	add	r3, r2
 8008224:	085a      	lsrs	r2, r3, #1
 8008226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008230:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	6a1a      	ldr	r2, [r3, #32]
 8008236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008238:	899b      	ldrh	r3, [r3, #12]
 800823a:	4619      	mov	r1, r3
 800823c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800823e:	440b      	add	r3, r1
 8008240:	3b01      	subs	r3, #1
 8008242:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008244:	8989      	ldrh	r1, [r1, #12]
 8008246:	fbb3 f3f1 	udiv	r3, r3, r1
 800824a:	429a      	cmp	r2, r3
 800824c:	d201      	bcs.n	8008252 <find_volume+0x416>
 800824e:	230d      	movs	r3, #13
 8008250:	e06d      	b.n	800832e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008254:	f04f 32ff 	mov.w	r2, #4294967295
 8008258:	619a      	str	r2, [r3, #24]
 800825a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008264:	2280      	movs	r2, #128	@ 0x80
 8008266:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008268:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800826c:	2b03      	cmp	r3, #3
 800826e:	d149      	bne.n	8008304 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008272:	3338      	adds	r3, #56	@ 0x38
 8008274:	3330      	adds	r3, #48	@ 0x30
 8008276:	4618      	mov	r0, r3
 8008278:	f7fd ff64 	bl	8006144 <ld_word>
 800827c:	4603      	mov	r3, r0
 800827e:	2b01      	cmp	r3, #1
 8008280:	d140      	bne.n	8008304 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008284:	3301      	adds	r3, #1
 8008286:	4619      	mov	r1, r3
 8008288:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800828a:	f7fe fa0b 	bl	80066a4 <move_window>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d137      	bne.n	8008304 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	2200      	movs	r2, #0
 8008298:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829c:	3338      	adds	r3, #56	@ 0x38
 800829e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fd ff4e 	bl	8006144 <ld_word>
 80082a8:	4603      	mov	r3, r0
 80082aa:	461a      	mov	r2, r3
 80082ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d127      	bne.n	8008304 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80082b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b6:	3338      	adds	r3, #56	@ 0x38
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fd ff5b 	bl	8006174 <ld_dword>
 80082be:	4603      	mov	r3, r0
 80082c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008338 <find_volume+0x4fc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d11e      	bne.n	8008304 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80082c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c8:	3338      	adds	r3, #56	@ 0x38
 80082ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fd ff50 	bl	8006174 <ld_dword>
 80082d4:	4603      	mov	r3, r0
 80082d6:	4a19      	ldr	r2, [pc, #100]	@ (800833c <find_volume+0x500>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d113      	bne.n	8008304 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80082dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082de:	3338      	adds	r3, #56	@ 0x38
 80082e0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fd ff45 	bl	8006174 <ld_dword>
 80082ea:	4602      	mov	r2, r0
 80082ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80082f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f2:	3338      	adds	r3, #56	@ 0x38
 80082f4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fd ff3b 	bl	8006174 <ld_dword>
 80082fe:	4602      	mov	r2, r0
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800830a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800830c:	4b0c      	ldr	r3, [pc, #48]	@ (8008340 <find_volume+0x504>)
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	4b0a      	ldr	r3, [pc, #40]	@ (8008340 <find_volume+0x504>)
 8008316:	801a      	strh	r2, [r3, #0]
 8008318:	4b09      	ldr	r3, [pc, #36]	@ (8008340 <find_volume+0x504>)
 800831a:	881a      	ldrh	r2, [r3, #0]
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008322:	4a08      	ldr	r2, [pc, #32]	@ (8008344 <find_volume+0x508>)
 8008324:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008326:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008328:	f7fe f954 	bl	80065d4 <clear_lock>
#endif
	return FR_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3758      	adds	r7, #88	@ 0x58
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	41615252 	.word	0x41615252
 800833c:	61417272 	.word	0x61417272
 8008340:	20002394 	.word	0x20002394
 8008344:	200023b8 	.word	0x200023b8

08008348 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008352:	2309      	movs	r3, #9
 8008354:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01c      	beq.n	8008396 <validate+0x4e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d018      	beq.n	8008396 <validate+0x4e>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d013      	beq.n	8008396 <validate+0x4e>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	889a      	ldrh	r2, [r3, #4]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	88db      	ldrh	r3, [r3, #6]
 8008378:	429a      	cmp	r2, r3
 800837a:	d10c      	bne.n	8008396 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	4618      	mov	r0, r3
 8008384:	f7fd fe3e 	bl	8006004 <disk_status>
 8008388:	4603      	mov	r3, r0
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <validate+0x4e>
			res = FR_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <validate+0x5a>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	e000      	b.n	80083a4 <validate+0x5c>
 80083a2:	2300      	movs	r3, #0
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	6013      	str	r3, [r2, #0]
	return res;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80083c6:	f107 0310 	add.w	r3, r7, #16
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff fc9c 	bl	8007d08 <get_ldnumber>
 80083d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	da01      	bge.n	80083dc <f_mount+0x28>
 80083d8:	230b      	movs	r3, #11
 80083da:	e02b      	b.n	8008434 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80083dc:	4a17      	ldr	r2, [pc, #92]	@ (800843c <f_mount+0x88>)
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80083ec:	69b8      	ldr	r0, [r7, #24]
 80083ee:	f7fe f8f1 	bl	80065d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2200      	movs	r2, #0
 80083f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	490d      	ldr	r1, [pc, #52]	@ (800843c <f_mount+0x88>)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <f_mount+0x66>
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d001      	beq.n	800841e <f_mount+0x6a>
 800841a:	2300      	movs	r3, #0
 800841c:	e00a      	b.n	8008434 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800841e:	f107 010c 	add.w	r1, r7, #12
 8008422:	f107 0308 	add.w	r3, r7, #8
 8008426:	2200      	movs	r2, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff fd07 	bl	8007e3c <find_volume>
 800842e:	4603      	mov	r3, r0
 8008430:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008432:	7dfb      	ldrb	r3, [r7, #23]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	20002390 	.word	0x20002390

08008440 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b09a      	sub	sp, #104	@ 0x68
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <f_open+0x18>
 8008454:	2309      	movs	r3, #9
 8008456:	e1b7      	b.n	80087c8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800845e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008460:	79fa      	ldrb	r2, [r7, #7]
 8008462:	f107 0114 	add.w	r1, r7, #20
 8008466:	f107 0308 	add.w	r3, r7, #8
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff fce6 	bl	8007e3c <find_volume>
 8008470:	4603      	mov	r3, r0
 8008472:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008476:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800847a:	2b00      	cmp	r3, #0
 800847c:	f040 819b 	bne.w	80087b6 <f_open+0x376>
		dj.obj.fs = fs;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	f107 0318 	add.w	r3, r7, #24
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff fbc5 	bl	8007c1c <follow_path>
 8008492:	4603      	mov	r3, r0
 8008494:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008498:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800849c:	2b00      	cmp	r3, #0
 800849e:	d118      	bne.n	80084d2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80084a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084a4:	b25b      	sxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da03      	bge.n	80084b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80084aa:	2306      	movs	r3, #6
 80084ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80084b0:	e00f      	b.n	80084d2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	bf8c      	ite	hi
 80084b8:	2301      	movhi	r3, #1
 80084ba:	2300      	movls	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	f107 0318 	add.w	r3, r7, #24
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fd ff3c 	bl	8006344 <chk_lock>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084d2:	79fb      	ldrb	r3, [r7, #7]
 80084d4:	f003 031c 	and.w	r3, r3, #28
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d07f      	beq.n	80085dc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80084dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d017      	beq.n	8008514 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80084e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d10e      	bne.n	800850a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084ec:	f7fd ff86 	bl	80063fc <enq_lock>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d006      	beq.n	8008504 <f_open+0xc4>
 80084f6:	f107 0318 	add.w	r3, r7, #24
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff f8de 	bl	80076bc <dir_register>
 8008500:	4603      	mov	r3, r0
 8008502:	e000      	b.n	8008506 <f_open+0xc6>
 8008504:	2312      	movs	r3, #18
 8008506:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	f043 0308 	orr.w	r3, r3, #8
 8008510:	71fb      	strb	r3, [r7, #7]
 8008512:	e010      	b.n	8008536 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008514:	7fbb      	ldrb	r3, [r7, #30]
 8008516:	f003 0311 	and.w	r3, r3, #17
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <f_open+0xe6>
					res = FR_DENIED;
 800851e:	2307      	movs	r3, #7
 8008520:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008524:	e007      	b.n	8008536 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <f_open+0xf6>
 8008530:	2308      	movs	r3, #8
 8008532:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008536:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800853a:	2b00      	cmp	r3, #0
 800853c:	d168      	bne.n	8008610 <f_open+0x1d0>
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	f003 0308 	and.w	r3, r3, #8
 8008544:	2b00      	cmp	r3, #0
 8008546:	d063      	beq.n	8008610 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008548:	f7fd fcfe 	bl	8005f48 <get_fattime>
 800854c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800854e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008550:	330e      	adds	r3, #14
 8008552:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008554:	4618      	mov	r0, r3
 8008556:	f7fd fe4b 	bl	80061f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800855a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855c:	3316      	adds	r3, #22
 800855e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008560:	4618      	mov	r0, r3
 8008562:	f7fd fe45 	bl	80061f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008568:	330b      	adds	r3, #11
 800856a:	2220      	movs	r2, #32
 800856c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008572:	4611      	mov	r1, r2
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe fe1a 	bl	80071ae <ld_clust>
 800857a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008580:	2200      	movs	r2, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fe32 	bl	80071ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858a:	331c      	adds	r3, #28
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f7fd fe2e 	bl	80061f0 <st_dword>
					fs->wflag = 1;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2201      	movs	r2, #1
 8008598:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800859a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800859c:	2b00      	cmp	r3, #0
 800859e:	d037      	beq.n	8008610 <f_open+0x1d0>
						dw = fs->winsect;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80085a6:	f107 0318 	add.w	r3, r7, #24
 80085aa:	2200      	movs	r2, #0
 80085ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe fb22 	bl	8006bf8 <remove_chain>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80085ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d126      	bne.n	8008610 <f_open+0x1d0>
							res = move_window(fs, dw);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe f86c 	bl	80066a4 <move_window>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80085d6:	3a01      	subs	r2, #1
 80085d8:	615a      	str	r2, [r3, #20]
 80085da:	e019      	b.n	8008610 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80085dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d115      	bne.n	8008610 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80085e4:	7fbb      	ldrb	r3, [r7, #30]
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80085ee:	2304      	movs	r3, #4
 80085f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80085f4:	e00c      	b.n	8008610 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <f_open+0x1d0>
 8008600:	7fbb      	ldrb	r3, [r7, #30]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <f_open+0x1d0>
						res = FR_DENIED;
 800860a:	2307      	movs	r3, #7
 800860c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008610:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008614:	2b00      	cmp	r3, #0
 8008616:	d126      	bne.n	8008666 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	f003 0308 	and.w	r3, r3, #8
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008628:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008632:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	2b01      	cmp	r3, #1
 800863c:	bf8c      	ite	hi
 800863e:	2301      	movhi	r3, #1
 8008640:	2300      	movls	r3, #0
 8008642:	b2db      	uxtb	r3, r3
 8008644:	461a      	mov	r2, r3
 8008646:	f107 0318 	add.w	r3, r7, #24
 800864a:	4611      	mov	r1, r2
 800864c:	4618      	mov	r0, r3
 800864e:	f7fd fef7 	bl	8006440 <inc_lock>
 8008652:	4602      	mov	r2, r0
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <f_open+0x226>
 8008660:	2302      	movs	r3, #2
 8008662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008666:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800866a:	2b00      	cmp	r3, #0
 800866c:	f040 80a3 	bne.w	80087b6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008674:	4611      	mov	r1, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fd99 	bl	80071ae <ld_clust>
 800867c:	4602      	mov	r2, r0
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008684:	331c      	adds	r3, #28
 8008686:	4618      	mov	r0, r3
 8008688:	f7fd fd74 	bl	8006174 <ld_dword>
 800868c:	4602      	mov	r2, r0
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	88da      	ldrh	r2, [r3, #6]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	79fa      	ldrb	r2, [r7, #7]
 80086aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3330      	adds	r3, #48	@ 0x30
 80086c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fd fdde 	bl	800628a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d06e      	beq.n	80087b6 <f_open+0x376>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d06a      	beq.n	80087b6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	895b      	ldrh	r3, [r3, #10]
 80086ec:	461a      	mov	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	899b      	ldrh	r3, [r3, #12]
 80086f2:	fb02 f303 	mul.w	r3, r2, r3
 80086f6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008704:	e016      	b.n	8008734 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe f887 	bl	800681e <get_fat>
 8008710:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008714:	2b01      	cmp	r3, #1
 8008716:	d802      	bhi.n	800871e <f_open+0x2de>
 8008718:	2302      	movs	r3, #2
 800871a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800871e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008724:	d102      	bne.n	800872c <f_open+0x2ec>
 8008726:	2301      	movs	r3, #1
 8008728:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800872c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800872e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008734:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008738:	2b00      	cmp	r3, #0
 800873a:	d103      	bne.n	8008744 <f_open+0x304>
 800873c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800873e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008740:	429a      	cmp	r2, r3
 8008742:	d8e0      	bhi.n	8008706 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008748:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800874a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800874e:	2b00      	cmp	r3, #0
 8008750:	d131      	bne.n	80087b6 <f_open+0x376>
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	899b      	ldrh	r3, [r3, #12]
 8008756:	461a      	mov	r2, r3
 8008758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800875a:	fbb3 f1f2 	udiv	r1, r3, r2
 800875e:	fb01 f202 	mul.w	r2, r1, r2
 8008762:	1a9b      	subs	r3, r3, r2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d026      	beq.n	80087b6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe f837 	bl	80067e0 <clust2sect>
 8008772:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008776:	2b00      	cmp	r3, #0
 8008778:	d103      	bne.n	8008782 <f_open+0x342>
						res = FR_INT_ERR;
 800877a:	2302      	movs	r3, #2
 800877c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008780:	e019      	b.n	80087b6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	899b      	ldrh	r3, [r3, #12]
 8008786:	461a      	mov	r2, r3
 8008788:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800878a:	fbb3 f2f2 	udiv	r2, r3, r2
 800878e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008790:	441a      	add	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	7858      	ldrb	r0, [r3, #1]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a1a      	ldr	r2, [r3, #32]
 80087a4:	2301      	movs	r3, #1
 80087a6:	f7fd fc6f 	bl	8006088 <disk_read>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <f_open+0x376>
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80087b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <f_open+0x384>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80087c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3768      	adds	r7, #104	@ 0x68
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08c      	sub	sp, #48	@ 0x30
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f107 0210 	add.w	r2, r7, #16
 80087ee:	4611      	mov	r1, r2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff fda9 	bl	8008348 <validate>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80087fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008800:	2b00      	cmp	r3, #0
 8008802:	d107      	bne.n	8008814 <f_write+0x44>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	7d5b      	ldrb	r3, [r3, #21]
 8008808:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800880c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <f_write+0x4a>
 8008814:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008818:	e16a      	b.n	8008af0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	7d1b      	ldrb	r3, [r3, #20]
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <f_write+0x5a>
 8008826:	2307      	movs	r3, #7
 8008828:	e162      	b.n	8008af0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	699a      	ldr	r2, [r3, #24]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	441a      	add	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	429a      	cmp	r2, r3
 8008838:	f080 814c 	bcs.w	8008ad4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	43db      	mvns	r3, r3
 8008842:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008844:	e146      	b.n	8008ad4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	8992      	ldrh	r2, [r2, #12]
 800884e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008852:	fb01 f202 	mul.w	r2, r1, r2
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	2b00      	cmp	r3, #0
 800885a:	f040 80f1 	bne.w	8008a40 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	8992      	ldrh	r2, [r2, #12]
 8008866:	fbb3 f3f2 	udiv	r3, r3, r2
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	8952      	ldrh	r2, [r2, #10]
 800886e:	3a01      	subs	r2, #1
 8008870:	4013      	ands	r3, r2
 8008872:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d143      	bne.n	8008902 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10c      	bne.n	800889c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	d11a      	bne.n	80088c4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2100      	movs	r1, #0
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fa15 	bl	8006cc2 <create_chain>
 8008898:	62b8      	str	r0, [r7, #40]	@ 0x28
 800889a:	e013      	b.n	80088c4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	4619      	mov	r1, r3
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f7fe faa1 	bl	8006df2 <clmt_clust>
 80088b0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80088b2:	e007      	b.n	80088c4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f7fe fa00 	bl	8006cc2 <create_chain>
 80088c2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8109 	beq.w	8008ade <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80088cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d104      	bne.n	80088dc <f_write+0x10c>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2202      	movs	r2, #2
 80088d6:	755a      	strb	r2, [r3, #21]
 80088d8:	2302      	movs	r3, #2
 80088da:	e109      	b.n	8008af0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80088dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d104      	bne.n	80088ee <f_write+0x11e>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	755a      	strb	r2, [r3, #21]
 80088ea:	2301      	movs	r3, #1
 80088ec:	e100      	b.n	8008af0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088f2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <f_write+0x132>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008900:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	7d1b      	ldrb	r3, [r3, #20]
 8008906:	b25b      	sxtb	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	da18      	bge.n	800893e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	7858      	ldrb	r0, [r3, #1]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a1a      	ldr	r2, [r3, #32]
 800891a:	2301      	movs	r3, #1
 800891c:	f7fd fbd4 	bl	80060c8 <disk_write>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <f_write+0x160>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	755a      	strb	r2, [r3, #21]
 800892c:	2301      	movs	r3, #1
 800892e:	e0df      	b.n	8008af0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	7d1b      	ldrb	r3, [r3, #20]
 8008934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008938:	b2da      	uxtb	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	4619      	mov	r1, r3
 8008946:	4610      	mov	r0, r2
 8008948:	f7fd ff4a 	bl	80067e0 <clust2sect>
 800894c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <f_write+0x18e>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2202      	movs	r2, #2
 8008958:	755a      	strb	r2, [r3, #21]
 800895a:	2302      	movs	r3, #2
 800895c:	e0c8      	b.n	8008af0 <f_write+0x320>
			sect += csect;
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	4413      	add	r3, r2
 8008964:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	899b      	ldrh	r3, [r3, #12]
 800896a:	461a      	mov	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008972:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d043      	beq.n	8008a02 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	4413      	add	r3, r2
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	8952      	ldrh	r2, [r2, #10]
 8008984:	4293      	cmp	r3, r2
 8008986:	d905      	bls.n	8008994 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	895b      	ldrh	r3, [r3, #10]
 800898c:	461a      	mov	r2, r3
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	7858      	ldrb	r0, [r3, #1]
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	69f9      	ldr	r1, [r7, #28]
 800899e:	f7fd fb93 	bl	80060c8 <disk_write>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <f_write+0x1e2>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	755a      	strb	r2, [r3, #21]
 80089ae:	2301      	movs	r3, #1
 80089b0:	e09e      	b.n	8008af0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a1a      	ldr	r2, [r3, #32]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	6a3a      	ldr	r2, [r7, #32]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d918      	bls.n	80089f2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a1a      	ldr	r2, [r3, #32]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	8992      	ldrh	r2, [r2, #12]
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	69fa      	ldr	r2, [r7, #28]
 80089d8:	18d1      	adds	r1, r2, r3
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	899b      	ldrh	r3, [r3, #12]
 80089de:	461a      	mov	r2, r3
 80089e0:	f7fd fc32 	bl	8006248 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	7d1b      	ldrb	r3, [r3, #20]
 80089e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	899b      	ldrh	r3, [r3, #12]
 80089f6:	461a      	mov	r2, r3
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
 80089fe:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008a00:	e04b      	b.n	8008a9a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d016      	beq.n	8008a3a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	699a      	ldr	r2, [r3, #24]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d210      	bcs.n	8008a3a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	7858      	ldrb	r0, [r3, #1]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a22:	2301      	movs	r3, #1
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	f7fd fb2f 	bl	8006088 <disk_read>
 8008a2a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d004      	beq.n	8008a3a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	755a      	strb	r2, [r3, #21]
 8008a36:	2301      	movs	r3, #1
 8008a38:	e05a      	b.n	8008af0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	899b      	ldrh	r3, [r3, #12]
 8008a44:	4618      	mov	r0, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	8992      	ldrh	r2, [r2, #12]
 8008a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a52:	fb01 f202 	mul.w	r2, r1, r2
 8008a56:	1a9b      	subs	r3, r3, r2
 8008a58:	1ac3      	subs	r3, r0, r3
 8008a5a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d901      	bls.n	8008a68 <f_write+0x298>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	8992      	ldrh	r2, [r2, #12]
 8008a76:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a7a:	fb00 f202 	mul.w	r2, r0, r2
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	440b      	add	r3, r1
 8008a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a84:	69f9      	ldr	r1, [r7, #28]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fd fbde 	bl	8006248 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	7d1b      	ldrb	r3, [r3, #20]
 8008a90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9e:	4413      	add	r3, r2
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa8:	441a      	add	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	619a      	str	r2, [r3, #24]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	bf38      	it	cc
 8008aba:	461a      	movcc	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	60da      	str	r2, [r3, #12]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	441a      	add	r2, r3
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f47f aeb5 	bne.w	8008846 <f_write+0x76>
 8008adc:	e000      	b.n	8008ae0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ade:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	7d1b      	ldrb	r3, [r3, #20]
 8008ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3730      	adds	r7, #48	@ 0x30
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f107 0208 	add.w	r2, r7, #8
 8008b06:	4611      	mov	r1, r2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff fc1d 	bl	8008348 <validate>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d168      	bne.n	8008bea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	7d1b      	ldrb	r3, [r3, #20]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d062      	beq.n	8008bea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	7d1b      	ldrb	r3, [r3, #20]
 8008b28:	b25b      	sxtb	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da15      	bge.n	8008b5a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	7858      	ldrb	r0, [r3, #1]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a1a      	ldr	r2, [r3, #32]
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f7fd fac3 	bl	80060c8 <disk_write>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <f_sync+0x54>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e04f      	b.n	8008bec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7d1b      	ldrb	r3, [r3, #20]
 8008b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008b5a:	f7fd f9f5 	bl	8005f48 <get_fattime>
 8008b5e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b66:	4619      	mov	r1, r3
 8008b68:	4610      	mov	r0, r2
 8008b6a:	f7fd fd9b 	bl	80066a4 <move_window>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d138      	bne.n	8008bea <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	330b      	adds	r3, #11
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	330b      	adds	r3, #11
 8008b88:	f042 0220 	orr.w	r2, r2, #32
 8008b8c:	b2d2      	uxtb	r2, r2
 8008b8e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6818      	ldr	r0, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	68f9      	ldr	r1, [r7, #12]
 8008b9c:	f7fe fb26 	bl	80071ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f103 021c 	add.w	r2, r3, #28
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	4619      	mov	r1, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	f7fd fb1f 	bl	80061f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3316      	adds	r3, #22
 8008bb6:	6939      	ldr	r1, [r7, #16]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fd fb19 	bl	80061f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3312      	adds	r3, #18
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fd faf8 	bl	80061ba <st_word>
					fs->wflag = 1;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fd fd94 	bl	8006700 <sync_fs>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7d1b      	ldrb	r3, [r3, #20]
 8008be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff ff7b 	bl	8008af8 <f_sync>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d118      	bne.n	8008c3e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f107 0208 	add.w	r2, r7, #8
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7ff fb97 	bl	8008348 <validate>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10c      	bne.n	8008c3e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fd fc97 	bl	800655c <dec_lock>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b090      	sub	sp, #64	@ 0x40
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f107 0208 	add.w	r2, r7, #8
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff fb74 	bl	8008348 <validate>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008c66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d103      	bne.n	8008c76 <f_lseek+0x2e>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	7d5b      	ldrb	r3, [r3, #21]
 8008c72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008c76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <f_lseek+0x3c>
 8008c7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008c82:	e201      	b.n	8009088 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 80d9 	beq.w	8008e40 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d15a      	bne.n	8008d4c <f_lseek+0x104>
			tbl = fp->cltbl;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9e:	1d1a      	adds	r2, r3, #4
 8008ca0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	617b      	str	r3, [r7, #20]
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d03a      	beq.n	8008d2c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc0:	3302      	adds	r3, #2
 8008cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	3301      	adds	r3, #1
 8008ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fd fda3 	bl	800681e <get_fat>
 8008cd8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d804      	bhi.n	8008cea <f_lseek+0xa2>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	755a      	strb	r2, [r3, #21]
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e1ce      	b.n	8009088 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d104      	bne.n	8008cfc <f_lseek+0xb4>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	755a      	strb	r2, [r3, #21]
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e1c5      	b.n	8009088 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d0de      	beq.n	8008cc4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d809      	bhi.n	8008d22 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d10:	1d1a      	adds	r2, r3, #4
 8008d12:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1a:	1d1a      	adds	r2, r3, #4
 8008d1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d3c4      	bcc.n	8008cb6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d32:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d803      	bhi.n	8008d44 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	e19f      	b.n	8009084 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008d44:	2311      	movs	r3, #17
 8008d46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008d4a:	e19b      	b.n	8009084 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d902      	bls.n	8008d5c <f_lseek+0x114>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 818d 	beq.w	8009084 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7fe f83e 	bl	8006df2 <clmt_clust>
 8008d76:	4602      	mov	r2, r0
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	4619      	mov	r1, r3
 8008d84:	4610      	mov	r0, r2
 8008d86:	f7fd fd2b 	bl	80067e0 <clust2sect>
 8008d8a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d104      	bne.n	8008d9c <f_lseek+0x154>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2202      	movs	r2, #2
 8008d96:	755a      	strb	r2, [r3, #21]
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e175      	b.n	8009088 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	8992      	ldrh	r2, [r2, #12]
 8008da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	8952      	ldrh	r2, [r2, #10]
 8008dac:	3a01      	subs	r2, #1
 8008dae:	4013      	ands	r3, r2
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	4413      	add	r3, r2
 8008db4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	8992      	ldrh	r2, [r2, #12]
 8008dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dc2:	fb01 f202 	mul.w	r2, r1, r2
 8008dc6:	1a9b      	subs	r3, r3, r2
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 815b 	beq.w	8009084 <f_lseek+0x43c>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	f000 8155 	beq.w	8009084 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	7d1b      	ldrb	r3, [r3, #20]
 8008dde:	b25b      	sxtb	r3, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	da18      	bge.n	8008e16 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	7858      	ldrb	r0, [r3, #1]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1a      	ldr	r2, [r3, #32]
 8008df2:	2301      	movs	r3, #1
 8008df4:	f7fd f968 	bl	80060c8 <disk_write>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d004      	beq.n	8008e08 <f_lseek+0x1c0>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	755a      	strb	r2, [r3, #21]
 8008e04:	2301      	movs	r3, #1
 8008e06:	e13f      	b.n	8009088 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	7d1b      	ldrb	r3, [r3, #20]
 8008e0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	7858      	ldrb	r0, [r3, #1]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e20:	2301      	movs	r3, #1
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	f7fd f930 	bl	8006088 <disk_read>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <f_lseek+0x1f0>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	755a      	strb	r2, [r3, #21]
 8008e34:	2301      	movs	r3, #1
 8008e36:	e127      	b.n	8009088 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	621a      	str	r2, [r3, #32]
 8008e3e:	e121      	b.n	8009084 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d908      	bls.n	8008e5c <f_lseek+0x214>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	7d1b      	ldrb	r3, [r3, #20]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e6a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 80b5 	beq.w	8008fde <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	895b      	ldrh	r3, [r3, #10]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	899b      	ldrh	r3, [r3, #12]
 8008e7e:	fb02 f303 	mul.w	r3, r2, r3
 8008e82:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d01b      	beq.n	8008ec2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	1e59      	subs	r1, r3, #1
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d30f      	bcc.n	8008ec2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	1e5a      	subs	r2, r3, #1
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	425b      	negs	r3, r3
 8008eaa:	401a      	ands	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ec0:	e022      	b.n	8008f08 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d119      	bne.n	8008f02 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fd fef5 	bl	8006cc2 <create_chain>
 8008ed8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d104      	bne.n	8008eea <f_lseek+0x2a2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	755a      	strb	r2, [r3, #21]
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	e0ce      	b.n	8009088 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d104      	bne.n	8008efc <f_lseek+0x2b4>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	755a      	strb	r2, [r3, #21]
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e0c5      	b.n	8009088 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f00:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f06:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d067      	beq.n	8008fde <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008f0e:	e03a      	b.n	8008f86 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699a      	ldr	r2, [r3, #24]
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	441a      	add	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7d1b      	ldrb	r3, [r3, #20]
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fd fec4 	bl	8006cc2 <create_chain>
 8008f3a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d108      	bne.n	8008f54 <f_lseek+0x30c>
							ofs = 0; break;
 8008f42:	2300      	movs	r3, #0
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	e022      	b.n	8008f8e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fd fc66 	bl	800681e <get_fat>
 8008f52:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5a:	d104      	bne.n	8008f66 <f_lseek+0x31e>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	755a      	strb	r2, [r3, #21]
 8008f62:	2301      	movs	r3, #1
 8008f64:	e090      	b.n	8009088 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d904      	bls.n	8008f76 <f_lseek+0x32e>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d304      	bcc.n	8008f80 <f_lseek+0x338>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	755a      	strb	r2, [r3, #21]
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e083      	b.n	8009088 <f_lseek+0x440>
					fp->clust = clst;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f84:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d8c0      	bhi.n	8008f10 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	441a      	add	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	899b      	ldrh	r3, [r3, #12]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fa6:	fb01 f202 	mul.w	r2, r1, r2
 8008faa:	1a9b      	subs	r3, r3, r2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d016      	beq.n	8008fde <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fd fc13 	bl	80067e0 <clust2sect>
 8008fba:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d104      	bne.n	8008fcc <f_lseek+0x384>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	755a      	strb	r2, [r3, #21]
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e05d      	b.n	8009088 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	899b      	ldrh	r3, [r3, #12]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fda:	4413      	add	r3, r2
 8008fdc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d90a      	bls.n	8009000 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	699a      	ldr	r2, [r3, #24]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7d1b      	ldrb	r3, [r3, #20]
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	8992      	ldrh	r2, [r2, #12]
 8009008:	fbb3 f1f2 	udiv	r1, r3, r2
 800900c:	fb01 f202 	mul.w	r2, r1, r2
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d036      	beq.n	8009084 <f_lseek+0x43c>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800901c:	429a      	cmp	r2, r3
 800901e:	d031      	beq.n	8009084 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	7d1b      	ldrb	r3, [r3, #20]
 8009024:	b25b      	sxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	da18      	bge.n	800905c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	7858      	ldrb	r0, [r3, #1]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	2301      	movs	r3, #1
 800903a:	f7fd f845 	bl	80060c8 <disk_write>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <f_lseek+0x406>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	755a      	strb	r2, [r3, #21]
 800904a:	2301      	movs	r3, #1
 800904c:	e01c      	b.n	8009088 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	7d1b      	ldrb	r3, [r3, #20]
 8009052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009056:	b2da      	uxtb	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	7858      	ldrb	r0, [r3, #1]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009066:	2301      	movs	r3, #1
 8009068:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800906a:	f7fd f80d 	bl	8006088 <disk_read>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <f_lseek+0x436>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	755a      	strb	r2, [r3, #21]
 800907a:	2301      	movs	r3, #1
 800907c:	e004      	b.n	8009088 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009082:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009084:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009088:	4618      	mov	r0, r3
 800908a:	3740      	adds	r7, #64	@ 0x40
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b092      	sub	sp, #72	@ 0x48
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800909c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80090a0:	f107 030c 	add.w	r3, r7, #12
 80090a4:	2200      	movs	r2, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fec8 	bl	8007e3c <find_volume>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80090b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f040 8099 	bne.w	80091ee <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80090bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80090c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	3b02      	subs	r3, #2
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d804      	bhi.n	80090da <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80090d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	e089      	b.n	80091ee <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80090de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d128      	bne.n	8009138 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80090e6:	2302      	movs	r3, #2
 80090e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ec:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80090ee:	f107 0314 	add.w	r3, r7, #20
 80090f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd fb92 	bl	800681e <get_fat>
 80090fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80090fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009102:	d103      	bne.n	800910c <f_getfree+0x7c>
 8009104:	2301      	movs	r3, #1
 8009106:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800910a:	e063      	b.n	80091d4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800910c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910e:	2b01      	cmp	r3, #1
 8009110:	d103      	bne.n	800911a <f_getfree+0x8a>
 8009112:	2302      	movs	r3, #2
 8009114:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009118:	e05c      	b.n	80091d4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800911a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <f_getfree+0x96>
 8009120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009122:	3301      	adds	r3, #1
 8009124:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8009126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009128:	3301      	adds	r3, #1
 800912a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800912c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009132:	429a      	cmp	r2, r3
 8009134:	d3db      	bcc.n	80090ee <f_getfree+0x5e>
 8009136:	e04d      	b.n	80091d4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800913e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009142:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	637b      	str	r3, [r7, #52]	@ 0x34
 8009148:	2300      	movs	r3, #0
 800914a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800914c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914e:	2b00      	cmp	r3, #0
 8009150:	d113      	bne.n	800917a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	63ba      	str	r2, [r7, #56]	@ 0x38
 800915a:	4619      	mov	r1, r3
 800915c:	f7fd faa2 	bl	80066a4 <move_window>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8009166:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800916a:	2b00      	cmp	r3, #0
 800916c:	d131      	bne.n	80091d2 <f_getfree+0x142>
							p = fs->win;
 800916e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009170:	3338      	adds	r3, #56	@ 0x38
 8009172:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009176:	899b      	ldrh	r3, [r3, #12]
 8009178:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b02      	cmp	r3, #2
 8009180:	d10f      	bne.n	80091a2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009182:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009184:	f7fc ffde 	bl	8006144 <ld_word>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d102      	bne.n	8009194 <f_getfree+0x104>
 800918e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009190:	3301      	adds	r3, #1
 8009192:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009196:	3302      	adds	r3, #2
 8009198:	633b      	str	r3, [r7, #48]	@ 0x30
 800919a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919c:	3b02      	subs	r3, #2
 800919e:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a0:	e010      	b.n	80091c4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80091a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091a4:	f7fc ffe6 	bl	8006174 <ld_dword>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d102      	bne.n	80091b8 <f_getfree+0x128>
 80091b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091b4:	3301      	adds	r3, #1
 80091b6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80091b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ba:	3304      	adds	r3, #4
 80091bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80091be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c0:	3b04      	subs	r3, #4
 80091c2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80091c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c6:	3b01      	subs	r3, #1
 80091c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1bd      	bne.n	800914c <f_getfree+0xbc>
 80091d0:	e000      	b.n	80091d4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80091d2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091d8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80091da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091de:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80091e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e2:	791a      	ldrb	r2, [r3, #4]
 80091e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	b2d2      	uxtb	r2, r2
 80091ec:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80091ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3748      	adds	r7, #72	@ 0x48
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b087      	sub	sp, #28
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800920a:	2301      	movs	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009212:	4b1f      	ldr	r3, [pc, #124]	@ (8009290 <FATFS_LinkDriverEx+0x94>)
 8009214:	7a5b      	ldrb	r3, [r3, #9]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	d131      	bne.n	8009280 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800921c:	4b1c      	ldr	r3, [pc, #112]	@ (8009290 <FATFS_LinkDriverEx+0x94>)
 800921e:	7a5b      	ldrb	r3, [r3, #9]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	461a      	mov	r2, r3
 8009224:	4b1a      	ldr	r3, [pc, #104]	@ (8009290 <FATFS_LinkDriverEx+0x94>)
 8009226:	2100      	movs	r1, #0
 8009228:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800922a:	4b19      	ldr	r3, [pc, #100]	@ (8009290 <FATFS_LinkDriverEx+0x94>)
 800922c:	7a5b      	ldrb	r3, [r3, #9]
 800922e:	b2db      	uxtb	r3, r3
 8009230:	4a17      	ldr	r2, [pc, #92]	@ (8009290 <FATFS_LinkDriverEx+0x94>)
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800923a:	4b15      	ldr	r3, [pc, #84]	@ (8009290 <FATFS_LinkDriverEx+0x94>)
 800923c:	7a5b      	ldrb	r3, [r3, #9]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	461a      	mov	r2, r3
 8009242:	4b13      	ldr	r3, [pc, #76]	@ (8009290 <FATFS_LinkDriverEx+0x94>)
 8009244:	4413      	add	r3, r2
 8009246:	79fa      	ldrb	r2, [r7, #7]
 8009248:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800924a:	4b11      	ldr	r3, [pc, #68]	@ (8009290 <FATFS_LinkDriverEx+0x94>)
 800924c:	7a5b      	ldrb	r3, [r3, #9]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	b2d1      	uxtb	r1, r2
 8009254:	4a0e      	ldr	r2, [pc, #56]	@ (8009290 <FATFS_LinkDriverEx+0x94>)
 8009256:	7251      	strb	r1, [r2, #9]
 8009258:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800925a:	7dbb      	ldrb	r3, [r7, #22]
 800925c:	3330      	adds	r3, #48	@ 0x30
 800925e:	b2da      	uxtb	r2, r3
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	3301      	adds	r3, #1
 8009268:	223a      	movs	r2, #58	@ 0x3a
 800926a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	3302      	adds	r3, #2
 8009270:	222f      	movs	r2, #47	@ 0x2f
 8009272:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	3303      	adds	r3, #3
 8009278:	2200      	movs	r2, #0
 800927a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009280:	7dfb      	ldrb	r3, [r7, #23]
}
 8009282:	4618      	mov	r0, r3
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	200025b8 	.word	0x200025b8

08009294 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800929e:	2200      	movs	r2, #0
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7ff ffaa 	bl	80091fc <FATFS_LinkDriverEx>
 80092a8:	4603      	mov	r3, r0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	6039      	str	r1, [r7, #0]
 80092be:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80092c4:	d802      	bhi.n	80092cc <ff_convert+0x18>
		c = chr;
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	81fb      	strh	r3, [r7, #14]
 80092ca:	e025      	b.n	8009318 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80092d2:	88fb      	ldrh	r3, [r7, #6]
 80092d4:	2bff      	cmp	r3, #255	@ 0xff
 80092d6:	d805      	bhi.n	80092e4 <ff_convert+0x30>
 80092d8:	88fb      	ldrh	r3, [r7, #6]
 80092da:	3b80      	subs	r3, #128	@ 0x80
 80092dc:	4a12      	ldr	r2, [pc, #72]	@ (8009328 <ff_convert+0x74>)
 80092de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e2:	e000      	b.n	80092e6 <ff_convert+0x32>
 80092e4:	2300      	movs	r3, #0
 80092e6:	81fb      	strh	r3, [r7, #14]
 80092e8:	e016      	b.n	8009318 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80092ea:	2300      	movs	r3, #0
 80092ec:	81fb      	strh	r3, [r7, #14]
 80092ee:	e009      	b.n	8009304 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80092f0:	89fb      	ldrh	r3, [r7, #14]
 80092f2:	4a0d      	ldr	r2, [pc, #52]	@ (8009328 <ff_convert+0x74>)
 80092f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092f8:	88fa      	ldrh	r2, [r7, #6]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d006      	beq.n	800930c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80092fe:	89fb      	ldrh	r3, [r7, #14]
 8009300:	3301      	adds	r3, #1
 8009302:	81fb      	strh	r3, [r7, #14]
 8009304:	89fb      	ldrh	r3, [r7, #14]
 8009306:	2b7f      	cmp	r3, #127	@ 0x7f
 8009308:	d9f2      	bls.n	80092f0 <ff_convert+0x3c>
 800930a:	e000      	b.n	800930e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800930c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800930e:	89fb      	ldrh	r3, [r7, #14]
 8009310:	3380      	adds	r3, #128	@ 0x80
 8009312:	b29b      	uxth	r3, r3
 8009314:	b2db      	uxtb	r3, r3
 8009316:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009318:	89fb      	ldrh	r3, [r7, #14]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3714      	adds	r7, #20
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	08009f80 	.word	0x08009f80

0800932c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009336:	88fb      	ldrh	r3, [r7, #6]
 8009338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800933c:	d201      	bcs.n	8009342 <ff_wtoupper+0x16>
 800933e:	4b3e      	ldr	r3, [pc, #248]	@ (8009438 <ff_wtoupper+0x10c>)
 8009340:	e000      	b.n	8009344 <ff_wtoupper+0x18>
 8009342:	4b3e      	ldr	r3, [pc, #248]	@ (800943c <ff_wtoupper+0x110>)
 8009344:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	1c9a      	adds	r2, r3, #2
 800934a:	617a      	str	r2, [r7, #20]
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009350:	8a7b      	ldrh	r3, [r7, #18]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d068      	beq.n	8009428 <ff_wtoupper+0xfc>
 8009356:	88fa      	ldrh	r2, [r7, #6]
 8009358:	8a7b      	ldrh	r3, [r7, #18]
 800935a:	429a      	cmp	r2, r3
 800935c:	d364      	bcc.n	8009428 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	1c9a      	adds	r2, r3, #2
 8009362:	617a      	str	r2, [r7, #20]
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	823b      	strh	r3, [r7, #16]
 8009368:	8a3b      	ldrh	r3, [r7, #16]
 800936a:	0a1b      	lsrs	r3, r3, #8
 800936c:	81fb      	strh	r3, [r7, #14]
 800936e:	8a3b      	ldrh	r3, [r7, #16]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009374:	88fa      	ldrh	r2, [r7, #6]
 8009376:	8a79      	ldrh	r1, [r7, #18]
 8009378:	8a3b      	ldrh	r3, [r7, #16]
 800937a:	440b      	add	r3, r1
 800937c:	429a      	cmp	r2, r3
 800937e:	da49      	bge.n	8009414 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009380:	89fb      	ldrh	r3, [r7, #14]
 8009382:	2b08      	cmp	r3, #8
 8009384:	d84f      	bhi.n	8009426 <ff_wtoupper+0xfa>
 8009386:	a201      	add	r2, pc, #4	@ (adr r2, 800938c <ff_wtoupper+0x60>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093b1 	.word	0x080093b1
 8009390:	080093c3 	.word	0x080093c3
 8009394:	080093d9 	.word	0x080093d9
 8009398:	080093e1 	.word	0x080093e1
 800939c:	080093e9 	.word	0x080093e9
 80093a0:	080093f1 	.word	0x080093f1
 80093a4:	080093f9 	.word	0x080093f9
 80093a8:	08009401 	.word	0x08009401
 80093ac:	08009409 	.word	0x08009409
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80093b0:	88fa      	ldrh	r2, [r7, #6]
 80093b2:	8a7b      	ldrh	r3, [r7, #18]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	005b      	lsls	r3, r3, #1
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	4413      	add	r3, r2
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	80fb      	strh	r3, [r7, #6]
 80093c0:	e027      	b.n	8009412 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80093c2:	88fa      	ldrh	r2, [r7, #6]
 80093c4:	8a7b      	ldrh	r3, [r7, #18]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	88fa      	ldrh	r2, [r7, #6]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	80fb      	strh	r3, [r7, #6]
 80093d6:	e01c      	b.n	8009412 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80093d8:	88fb      	ldrh	r3, [r7, #6]
 80093da:	3b10      	subs	r3, #16
 80093dc:	80fb      	strh	r3, [r7, #6]
 80093de:	e018      	b.n	8009412 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	3b20      	subs	r3, #32
 80093e4:	80fb      	strh	r3, [r7, #6]
 80093e6:	e014      	b.n	8009412 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80093e8:	88fb      	ldrh	r3, [r7, #6]
 80093ea:	3b30      	subs	r3, #48	@ 0x30
 80093ec:	80fb      	strh	r3, [r7, #6]
 80093ee:	e010      	b.n	8009412 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80093f0:	88fb      	ldrh	r3, [r7, #6]
 80093f2:	3b1a      	subs	r3, #26
 80093f4:	80fb      	strh	r3, [r7, #6]
 80093f6:	e00c      	b.n	8009412 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80093f8:	88fb      	ldrh	r3, [r7, #6]
 80093fa:	3308      	adds	r3, #8
 80093fc:	80fb      	strh	r3, [r7, #6]
 80093fe:	e008      	b.n	8009412 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009400:	88fb      	ldrh	r3, [r7, #6]
 8009402:	3b50      	subs	r3, #80	@ 0x50
 8009404:	80fb      	strh	r3, [r7, #6]
 8009406:	e004      	b.n	8009412 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009408:	88fb      	ldrh	r3, [r7, #6]
 800940a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800940e:	80fb      	strh	r3, [r7, #6]
 8009410:	bf00      	nop
			}
			break;
 8009412:	e008      	b.n	8009426 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009414:	89fb      	ldrh	r3, [r7, #14]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d195      	bne.n	8009346 <ff_wtoupper+0x1a>
 800941a:	8a3b      	ldrh	r3, [r7, #16]
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4413      	add	r3, r2
 8009422:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009424:	e78f      	b.n	8009346 <ff_wtoupper+0x1a>
			break;
 8009426:	bf00      	nop
	}

	return chr;
 8009428:	88fb      	ldrh	r3, [r7, #6]
}
 800942a:	4618      	mov	r0, r3
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	0800a080 	.word	0x0800a080
 800943c:	0800a274 	.word	0x0800a274

08009440 <siprintf>:
 8009440:	b40e      	push	{r1, r2, r3}
 8009442:	b500      	push	{lr}
 8009444:	b09c      	sub	sp, #112	@ 0x70
 8009446:	ab1d      	add	r3, sp, #116	@ 0x74
 8009448:	9002      	str	r0, [sp, #8]
 800944a:	9006      	str	r0, [sp, #24]
 800944c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009450:	4809      	ldr	r0, [pc, #36]	@ (8009478 <siprintf+0x38>)
 8009452:	9107      	str	r1, [sp, #28]
 8009454:	9104      	str	r1, [sp, #16]
 8009456:	4909      	ldr	r1, [pc, #36]	@ (800947c <siprintf+0x3c>)
 8009458:	f853 2b04 	ldr.w	r2, [r3], #4
 800945c:	9105      	str	r1, [sp, #20]
 800945e:	6800      	ldr	r0, [r0, #0]
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	a902      	add	r1, sp, #8
 8009464:	f000 f994 	bl	8009790 <_svfiprintf_r>
 8009468:	9b02      	ldr	r3, [sp, #8]
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	b01c      	add	sp, #112	@ 0x70
 8009470:	f85d eb04 	ldr.w	lr, [sp], #4
 8009474:	b003      	add	sp, #12
 8009476:	4770      	bx	lr
 8009478:	20000024 	.word	0x20000024
 800947c:	ffff0208 	.word	0xffff0208

08009480 <memset>:
 8009480:	4402      	add	r2, r0
 8009482:	4603      	mov	r3, r0
 8009484:	4293      	cmp	r3, r2
 8009486:	d100      	bne.n	800948a <memset+0xa>
 8009488:	4770      	bx	lr
 800948a:	f803 1b01 	strb.w	r1, [r3], #1
 800948e:	e7f9      	b.n	8009484 <memset+0x4>

08009490 <__errno>:
 8009490:	4b01      	ldr	r3, [pc, #4]	@ (8009498 <__errno+0x8>)
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000024 	.word	0x20000024

0800949c <__libc_init_array>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	4d0d      	ldr	r5, [pc, #52]	@ (80094d4 <__libc_init_array+0x38>)
 80094a0:	4c0d      	ldr	r4, [pc, #52]	@ (80094d8 <__libc_init_array+0x3c>)
 80094a2:	1b64      	subs	r4, r4, r5
 80094a4:	10a4      	asrs	r4, r4, #2
 80094a6:	2600      	movs	r6, #0
 80094a8:	42a6      	cmp	r6, r4
 80094aa:	d109      	bne.n	80094c0 <__libc_init_array+0x24>
 80094ac:	4d0b      	ldr	r5, [pc, #44]	@ (80094dc <__libc_init_array+0x40>)
 80094ae:	4c0c      	ldr	r4, [pc, #48]	@ (80094e0 <__libc_init_array+0x44>)
 80094b0:	f000 fc66 	bl	8009d80 <_init>
 80094b4:	1b64      	subs	r4, r4, r5
 80094b6:	10a4      	asrs	r4, r4, #2
 80094b8:	2600      	movs	r6, #0
 80094ba:	42a6      	cmp	r6, r4
 80094bc:	d105      	bne.n	80094ca <__libc_init_array+0x2e>
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c4:	4798      	blx	r3
 80094c6:	3601      	adds	r6, #1
 80094c8:	e7ee      	b.n	80094a8 <__libc_init_array+0xc>
 80094ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ce:	4798      	blx	r3
 80094d0:	3601      	adds	r6, #1
 80094d2:	e7f2      	b.n	80094ba <__libc_init_array+0x1e>
 80094d4:	0800a36c 	.word	0x0800a36c
 80094d8:	0800a36c 	.word	0x0800a36c
 80094dc:	0800a36c 	.word	0x0800a36c
 80094e0:	0800a370 	.word	0x0800a370

080094e4 <__retarget_lock_acquire_recursive>:
 80094e4:	4770      	bx	lr

080094e6 <__retarget_lock_release_recursive>:
 80094e6:	4770      	bx	lr

080094e8 <_free_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4605      	mov	r5, r0
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d041      	beq.n	8009574 <_free_r+0x8c>
 80094f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f4:	1f0c      	subs	r4, r1, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfb8      	it	lt
 80094fa:	18e4      	addlt	r4, r4, r3
 80094fc:	f000 f8e0 	bl	80096c0 <__malloc_lock>
 8009500:	4a1d      	ldr	r2, [pc, #116]	@ (8009578 <_free_r+0x90>)
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	b933      	cbnz	r3, 8009514 <_free_r+0x2c>
 8009506:	6063      	str	r3, [r4, #4]
 8009508:	6014      	str	r4, [r2, #0]
 800950a:	4628      	mov	r0, r5
 800950c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009510:	f000 b8dc 	b.w	80096cc <__malloc_unlock>
 8009514:	42a3      	cmp	r3, r4
 8009516:	d908      	bls.n	800952a <_free_r+0x42>
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	1821      	adds	r1, r4, r0
 800951c:	428b      	cmp	r3, r1
 800951e:	bf01      	itttt	eq
 8009520:	6819      	ldreq	r1, [r3, #0]
 8009522:	685b      	ldreq	r3, [r3, #4]
 8009524:	1809      	addeq	r1, r1, r0
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	e7ed      	b.n	8009506 <_free_r+0x1e>
 800952a:	461a      	mov	r2, r3
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	b10b      	cbz	r3, 8009534 <_free_r+0x4c>
 8009530:	42a3      	cmp	r3, r4
 8009532:	d9fa      	bls.n	800952a <_free_r+0x42>
 8009534:	6811      	ldr	r1, [r2, #0]
 8009536:	1850      	adds	r0, r2, r1
 8009538:	42a0      	cmp	r0, r4
 800953a:	d10b      	bne.n	8009554 <_free_r+0x6c>
 800953c:	6820      	ldr	r0, [r4, #0]
 800953e:	4401      	add	r1, r0
 8009540:	1850      	adds	r0, r2, r1
 8009542:	4283      	cmp	r3, r0
 8009544:	6011      	str	r1, [r2, #0]
 8009546:	d1e0      	bne.n	800950a <_free_r+0x22>
 8009548:	6818      	ldr	r0, [r3, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	6053      	str	r3, [r2, #4]
 800954e:	4408      	add	r0, r1
 8009550:	6010      	str	r0, [r2, #0]
 8009552:	e7da      	b.n	800950a <_free_r+0x22>
 8009554:	d902      	bls.n	800955c <_free_r+0x74>
 8009556:	230c      	movs	r3, #12
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	e7d6      	b.n	800950a <_free_r+0x22>
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	1821      	adds	r1, r4, r0
 8009560:	428b      	cmp	r3, r1
 8009562:	bf04      	itt	eq
 8009564:	6819      	ldreq	r1, [r3, #0]
 8009566:	685b      	ldreq	r3, [r3, #4]
 8009568:	6063      	str	r3, [r4, #4]
 800956a:	bf04      	itt	eq
 800956c:	1809      	addeq	r1, r1, r0
 800956e:	6021      	streq	r1, [r4, #0]
 8009570:	6054      	str	r4, [r2, #4]
 8009572:	e7ca      	b.n	800950a <_free_r+0x22>
 8009574:	bd38      	pop	{r3, r4, r5, pc}
 8009576:	bf00      	nop
 8009578:	20002708 	.word	0x20002708

0800957c <sbrk_aligned>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4e0f      	ldr	r6, [pc, #60]	@ (80095bc <sbrk_aligned+0x40>)
 8009580:	460c      	mov	r4, r1
 8009582:	6831      	ldr	r1, [r6, #0]
 8009584:	4605      	mov	r5, r0
 8009586:	b911      	cbnz	r1, 800958e <sbrk_aligned+0x12>
 8009588:	f000 fba6 	bl	8009cd8 <_sbrk_r>
 800958c:	6030      	str	r0, [r6, #0]
 800958e:	4621      	mov	r1, r4
 8009590:	4628      	mov	r0, r5
 8009592:	f000 fba1 	bl	8009cd8 <_sbrk_r>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	d103      	bne.n	80095a2 <sbrk_aligned+0x26>
 800959a:	f04f 34ff 	mov.w	r4, #4294967295
 800959e:	4620      	mov	r0, r4
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
 80095a2:	1cc4      	adds	r4, r0, #3
 80095a4:	f024 0403 	bic.w	r4, r4, #3
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d0f8      	beq.n	800959e <sbrk_aligned+0x22>
 80095ac:	1a21      	subs	r1, r4, r0
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 fb92 	bl	8009cd8 <_sbrk_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1f2      	bne.n	800959e <sbrk_aligned+0x22>
 80095b8:	e7ef      	b.n	800959a <sbrk_aligned+0x1e>
 80095ba:	bf00      	nop
 80095bc:	20002704 	.word	0x20002704

080095c0 <_malloc_r>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	1ccd      	adds	r5, r1, #3
 80095c6:	f025 0503 	bic.w	r5, r5, #3
 80095ca:	3508      	adds	r5, #8
 80095cc:	2d0c      	cmp	r5, #12
 80095ce:	bf38      	it	cc
 80095d0:	250c      	movcc	r5, #12
 80095d2:	2d00      	cmp	r5, #0
 80095d4:	4606      	mov	r6, r0
 80095d6:	db01      	blt.n	80095dc <_malloc_r+0x1c>
 80095d8:	42a9      	cmp	r1, r5
 80095da:	d904      	bls.n	80095e6 <_malloc_r+0x26>
 80095dc:	230c      	movs	r3, #12
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	2000      	movs	r0, #0
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096bc <_malloc_r+0xfc>
 80095ea:	f000 f869 	bl	80096c0 <__malloc_lock>
 80095ee:	f8d8 3000 	ldr.w	r3, [r8]
 80095f2:	461c      	mov	r4, r3
 80095f4:	bb44      	cbnz	r4, 8009648 <_malloc_r+0x88>
 80095f6:	4629      	mov	r1, r5
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7ff ffbf 	bl	800957c <sbrk_aligned>
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	4604      	mov	r4, r0
 8009602:	d158      	bne.n	80096b6 <_malloc_r+0xf6>
 8009604:	f8d8 4000 	ldr.w	r4, [r8]
 8009608:	4627      	mov	r7, r4
 800960a:	2f00      	cmp	r7, #0
 800960c:	d143      	bne.n	8009696 <_malloc_r+0xd6>
 800960e:	2c00      	cmp	r4, #0
 8009610:	d04b      	beq.n	80096aa <_malloc_r+0xea>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	4639      	mov	r1, r7
 8009616:	4630      	mov	r0, r6
 8009618:	eb04 0903 	add.w	r9, r4, r3
 800961c:	f000 fb5c 	bl	8009cd8 <_sbrk_r>
 8009620:	4581      	cmp	r9, r0
 8009622:	d142      	bne.n	80096aa <_malloc_r+0xea>
 8009624:	6821      	ldr	r1, [r4, #0]
 8009626:	1a6d      	subs	r5, r5, r1
 8009628:	4629      	mov	r1, r5
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff ffa6 	bl	800957c <sbrk_aligned>
 8009630:	3001      	adds	r0, #1
 8009632:	d03a      	beq.n	80096aa <_malloc_r+0xea>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	442b      	add	r3, r5
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	f8d8 3000 	ldr.w	r3, [r8]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	bb62      	cbnz	r2, 800969c <_malloc_r+0xdc>
 8009642:	f8c8 7000 	str.w	r7, [r8]
 8009646:	e00f      	b.n	8009668 <_malloc_r+0xa8>
 8009648:	6822      	ldr	r2, [r4, #0]
 800964a:	1b52      	subs	r2, r2, r5
 800964c:	d420      	bmi.n	8009690 <_malloc_r+0xd0>
 800964e:	2a0b      	cmp	r2, #11
 8009650:	d917      	bls.n	8009682 <_malloc_r+0xc2>
 8009652:	1961      	adds	r1, r4, r5
 8009654:	42a3      	cmp	r3, r4
 8009656:	6025      	str	r5, [r4, #0]
 8009658:	bf18      	it	ne
 800965a:	6059      	strne	r1, [r3, #4]
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	bf08      	it	eq
 8009660:	f8c8 1000 	streq.w	r1, [r8]
 8009664:	5162      	str	r2, [r4, r5]
 8009666:	604b      	str	r3, [r1, #4]
 8009668:	4630      	mov	r0, r6
 800966a:	f000 f82f 	bl	80096cc <__malloc_unlock>
 800966e:	f104 000b 	add.w	r0, r4, #11
 8009672:	1d23      	adds	r3, r4, #4
 8009674:	f020 0007 	bic.w	r0, r0, #7
 8009678:	1ac2      	subs	r2, r0, r3
 800967a:	bf1c      	itt	ne
 800967c:	1a1b      	subne	r3, r3, r0
 800967e:	50a3      	strne	r3, [r4, r2]
 8009680:	e7af      	b.n	80095e2 <_malloc_r+0x22>
 8009682:	6862      	ldr	r2, [r4, #4]
 8009684:	42a3      	cmp	r3, r4
 8009686:	bf0c      	ite	eq
 8009688:	f8c8 2000 	streq.w	r2, [r8]
 800968c:	605a      	strne	r2, [r3, #4]
 800968e:	e7eb      	b.n	8009668 <_malloc_r+0xa8>
 8009690:	4623      	mov	r3, r4
 8009692:	6864      	ldr	r4, [r4, #4]
 8009694:	e7ae      	b.n	80095f4 <_malloc_r+0x34>
 8009696:	463c      	mov	r4, r7
 8009698:	687f      	ldr	r7, [r7, #4]
 800969a:	e7b6      	b.n	800960a <_malloc_r+0x4a>
 800969c:	461a      	mov	r2, r3
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d1fb      	bne.n	800969c <_malloc_r+0xdc>
 80096a4:	2300      	movs	r3, #0
 80096a6:	6053      	str	r3, [r2, #4]
 80096a8:	e7de      	b.n	8009668 <_malloc_r+0xa8>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6033      	str	r3, [r6, #0]
 80096ae:	4630      	mov	r0, r6
 80096b0:	f000 f80c 	bl	80096cc <__malloc_unlock>
 80096b4:	e794      	b.n	80095e0 <_malloc_r+0x20>
 80096b6:	6005      	str	r5, [r0, #0]
 80096b8:	e7d6      	b.n	8009668 <_malloc_r+0xa8>
 80096ba:	bf00      	nop
 80096bc:	20002708 	.word	0x20002708

080096c0 <__malloc_lock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	@ (80096c8 <__malloc_lock+0x8>)
 80096c2:	f7ff bf0f 	b.w	80094e4 <__retarget_lock_acquire_recursive>
 80096c6:	bf00      	nop
 80096c8:	20002700 	.word	0x20002700

080096cc <__malloc_unlock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	@ (80096d4 <__malloc_unlock+0x8>)
 80096ce:	f7ff bf0a 	b.w	80094e6 <__retarget_lock_release_recursive>
 80096d2:	bf00      	nop
 80096d4:	20002700 	.word	0x20002700

080096d8 <__ssputs_r>:
 80096d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096dc:	688e      	ldr	r6, [r1, #8]
 80096de:	461f      	mov	r7, r3
 80096e0:	42be      	cmp	r6, r7
 80096e2:	680b      	ldr	r3, [r1, #0]
 80096e4:	4682      	mov	sl, r0
 80096e6:	460c      	mov	r4, r1
 80096e8:	4690      	mov	r8, r2
 80096ea:	d82d      	bhi.n	8009748 <__ssputs_r+0x70>
 80096ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096f4:	d026      	beq.n	8009744 <__ssputs_r+0x6c>
 80096f6:	6965      	ldr	r5, [r4, #20]
 80096f8:	6909      	ldr	r1, [r1, #16]
 80096fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096fe:	eba3 0901 	sub.w	r9, r3, r1
 8009702:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009706:	1c7b      	adds	r3, r7, #1
 8009708:	444b      	add	r3, r9
 800970a:	106d      	asrs	r5, r5, #1
 800970c:	429d      	cmp	r5, r3
 800970e:	bf38      	it	cc
 8009710:	461d      	movcc	r5, r3
 8009712:	0553      	lsls	r3, r2, #21
 8009714:	d527      	bpl.n	8009766 <__ssputs_r+0x8e>
 8009716:	4629      	mov	r1, r5
 8009718:	f7ff ff52 	bl	80095c0 <_malloc_r>
 800971c:	4606      	mov	r6, r0
 800971e:	b360      	cbz	r0, 800977a <__ssputs_r+0xa2>
 8009720:	6921      	ldr	r1, [r4, #16]
 8009722:	464a      	mov	r2, r9
 8009724:	f000 fae8 	bl	8009cf8 <memcpy>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800972e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	6126      	str	r6, [r4, #16]
 8009736:	6165      	str	r5, [r4, #20]
 8009738:	444e      	add	r6, r9
 800973a:	eba5 0509 	sub.w	r5, r5, r9
 800973e:	6026      	str	r6, [r4, #0]
 8009740:	60a5      	str	r5, [r4, #8]
 8009742:	463e      	mov	r6, r7
 8009744:	42be      	cmp	r6, r7
 8009746:	d900      	bls.n	800974a <__ssputs_r+0x72>
 8009748:	463e      	mov	r6, r7
 800974a:	6820      	ldr	r0, [r4, #0]
 800974c:	4632      	mov	r2, r6
 800974e:	4641      	mov	r1, r8
 8009750:	f000 faa8 	bl	8009ca4 <memmove>
 8009754:	68a3      	ldr	r3, [r4, #8]
 8009756:	1b9b      	subs	r3, r3, r6
 8009758:	60a3      	str	r3, [r4, #8]
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	4433      	add	r3, r6
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	2000      	movs	r0, #0
 8009762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009766:	462a      	mov	r2, r5
 8009768:	f000 fad4 	bl	8009d14 <_realloc_r>
 800976c:	4606      	mov	r6, r0
 800976e:	2800      	cmp	r0, #0
 8009770:	d1e0      	bne.n	8009734 <__ssputs_r+0x5c>
 8009772:	6921      	ldr	r1, [r4, #16]
 8009774:	4650      	mov	r0, sl
 8009776:	f7ff feb7 	bl	80094e8 <_free_r>
 800977a:	230c      	movs	r3, #12
 800977c:	f8ca 3000 	str.w	r3, [sl]
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009786:	81a3      	strh	r3, [r4, #12]
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	e7e9      	b.n	8009762 <__ssputs_r+0x8a>
	...

08009790 <_svfiprintf_r>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	4698      	mov	r8, r3
 8009796:	898b      	ldrh	r3, [r1, #12]
 8009798:	061b      	lsls	r3, r3, #24
 800979a:	b09d      	sub	sp, #116	@ 0x74
 800979c:	4607      	mov	r7, r0
 800979e:	460d      	mov	r5, r1
 80097a0:	4614      	mov	r4, r2
 80097a2:	d510      	bpl.n	80097c6 <_svfiprintf_r+0x36>
 80097a4:	690b      	ldr	r3, [r1, #16]
 80097a6:	b973      	cbnz	r3, 80097c6 <_svfiprintf_r+0x36>
 80097a8:	2140      	movs	r1, #64	@ 0x40
 80097aa:	f7ff ff09 	bl	80095c0 <_malloc_r>
 80097ae:	6028      	str	r0, [r5, #0]
 80097b0:	6128      	str	r0, [r5, #16]
 80097b2:	b930      	cbnz	r0, 80097c2 <_svfiprintf_r+0x32>
 80097b4:	230c      	movs	r3, #12
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295
 80097bc:	b01d      	add	sp, #116	@ 0x74
 80097be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c2:	2340      	movs	r3, #64	@ 0x40
 80097c4:	616b      	str	r3, [r5, #20]
 80097c6:	2300      	movs	r3, #0
 80097c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ca:	2320      	movs	r3, #32
 80097cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80097d4:	2330      	movs	r3, #48	@ 0x30
 80097d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009974 <_svfiprintf_r+0x1e4>
 80097da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097de:	f04f 0901 	mov.w	r9, #1
 80097e2:	4623      	mov	r3, r4
 80097e4:	469a      	mov	sl, r3
 80097e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ea:	b10a      	cbz	r2, 80097f0 <_svfiprintf_r+0x60>
 80097ec:	2a25      	cmp	r2, #37	@ 0x25
 80097ee:	d1f9      	bne.n	80097e4 <_svfiprintf_r+0x54>
 80097f0:	ebba 0b04 	subs.w	fp, sl, r4
 80097f4:	d00b      	beq.n	800980e <_svfiprintf_r+0x7e>
 80097f6:	465b      	mov	r3, fp
 80097f8:	4622      	mov	r2, r4
 80097fa:	4629      	mov	r1, r5
 80097fc:	4638      	mov	r0, r7
 80097fe:	f7ff ff6b 	bl	80096d8 <__ssputs_r>
 8009802:	3001      	adds	r0, #1
 8009804:	f000 80a7 	beq.w	8009956 <_svfiprintf_r+0x1c6>
 8009808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800980a:	445a      	add	r2, fp
 800980c:	9209      	str	r2, [sp, #36]	@ 0x24
 800980e:	f89a 3000 	ldrb.w	r3, [sl]
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 809f 	beq.w	8009956 <_svfiprintf_r+0x1c6>
 8009818:	2300      	movs	r3, #0
 800981a:	f04f 32ff 	mov.w	r2, #4294967295
 800981e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009822:	f10a 0a01 	add.w	sl, sl, #1
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	9307      	str	r3, [sp, #28]
 800982a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800982e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009830:	4654      	mov	r4, sl
 8009832:	2205      	movs	r2, #5
 8009834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009838:	484e      	ldr	r0, [pc, #312]	@ (8009974 <_svfiprintf_r+0x1e4>)
 800983a:	f7f6 fcd9 	bl	80001f0 <memchr>
 800983e:	9a04      	ldr	r2, [sp, #16]
 8009840:	b9d8      	cbnz	r0, 800987a <_svfiprintf_r+0xea>
 8009842:	06d0      	lsls	r0, r2, #27
 8009844:	bf44      	itt	mi
 8009846:	2320      	movmi	r3, #32
 8009848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800984c:	0711      	lsls	r1, r2, #28
 800984e:	bf44      	itt	mi
 8009850:	232b      	movmi	r3, #43	@ 0x2b
 8009852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009856:	f89a 3000 	ldrb.w	r3, [sl]
 800985a:	2b2a      	cmp	r3, #42	@ 0x2a
 800985c:	d015      	beq.n	800988a <_svfiprintf_r+0xfa>
 800985e:	9a07      	ldr	r2, [sp, #28]
 8009860:	4654      	mov	r4, sl
 8009862:	2000      	movs	r0, #0
 8009864:	f04f 0c0a 	mov.w	ip, #10
 8009868:	4621      	mov	r1, r4
 800986a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800986e:	3b30      	subs	r3, #48	@ 0x30
 8009870:	2b09      	cmp	r3, #9
 8009872:	d94b      	bls.n	800990c <_svfiprintf_r+0x17c>
 8009874:	b1b0      	cbz	r0, 80098a4 <_svfiprintf_r+0x114>
 8009876:	9207      	str	r2, [sp, #28]
 8009878:	e014      	b.n	80098a4 <_svfiprintf_r+0x114>
 800987a:	eba0 0308 	sub.w	r3, r0, r8
 800987e:	fa09 f303 	lsl.w	r3, r9, r3
 8009882:	4313      	orrs	r3, r2
 8009884:	9304      	str	r3, [sp, #16]
 8009886:	46a2      	mov	sl, r4
 8009888:	e7d2      	b.n	8009830 <_svfiprintf_r+0xa0>
 800988a:	9b03      	ldr	r3, [sp, #12]
 800988c:	1d19      	adds	r1, r3, #4
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	9103      	str	r1, [sp, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	bfbb      	ittet	lt
 8009896:	425b      	neglt	r3, r3
 8009898:	f042 0202 	orrlt.w	r2, r2, #2
 800989c:	9307      	strge	r3, [sp, #28]
 800989e:	9307      	strlt	r3, [sp, #28]
 80098a0:	bfb8      	it	lt
 80098a2:	9204      	strlt	r2, [sp, #16]
 80098a4:	7823      	ldrb	r3, [r4, #0]
 80098a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80098a8:	d10a      	bne.n	80098c0 <_svfiprintf_r+0x130>
 80098aa:	7863      	ldrb	r3, [r4, #1]
 80098ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ae:	d132      	bne.n	8009916 <_svfiprintf_r+0x186>
 80098b0:	9b03      	ldr	r3, [sp, #12]
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	9203      	str	r2, [sp, #12]
 80098b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098bc:	3402      	adds	r4, #2
 80098be:	9305      	str	r3, [sp, #20]
 80098c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009984 <_svfiprintf_r+0x1f4>
 80098c4:	7821      	ldrb	r1, [r4, #0]
 80098c6:	2203      	movs	r2, #3
 80098c8:	4650      	mov	r0, sl
 80098ca:	f7f6 fc91 	bl	80001f0 <memchr>
 80098ce:	b138      	cbz	r0, 80098e0 <_svfiprintf_r+0x150>
 80098d0:	9b04      	ldr	r3, [sp, #16]
 80098d2:	eba0 000a 	sub.w	r0, r0, sl
 80098d6:	2240      	movs	r2, #64	@ 0x40
 80098d8:	4082      	lsls	r2, r0
 80098da:	4313      	orrs	r3, r2
 80098dc:	3401      	adds	r4, #1
 80098de:	9304      	str	r3, [sp, #16]
 80098e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e4:	4824      	ldr	r0, [pc, #144]	@ (8009978 <_svfiprintf_r+0x1e8>)
 80098e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098ea:	2206      	movs	r2, #6
 80098ec:	f7f6 fc80 	bl	80001f0 <memchr>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d036      	beq.n	8009962 <_svfiprintf_r+0x1d2>
 80098f4:	4b21      	ldr	r3, [pc, #132]	@ (800997c <_svfiprintf_r+0x1ec>)
 80098f6:	bb1b      	cbnz	r3, 8009940 <_svfiprintf_r+0x1b0>
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	3307      	adds	r3, #7
 80098fc:	f023 0307 	bic.w	r3, r3, #7
 8009900:	3308      	adds	r3, #8
 8009902:	9303      	str	r3, [sp, #12]
 8009904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009906:	4433      	add	r3, r6
 8009908:	9309      	str	r3, [sp, #36]	@ 0x24
 800990a:	e76a      	b.n	80097e2 <_svfiprintf_r+0x52>
 800990c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009910:	460c      	mov	r4, r1
 8009912:	2001      	movs	r0, #1
 8009914:	e7a8      	b.n	8009868 <_svfiprintf_r+0xd8>
 8009916:	2300      	movs	r3, #0
 8009918:	3401      	adds	r4, #1
 800991a:	9305      	str	r3, [sp, #20]
 800991c:	4619      	mov	r1, r3
 800991e:	f04f 0c0a 	mov.w	ip, #10
 8009922:	4620      	mov	r0, r4
 8009924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009928:	3a30      	subs	r2, #48	@ 0x30
 800992a:	2a09      	cmp	r2, #9
 800992c:	d903      	bls.n	8009936 <_svfiprintf_r+0x1a6>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0c6      	beq.n	80098c0 <_svfiprintf_r+0x130>
 8009932:	9105      	str	r1, [sp, #20]
 8009934:	e7c4      	b.n	80098c0 <_svfiprintf_r+0x130>
 8009936:	fb0c 2101 	mla	r1, ip, r1, r2
 800993a:	4604      	mov	r4, r0
 800993c:	2301      	movs	r3, #1
 800993e:	e7f0      	b.n	8009922 <_svfiprintf_r+0x192>
 8009940:	ab03      	add	r3, sp, #12
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	462a      	mov	r2, r5
 8009946:	4b0e      	ldr	r3, [pc, #56]	@ (8009980 <_svfiprintf_r+0x1f0>)
 8009948:	a904      	add	r1, sp, #16
 800994a:	4638      	mov	r0, r7
 800994c:	f3af 8000 	nop.w
 8009950:	1c42      	adds	r2, r0, #1
 8009952:	4606      	mov	r6, r0
 8009954:	d1d6      	bne.n	8009904 <_svfiprintf_r+0x174>
 8009956:	89ab      	ldrh	r3, [r5, #12]
 8009958:	065b      	lsls	r3, r3, #25
 800995a:	f53f af2d 	bmi.w	80097b8 <_svfiprintf_r+0x28>
 800995e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009960:	e72c      	b.n	80097bc <_svfiprintf_r+0x2c>
 8009962:	ab03      	add	r3, sp, #12
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	462a      	mov	r2, r5
 8009968:	4b05      	ldr	r3, [pc, #20]	@ (8009980 <_svfiprintf_r+0x1f0>)
 800996a:	a904      	add	r1, sp, #16
 800996c:	4638      	mov	r0, r7
 800996e:	f000 f879 	bl	8009a64 <_printf_i>
 8009972:	e7ed      	b.n	8009950 <_svfiprintf_r+0x1c0>
 8009974:	0800a330 	.word	0x0800a330
 8009978:	0800a33a 	.word	0x0800a33a
 800997c:	00000000 	.word	0x00000000
 8009980:	080096d9 	.word	0x080096d9
 8009984:	0800a336 	.word	0x0800a336

08009988 <_printf_common>:
 8009988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800998c:	4616      	mov	r6, r2
 800998e:	4698      	mov	r8, r3
 8009990:	688a      	ldr	r2, [r1, #8]
 8009992:	690b      	ldr	r3, [r1, #16]
 8009994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009998:	4293      	cmp	r3, r2
 800999a:	bfb8      	it	lt
 800999c:	4613      	movlt	r3, r2
 800999e:	6033      	str	r3, [r6, #0]
 80099a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80099a4:	4607      	mov	r7, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	b10a      	cbz	r2, 80099ae <_printf_common+0x26>
 80099aa:	3301      	adds	r3, #1
 80099ac:	6033      	str	r3, [r6, #0]
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	0699      	lsls	r1, r3, #26
 80099b2:	bf42      	ittt	mi
 80099b4:	6833      	ldrmi	r3, [r6, #0]
 80099b6:	3302      	addmi	r3, #2
 80099b8:	6033      	strmi	r3, [r6, #0]
 80099ba:	6825      	ldr	r5, [r4, #0]
 80099bc:	f015 0506 	ands.w	r5, r5, #6
 80099c0:	d106      	bne.n	80099d0 <_printf_common+0x48>
 80099c2:	f104 0a19 	add.w	sl, r4, #25
 80099c6:	68e3      	ldr	r3, [r4, #12]
 80099c8:	6832      	ldr	r2, [r6, #0]
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	42ab      	cmp	r3, r5
 80099ce:	dc26      	bgt.n	8009a1e <_printf_common+0x96>
 80099d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099d4:	6822      	ldr	r2, [r4, #0]
 80099d6:	3b00      	subs	r3, #0
 80099d8:	bf18      	it	ne
 80099da:	2301      	movne	r3, #1
 80099dc:	0692      	lsls	r2, r2, #26
 80099de:	d42b      	bmi.n	8009a38 <_printf_common+0xb0>
 80099e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099e4:	4641      	mov	r1, r8
 80099e6:	4638      	mov	r0, r7
 80099e8:	47c8      	blx	r9
 80099ea:	3001      	adds	r0, #1
 80099ec:	d01e      	beq.n	8009a2c <_printf_common+0xa4>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	6922      	ldr	r2, [r4, #16]
 80099f2:	f003 0306 	and.w	r3, r3, #6
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	bf02      	ittt	eq
 80099fa:	68e5      	ldreq	r5, [r4, #12]
 80099fc:	6833      	ldreq	r3, [r6, #0]
 80099fe:	1aed      	subeq	r5, r5, r3
 8009a00:	68a3      	ldr	r3, [r4, #8]
 8009a02:	bf0c      	ite	eq
 8009a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a08:	2500      	movne	r5, #0
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	bfc4      	itt	gt
 8009a0e:	1a9b      	subgt	r3, r3, r2
 8009a10:	18ed      	addgt	r5, r5, r3
 8009a12:	2600      	movs	r6, #0
 8009a14:	341a      	adds	r4, #26
 8009a16:	42b5      	cmp	r5, r6
 8009a18:	d11a      	bne.n	8009a50 <_printf_common+0xc8>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	e008      	b.n	8009a30 <_printf_common+0xa8>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	4652      	mov	r2, sl
 8009a22:	4641      	mov	r1, r8
 8009a24:	4638      	mov	r0, r7
 8009a26:	47c8      	blx	r9
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d103      	bne.n	8009a34 <_printf_common+0xac>
 8009a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a34:	3501      	adds	r5, #1
 8009a36:	e7c6      	b.n	80099c6 <_printf_common+0x3e>
 8009a38:	18e1      	adds	r1, r4, r3
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	2030      	movs	r0, #48	@ 0x30
 8009a3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a42:	4422      	add	r2, r4
 8009a44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a4c:	3302      	adds	r3, #2
 8009a4e:	e7c7      	b.n	80099e0 <_printf_common+0x58>
 8009a50:	2301      	movs	r3, #1
 8009a52:	4622      	mov	r2, r4
 8009a54:	4641      	mov	r1, r8
 8009a56:	4638      	mov	r0, r7
 8009a58:	47c8      	blx	r9
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d0e6      	beq.n	8009a2c <_printf_common+0xa4>
 8009a5e:	3601      	adds	r6, #1
 8009a60:	e7d9      	b.n	8009a16 <_printf_common+0x8e>
	...

08009a64 <_printf_i>:
 8009a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a68:	7e0f      	ldrb	r7, [r1, #24]
 8009a6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a6c:	2f78      	cmp	r7, #120	@ 0x78
 8009a6e:	4691      	mov	r9, r2
 8009a70:	4680      	mov	r8, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	469a      	mov	sl, r3
 8009a76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a7a:	d807      	bhi.n	8009a8c <_printf_i+0x28>
 8009a7c:	2f62      	cmp	r7, #98	@ 0x62
 8009a7e:	d80a      	bhi.n	8009a96 <_printf_i+0x32>
 8009a80:	2f00      	cmp	r7, #0
 8009a82:	f000 80d2 	beq.w	8009c2a <_printf_i+0x1c6>
 8009a86:	2f58      	cmp	r7, #88	@ 0x58
 8009a88:	f000 80b9 	beq.w	8009bfe <_printf_i+0x19a>
 8009a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a94:	e03a      	b.n	8009b0c <_printf_i+0xa8>
 8009a96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a9a:	2b15      	cmp	r3, #21
 8009a9c:	d8f6      	bhi.n	8009a8c <_printf_i+0x28>
 8009a9e:	a101      	add	r1, pc, #4	@ (adr r1, 8009aa4 <_printf_i+0x40>)
 8009aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009aa4:	08009afd 	.word	0x08009afd
 8009aa8:	08009b11 	.word	0x08009b11
 8009aac:	08009a8d 	.word	0x08009a8d
 8009ab0:	08009a8d 	.word	0x08009a8d
 8009ab4:	08009a8d 	.word	0x08009a8d
 8009ab8:	08009a8d 	.word	0x08009a8d
 8009abc:	08009b11 	.word	0x08009b11
 8009ac0:	08009a8d 	.word	0x08009a8d
 8009ac4:	08009a8d 	.word	0x08009a8d
 8009ac8:	08009a8d 	.word	0x08009a8d
 8009acc:	08009a8d 	.word	0x08009a8d
 8009ad0:	08009c11 	.word	0x08009c11
 8009ad4:	08009b3b 	.word	0x08009b3b
 8009ad8:	08009bcb 	.word	0x08009bcb
 8009adc:	08009a8d 	.word	0x08009a8d
 8009ae0:	08009a8d 	.word	0x08009a8d
 8009ae4:	08009c33 	.word	0x08009c33
 8009ae8:	08009a8d 	.word	0x08009a8d
 8009aec:	08009b3b 	.word	0x08009b3b
 8009af0:	08009a8d 	.word	0x08009a8d
 8009af4:	08009a8d 	.word	0x08009a8d
 8009af8:	08009bd3 	.word	0x08009bd3
 8009afc:	6833      	ldr	r3, [r6, #0]
 8009afe:	1d1a      	adds	r2, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6032      	str	r2, [r6, #0]
 8009b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e09d      	b.n	8009c4c <_printf_i+0x1e8>
 8009b10:	6833      	ldr	r3, [r6, #0]
 8009b12:	6820      	ldr	r0, [r4, #0]
 8009b14:	1d19      	adds	r1, r3, #4
 8009b16:	6031      	str	r1, [r6, #0]
 8009b18:	0606      	lsls	r6, r0, #24
 8009b1a:	d501      	bpl.n	8009b20 <_printf_i+0xbc>
 8009b1c:	681d      	ldr	r5, [r3, #0]
 8009b1e:	e003      	b.n	8009b28 <_printf_i+0xc4>
 8009b20:	0645      	lsls	r5, r0, #25
 8009b22:	d5fb      	bpl.n	8009b1c <_printf_i+0xb8>
 8009b24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b28:	2d00      	cmp	r5, #0
 8009b2a:	da03      	bge.n	8009b34 <_printf_i+0xd0>
 8009b2c:	232d      	movs	r3, #45	@ 0x2d
 8009b2e:	426d      	negs	r5, r5
 8009b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b34:	4859      	ldr	r0, [pc, #356]	@ (8009c9c <_printf_i+0x238>)
 8009b36:	230a      	movs	r3, #10
 8009b38:	e011      	b.n	8009b5e <_printf_i+0xfa>
 8009b3a:	6821      	ldr	r1, [r4, #0]
 8009b3c:	6833      	ldr	r3, [r6, #0]
 8009b3e:	0608      	lsls	r0, r1, #24
 8009b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b44:	d402      	bmi.n	8009b4c <_printf_i+0xe8>
 8009b46:	0649      	lsls	r1, r1, #25
 8009b48:	bf48      	it	mi
 8009b4a:	b2ad      	uxthmi	r5, r5
 8009b4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b4e:	4853      	ldr	r0, [pc, #332]	@ (8009c9c <_printf_i+0x238>)
 8009b50:	6033      	str	r3, [r6, #0]
 8009b52:	bf14      	ite	ne
 8009b54:	230a      	movne	r3, #10
 8009b56:	2308      	moveq	r3, #8
 8009b58:	2100      	movs	r1, #0
 8009b5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b5e:	6866      	ldr	r6, [r4, #4]
 8009b60:	60a6      	str	r6, [r4, #8]
 8009b62:	2e00      	cmp	r6, #0
 8009b64:	bfa2      	ittt	ge
 8009b66:	6821      	ldrge	r1, [r4, #0]
 8009b68:	f021 0104 	bicge.w	r1, r1, #4
 8009b6c:	6021      	strge	r1, [r4, #0]
 8009b6e:	b90d      	cbnz	r5, 8009b74 <_printf_i+0x110>
 8009b70:	2e00      	cmp	r6, #0
 8009b72:	d04b      	beq.n	8009c0c <_printf_i+0x1a8>
 8009b74:	4616      	mov	r6, r2
 8009b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8009b7e:	5dc7      	ldrb	r7, [r0, r7]
 8009b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b84:	462f      	mov	r7, r5
 8009b86:	42bb      	cmp	r3, r7
 8009b88:	460d      	mov	r5, r1
 8009b8a:	d9f4      	bls.n	8009b76 <_printf_i+0x112>
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d10b      	bne.n	8009ba8 <_printf_i+0x144>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	07df      	lsls	r7, r3, #31
 8009b94:	d508      	bpl.n	8009ba8 <_printf_i+0x144>
 8009b96:	6923      	ldr	r3, [r4, #16]
 8009b98:	6861      	ldr	r1, [r4, #4]
 8009b9a:	4299      	cmp	r1, r3
 8009b9c:	bfde      	ittt	le
 8009b9e:	2330      	movle	r3, #48	@ 0x30
 8009ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ba8:	1b92      	subs	r2, r2, r6
 8009baa:	6122      	str	r2, [r4, #16]
 8009bac:	f8cd a000 	str.w	sl, [sp]
 8009bb0:	464b      	mov	r3, r9
 8009bb2:	aa03      	add	r2, sp, #12
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	f7ff fee6 	bl	8009988 <_printf_common>
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d14a      	bne.n	8009c56 <_printf_i+0x1f2>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	b004      	add	sp, #16
 8009bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	f043 0320 	orr.w	r3, r3, #32
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	4833      	ldr	r0, [pc, #204]	@ (8009ca0 <_printf_i+0x23c>)
 8009bd4:	2778      	movs	r7, #120	@ 0x78
 8009bd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	6831      	ldr	r1, [r6, #0]
 8009bde:	061f      	lsls	r7, r3, #24
 8009be0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009be4:	d402      	bmi.n	8009bec <_printf_i+0x188>
 8009be6:	065f      	lsls	r7, r3, #25
 8009be8:	bf48      	it	mi
 8009bea:	b2ad      	uxthmi	r5, r5
 8009bec:	6031      	str	r1, [r6, #0]
 8009bee:	07d9      	lsls	r1, r3, #31
 8009bf0:	bf44      	itt	mi
 8009bf2:	f043 0320 	orrmi.w	r3, r3, #32
 8009bf6:	6023      	strmi	r3, [r4, #0]
 8009bf8:	b11d      	cbz	r5, 8009c02 <_printf_i+0x19e>
 8009bfa:	2310      	movs	r3, #16
 8009bfc:	e7ac      	b.n	8009b58 <_printf_i+0xf4>
 8009bfe:	4827      	ldr	r0, [pc, #156]	@ (8009c9c <_printf_i+0x238>)
 8009c00:	e7e9      	b.n	8009bd6 <_printf_i+0x172>
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	f023 0320 	bic.w	r3, r3, #32
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	e7f6      	b.n	8009bfa <_printf_i+0x196>
 8009c0c:	4616      	mov	r6, r2
 8009c0e:	e7bd      	b.n	8009b8c <_printf_i+0x128>
 8009c10:	6833      	ldr	r3, [r6, #0]
 8009c12:	6825      	ldr	r5, [r4, #0]
 8009c14:	6961      	ldr	r1, [r4, #20]
 8009c16:	1d18      	adds	r0, r3, #4
 8009c18:	6030      	str	r0, [r6, #0]
 8009c1a:	062e      	lsls	r6, r5, #24
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	d501      	bpl.n	8009c24 <_printf_i+0x1c0>
 8009c20:	6019      	str	r1, [r3, #0]
 8009c22:	e002      	b.n	8009c2a <_printf_i+0x1c6>
 8009c24:	0668      	lsls	r0, r5, #25
 8009c26:	d5fb      	bpl.n	8009c20 <_printf_i+0x1bc>
 8009c28:	8019      	strh	r1, [r3, #0]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	6123      	str	r3, [r4, #16]
 8009c2e:	4616      	mov	r6, r2
 8009c30:	e7bc      	b.n	8009bac <_printf_i+0x148>
 8009c32:	6833      	ldr	r3, [r6, #0]
 8009c34:	1d1a      	adds	r2, r3, #4
 8009c36:	6032      	str	r2, [r6, #0]
 8009c38:	681e      	ldr	r6, [r3, #0]
 8009c3a:	6862      	ldr	r2, [r4, #4]
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4630      	mov	r0, r6
 8009c40:	f7f6 fad6 	bl	80001f0 <memchr>
 8009c44:	b108      	cbz	r0, 8009c4a <_printf_i+0x1e6>
 8009c46:	1b80      	subs	r0, r0, r6
 8009c48:	6060      	str	r0, [r4, #4]
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	6123      	str	r3, [r4, #16]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c54:	e7aa      	b.n	8009bac <_printf_i+0x148>
 8009c56:	6923      	ldr	r3, [r4, #16]
 8009c58:	4632      	mov	r2, r6
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	47d0      	blx	sl
 8009c60:	3001      	adds	r0, #1
 8009c62:	d0ad      	beq.n	8009bc0 <_printf_i+0x15c>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	079b      	lsls	r3, r3, #30
 8009c68:	d413      	bmi.n	8009c92 <_printf_i+0x22e>
 8009c6a:	68e0      	ldr	r0, [r4, #12]
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	4298      	cmp	r0, r3
 8009c70:	bfb8      	it	lt
 8009c72:	4618      	movlt	r0, r3
 8009c74:	e7a6      	b.n	8009bc4 <_printf_i+0x160>
 8009c76:	2301      	movs	r3, #1
 8009c78:	4632      	mov	r2, r6
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	47d0      	blx	sl
 8009c80:	3001      	adds	r0, #1
 8009c82:	d09d      	beq.n	8009bc0 <_printf_i+0x15c>
 8009c84:	3501      	adds	r5, #1
 8009c86:	68e3      	ldr	r3, [r4, #12]
 8009c88:	9903      	ldr	r1, [sp, #12]
 8009c8a:	1a5b      	subs	r3, r3, r1
 8009c8c:	42ab      	cmp	r3, r5
 8009c8e:	dcf2      	bgt.n	8009c76 <_printf_i+0x212>
 8009c90:	e7eb      	b.n	8009c6a <_printf_i+0x206>
 8009c92:	2500      	movs	r5, #0
 8009c94:	f104 0619 	add.w	r6, r4, #25
 8009c98:	e7f5      	b.n	8009c86 <_printf_i+0x222>
 8009c9a:	bf00      	nop
 8009c9c:	0800a341 	.word	0x0800a341
 8009ca0:	0800a352 	.word	0x0800a352

08009ca4 <memmove>:
 8009ca4:	4288      	cmp	r0, r1
 8009ca6:	b510      	push	{r4, lr}
 8009ca8:	eb01 0402 	add.w	r4, r1, r2
 8009cac:	d902      	bls.n	8009cb4 <memmove+0x10>
 8009cae:	4284      	cmp	r4, r0
 8009cb0:	4623      	mov	r3, r4
 8009cb2:	d807      	bhi.n	8009cc4 <memmove+0x20>
 8009cb4:	1e43      	subs	r3, r0, #1
 8009cb6:	42a1      	cmp	r1, r4
 8009cb8:	d008      	beq.n	8009ccc <memmove+0x28>
 8009cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cc2:	e7f8      	b.n	8009cb6 <memmove+0x12>
 8009cc4:	4402      	add	r2, r0
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	428a      	cmp	r2, r1
 8009cca:	d100      	bne.n	8009cce <memmove+0x2a>
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cd6:	e7f7      	b.n	8009cc8 <memmove+0x24>

08009cd8 <_sbrk_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d06      	ldr	r5, [pc, #24]	@ (8009cf4 <_sbrk_r+0x1c>)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4604      	mov	r4, r0
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	602b      	str	r3, [r5, #0]
 8009ce4:	f7f8 fb2c 	bl	8002340 <_sbrk>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <_sbrk_r+0x1a>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	b103      	cbz	r3, 8009cf2 <_sbrk_r+0x1a>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	200026fc 	.word	0x200026fc

08009cf8 <memcpy>:
 8009cf8:	440a      	add	r2, r1
 8009cfa:	4291      	cmp	r1, r2
 8009cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d00:	d100      	bne.n	8009d04 <memcpy+0xc>
 8009d02:	4770      	bx	lr
 8009d04:	b510      	push	{r4, lr}
 8009d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d0e:	4291      	cmp	r1, r2
 8009d10:	d1f9      	bne.n	8009d06 <memcpy+0xe>
 8009d12:	bd10      	pop	{r4, pc}

08009d14 <_realloc_r>:
 8009d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d18:	4680      	mov	r8, r0
 8009d1a:	4615      	mov	r5, r2
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	b921      	cbnz	r1, 8009d2a <_realloc_r+0x16>
 8009d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d24:	4611      	mov	r1, r2
 8009d26:	f7ff bc4b 	b.w	80095c0 <_malloc_r>
 8009d2a:	b92a      	cbnz	r2, 8009d38 <_realloc_r+0x24>
 8009d2c:	f7ff fbdc 	bl	80094e8 <_free_r>
 8009d30:	2400      	movs	r4, #0
 8009d32:	4620      	mov	r0, r4
 8009d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d38:	f000 f81a 	bl	8009d70 <_malloc_usable_size_r>
 8009d3c:	4285      	cmp	r5, r0
 8009d3e:	4606      	mov	r6, r0
 8009d40:	d802      	bhi.n	8009d48 <_realloc_r+0x34>
 8009d42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d46:	d8f4      	bhi.n	8009d32 <_realloc_r+0x1e>
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	f7ff fc38 	bl	80095c0 <_malloc_r>
 8009d50:	4607      	mov	r7, r0
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d0ec      	beq.n	8009d30 <_realloc_r+0x1c>
 8009d56:	42b5      	cmp	r5, r6
 8009d58:	462a      	mov	r2, r5
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	bf28      	it	cs
 8009d5e:	4632      	movcs	r2, r6
 8009d60:	f7ff ffca 	bl	8009cf8 <memcpy>
 8009d64:	4621      	mov	r1, r4
 8009d66:	4640      	mov	r0, r8
 8009d68:	f7ff fbbe 	bl	80094e8 <_free_r>
 8009d6c:	463c      	mov	r4, r7
 8009d6e:	e7e0      	b.n	8009d32 <_realloc_r+0x1e>

08009d70 <_malloc_usable_size_r>:
 8009d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d74:	1f18      	subs	r0, r3, #4
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	bfbc      	itt	lt
 8009d7a:	580b      	ldrlt	r3, [r1, r0]
 8009d7c:	18c0      	addlt	r0, r0, r3
 8009d7e:	4770      	bx	lr

08009d80 <_init>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr

08009d8c <_fini>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr
